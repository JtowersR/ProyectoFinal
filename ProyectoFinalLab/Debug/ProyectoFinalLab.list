
ProyectoFinalLab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000610c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08006220  08006220  00016220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006528  08006528  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006528  08006528  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006528  08006528  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006528  08006528  00016528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800652c  0800652c  0001652c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  080065a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080065a0  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008571  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a5  00000000  00000000  0002860a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  00029fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  0002a880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018111  00000000  00000000  0002b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b079  00000000  00000000  000431a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088767  00000000  00000000  0004e21a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6981  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033e4  00000000  00000000  000d69d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08006204 	.word	0x08006204

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08006204 	.word	0x08006204

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_f2iz>:
 8000fa8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fb0:	d30f      	bcc.n	8000fd2 <__aeabi_f2iz+0x2a>
 8000fb2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fba:	d90d      	bls.n	8000fd8 <__aeabi_f2iz+0x30>
 8000fbc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fc8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fcc:	bf18      	it	ne
 8000fce:	4240      	negne	r0, r0
 8000fd0:	4770      	bx	lr
 8000fd2:	f04f 0000 	mov.w	r0, #0
 8000fd6:	4770      	bx	lr
 8000fd8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fdc:	d101      	bne.n	8000fe2 <__aeabi_f2iz+0x3a>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	d105      	bne.n	8000fee <__aeabi_f2iz+0x46>
 8000fe2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fe6:	bf08      	it	eq
 8000fe8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fec:	4770      	bx	lr
 8000fee:	f04f 0000 	mov.w	r0, #0
 8000ff2:	4770      	bx	lr

08000ff4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f023 030f 	bic.w	r3, r3, #15
 8001004:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	011b      	lsls	r3, r3, #4
 800100a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	f043 030c 	orr.w	r3, r3, #12
 8001012:	b2db      	uxtb	r3, r3
 8001014:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	f043 0308 	orr.w	r3, r3, #8
 800101c:	b2db      	uxtb	r3, r3
 800101e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001020:	7bbb      	ldrb	r3, [r7, #14]
 8001022:	f043 030c 	orr.w	r3, r3, #12
 8001026:	b2db      	uxtb	r3, r3
 8001028:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800102a:	7bbb      	ldrb	r3, [r7, #14]
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	b2db      	uxtb	r3, r3
 8001032:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001034:	f107 0208 	add.w	r2, r7, #8
 8001038:	2364      	movs	r3, #100	; 0x64
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2304      	movs	r3, #4
 800103e:	214e      	movs	r1, #78	; 0x4e
 8001040:	4803      	ldr	r0, [pc, #12]	; (8001050 <lcd_send_cmd+0x5c>)
 8001042:	f001 fc77 	bl	8002934 <HAL_I2C_Master_Transmit>
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200000bc 	.word	0x200000bc

08001054 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af02      	add	r7, sp, #8
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f023 030f 	bic.w	r3, r3, #15
 8001064:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	011b      	lsls	r3, r3, #4
 800106a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	f043 030d 	orr.w	r3, r3, #13
 8001072:	b2db      	uxtb	r3, r3
 8001074:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	f043 0309 	orr.w	r3, r3, #9
 800107c:	b2db      	uxtb	r3, r3
 800107e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001080:	7bbb      	ldrb	r3, [r7, #14]
 8001082:	f043 030d 	orr.w	r3, r3, #13
 8001086:	b2db      	uxtb	r3, r3
 8001088:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	f043 0309 	orr.w	r3, r3, #9
 8001090:	b2db      	uxtb	r3, r3
 8001092:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001094:	f107 0208 	add.w	r2, r7, #8
 8001098:	2364      	movs	r3, #100	; 0x64
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2304      	movs	r3, #4
 800109e:	214e      	movs	r1, #78	; 0x4e
 80010a0:	4803      	ldr	r0, [pc, #12]	; (80010b0 <lcd_send_data+0x5c>)
 80010a2:	f001 fc47 	bl	8002934 <HAL_I2C_Master_Transmit>
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200000bc 	.word	0x200000bc

080010b4 <lcd_clear>:

void lcd_clear (void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80010ba:	2080      	movs	r0, #128	; 0x80
 80010bc:	f7ff ff9a 	bl	8000ff4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	e005      	b.n	80010d2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80010c6:	2020      	movs	r0, #32
 80010c8:	f7ff ffc4 	bl	8001054 <lcd_send_data>
	for (int i=0; i<70; i++)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3301      	adds	r3, #1
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b45      	cmp	r3, #69	; 0x45
 80010d6:	ddf6      	ble.n	80010c6 <lcd_clear+0x12>
	}
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
    switch (row)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <lcd_put_cur+0x18>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d005      	beq.n	8001104 <lcd_put_cur+0x22>
 80010f8:	e009      	b.n	800110e <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001100:	603b      	str	r3, [r7, #0]
            break;
 8001102:	e004      	b.n	800110e <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800110a:	603b      	str	r3, [r7, #0]
            break;
 800110c:	bf00      	nop
    }

    lcd_send_cmd (col);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff6e 	bl	8000ff4 <lcd_send_cmd>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <lcd_init>:


void lcd_init (void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001124:	2032      	movs	r0, #50	; 0x32
 8001126:	f000 fc09 	bl	800193c <HAL_Delay>
	lcd_send_cmd (0x30);
 800112a:	2030      	movs	r0, #48	; 0x30
 800112c:	f7ff ff62 	bl	8000ff4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001130:	2005      	movs	r0, #5
 8001132:	f000 fc03 	bl	800193c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001136:	2030      	movs	r0, #48	; 0x30
 8001138:	f7ff ff5c 	bl	8000ff4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800113c:	2001      	movs	r0, #1
 800113e:	f000 fbfd 	bl	800193c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001142:	2030      	movs	r0, #48	; 0x30
 8001144:	f7ff ff56 	bl	8000ff4 <lcd_send_cmd>
	HAL_Delay(10);
 8001148:	200a      	movs	r0, #10
 800114a:	f000 fbf7 	bl	800193c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800114e:	2020      	movs	r0, #32
 8001150:	f7ff ff50 	bl	8000ff4 <lcd_send_cmd>
	HAL_Delay(10);
 8001154:	200a      	movs	r0, #10
 8001156:	f000 fbf1 	bl	800193c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800115a:	2028      	movs	r0, #40	; 0x28
 800115c:	f7ff ff4a 	bl	8000ff4 <lcd_send_cmd>
	HAL_Delay(1);
 8001160:	2001      	movs	r0, #1
 8001162:	f000 fbeb 	bl	800193c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001166:	2008      	movs	r0, #8
 8001168:	f7ff ff44 	bl	8000ff4 <lcd_send_cmd>
	HAL_Delay(1);
 800116c:	2001      	movs	r0, #1
 800116e:	f000 fbe5 	bl	800193c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001172:	2001      	movs	r0, #1
 8001174:	f7ff ff3e 	bl	8000ff4 <lcd_send_cmd>
	HAL_Delay(1);
 8001178:	2001      	movs	r0, #1
 800117a:	f000 fbdf 	bl	800193c <HAL_Delay>
	HAL_Delay(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f000 fbdc 	bl	800193c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001184:	2006      	movs	r0, #6
 8001186:	f7ff ff35 	bl	8000ff4 <lcd_send_cmd>
	HAL_Delay(1);
 800118a:	2001      	movs	r0, #1
 800118c:	f000 fbd6 	bl	800193c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001190:	200c      	movs	r0, #12
 8001192:	f7ff ff2f 	bl	8000ff4 <lcd_send_cmd>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}

0800119a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80011a2:	e006      	b.n	80011b2 <lcd_send_string+0x18>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff51 	bl	8001054 <lcd_send_data>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f4      	bne.n	80011a4 <lcd_send_string+0xa>
}
 80011ba:	bf00      	nop
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	0000      	movs	r0, r0
	...

080011c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b08d      	sub	sp, #52	; 0x34
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ce:	f000 fb53 	bl	8001878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d2:	f000 f8ad 	bl	8001330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d6:	f000 f967 	bl	80014a8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80011da:	f000 f8f9 	bl	80013d0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80011de:	f000 f935 	bl	800144c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	  HAL_ADC_Start(&hadc1);           		 //ADC START
 80011e2:	4851      	ldr	r0, [pc, #324]	; (8001328 <main+0x160>)
 80011e4:	f000 fca6 	bl	8001b34 <HAL_ADC_Start>


	  float V1;                        		  //Definir variable
	  float A1;
	  int A2=0, A3=0, A4=0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
	  int N=4;
 80011f4:	2304      	movs	r3, #4
 80011f6:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //inicio ADC
	 	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	484a      	ldr	r0, [pc, #296]	; (8001328 <main+0x160>)
 80011fe:	f000 fd47 	bl	8001c90 <HAL_ADC_PollForConversion>
	 	  raw_data = HAL_ADC_GetValue(&hadc1);
 8001202:	4849      	ldr	r0, [pc, #292]	; (8001328 <main+0x160>)
 8001204:	f000 fe4a 	bl	8001e9c <HAL_ADC_GetValue>
 8001208:	4603      	mov	r3, r0
 800120a:	837b      	strh	r3, [r7, #26]
	 	  //fin adc

	 	  //valor voltaje sin filtrar
	 	 V1= (raw_data*3.3)/4011;
 800120c:	8b7b      	ldrh	r3, [r7, #26]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f8f0 	bl	80003f4 <__aeabi_i2d>
 8001214:	a340      	add	r3, pc, #256	; (adr r3, 8001318 <main+0x150>)
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	f7ff f955 	bl	80004c8 <__aeabi_dmul>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	a33e      	add	r3, pc, #248	; (adr r3, 8001320 <main+0x158>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff fa76 	bl	800071c <__aeabi_ddiv>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f7ff fc08 	bl	8000a4c <__aeabi_d2f>
 800123c:	4603      	mov	r3, r0
 800123e:	617b      	str	r3, [r7, #20]

	 	 //inicio Mean average filter
	 	 A4=A3;
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	623b      	str	r3, [r7, #32]
	 	 A3=A2;
 8001244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
	 	 A2=A1;
 8001248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800124a:	f7ff fead 	bl	8000fa8 <__aeabi_f2iz>
 800124e:	4603      	mov	r3, r0
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
	 	 A1=V1;
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
	 	 filtro= (A1+A2+A3+A4)/N;
 8001256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001258:	f7ff fd02 	bl	8000c60 <__aeabi_i2f>
 800125c:	4603      	mov	r3, r0
 800125e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fc49 	bl	8000af8 <__addsf3>
 8001266:	4603      	mov	r3, r0
 8001268:	461c      	mov	r4, r3
 800126a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800126c:	f7ff fcf8 	bl	8000c60 <__aeabi_i2f>
 8001270:	4603      	mov	r3, r0
 8001272:	4619      	mov	r1, r3
 8001274:	4620      	mov	r0, r4
 8001276:	f7ff fc3f 	bl	8000af8 <__addsf3>
 800127a:	4603      	mov	r3, r0
 800127c:	461c      	mov	r4, r3
 800127e:	6a38      	ldr	r0, [r7, #32]
 8001280:	f7ff fcee 	bl	8000c60 <__aeabi_i2f>
 8001284:	4603      	mov	r3, r0
 8001286:	4619      	mov	r1, r3
 8001288:	4620      	mov	r0, r4
 800128a:	f7ff fc35 	bl	8000af8 <__addsf3>
 800128e:	4603      	mov	r3, r0
 8001290:	461c      	mov	r4, r3
 8001292:	69f8      	ldr	r0, [r7, #28]
 8001294:	f7ff fce4 	bl	8000c60 <__aeabi_i2f>
 8001298:	4603      	mov	r3, r0
 800129a:	4619      	mov	r1, r3
 800129c:	4620      	mov	r0, r4
 800129e:	f7ff fde7 	bl	8000e70 <__aeabi_fdiv>
 80012a2:	4603      	mov	r3, r0
 80012a4:	613b      	str	r3, [r7, #16]

	 	 //fin filtro
	 	  //Envio de informacion a LCD


	 	  lcd_clear();  							//Limpiar la pantalla
 80012a6:	f7ff ff05 	bl	80010b4 <lcd_clear>
	 	  	  HAL_Delay(1500);
 80012aa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80012ae:	f000 fb45 	bl	800193c <HAL_Delay>
	 	  	  lcd_init ();							//INITIALIZE THE LCD (** if the LCD is cleared, you need to initialize it again ***)
 80012b2:	f7ff ff35 	bl	8001120 <lcd_init>

	 	  	  lcd_put_cur(0,0);
 80012b6:	2100      	movs	r1, #0
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff ff12 	bl	80010e2 <lcd_put_cur>
	 	  	  HAL_Delay(10);
 80012be:	200a      	movs	r0, #10
 80012c0:	f000 fb3c 	bl	800193c <HAL_Delay>

	 	  	  lcd_send_string ("Volts [V]"); 		//se presenta en la pantalla LCD la palabra voltaje
 80012c4:	4819      	ldr	r0, [pc, #100]	; (800132c <main+0x164>)
 80012c6:	f7ff ff68 	bl	800119a <lcd_send_string>

	 	//Parte no filtrada LCD

	 	  	gcvt(V1, 4, volt); 						//v1:voltaje adquirido, 4:largo, volt:transformacion a palabra
 80012ca:	6978      	ldr	r0, [r7, #20]
 80012cc:	f7ff f8a4 	bl	8000418 <__aeabi_f2d>
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	2204      	movs	r2, #4
 80012d6:	f002 fbc3 	bl	8003a60 <gcvt>
	 	  	lcd_put_cur(1,2);
 80012da:	2102      	movs	r1, #2
 80012dc:	2001      	movs	r0, #1
 80012de:	f7ff ff00 	bl	80010e2 <lcd_put_cur>
	 	  	lcd_send_string (volt);
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff57 	bl	800119a <lcd_send_string>


	 	//Parte filtrada LCD

	 	  	gcvt(filtro, 4, volt2); 					//v1:voltaje adquirido, 4:largo, volt2:transformacion a palabra
 80012ec:	6938      	ldr	r0, [r7, #16]
 80012ee:	f7ff f893 	bl	8000418 <__aeabi_f2d>
 80012f2:	463b      	mov	r3, r7
 80012f4:	2204      	movs	r2, #4
 80012f6:	f002 fbb3 	bl	8003a60 <gcvt>
	 		lcd_put_cur(1,11);
 80012fa:	210b      	movs	r1, #11
 80012fc:	2001      	movs	r0, #1
 80012fe:	f7ff fef0 	bl	80010e2 <lcd_put_cur>
	 		lcd_send_string (volt2);
 8001302:	463b      	mov	r3, r7
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff48 	bl	800119a <lcd_send_string>
	 		HAL_Delay(1000);
 800130a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800130e:	f000 fb15 	bl	800193c <HAL_Delay>
  {
 8001312:	e771      	b.n	80011f8 <main+0x30>
 8001314:	f3af 8000 	nop.w
 8001318:	66666666 	.word	0x66666666
 800131c:	400a6666 	.word	0x400a6666
 8001320:	00000000 	.word	0x00000000
 8001324:	40af5600 	.word	0x40af5600
 8001328:	2000008c 	.word	0x2000008c
 800132c:	08006220 	.word	0x08006220

08001330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b094      	sub	sp, #80	; 0x50
 8001334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133a:	2228      	movs	r2, #40	; 0x28
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f002 fbdc 	bl	8003afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001360:	2302      	movs	r3, #2
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001364:	2301      	movs	r3, #1
 8001366:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001368:	2310      	movs	r3, #16
 800136a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800136c:	2300      	movs	r3, #0
 800136e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001370:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001374:	4618      	mov	r0, r3
 8001376:	f001 fde3 	bl	8002f40 <HAL_RCC_OscConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001380:	f000 f8b4 	bl	80014ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001384:	230f      	movs	r3, #15
 8001386:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f002 f850 	bl	8003444 <HAL_RCC_ClockConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80013aa:	f000 f89f 	bl	80014ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013ae:	2302      	movs	r3, #2
 80013b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 f9db 	bl	8003774 <HAL_RCCEx_PeriphCLKConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013c4:	f000 f892 	bl	80014ec <Error_Handler>
  }
}
 80013c8:	bf00      	nop
 80013ca:	3750      	adds	r7, #80	; 0x50
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_ADC1_Init+0x74>)
 80013e2:	4a19      	ldr	r2, [pc, #100]	; (8001448 <MX_ADC1_Init+0x78>)
 80013e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_ADC1_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013ec:	4b15      	ldr	r3, [pc, #84]	; (8001444 <MX_ADC1_Init+0x74>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_ADC1_Init+0x74>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MX_ADC1_Init+0x74>)
 80013fa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001400:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_ADC1_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_ADC1_Init+0x74>)
 8001408:	2201      	movs	r2, #1
 800140a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <MX_ADC1_Init+0x74>)
 800140e:	f000 fab9 	bl	8001984 <HAL_ADC_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001418:	f000 f868 	bl	80014ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800141c:	2302      	movs	r3, #2
 800141e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001420:	2301      	movs	r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_ADC1_Init+0x74>)
 800142e:	f000 fd41 	bl	8001eb4 <HAL_ADC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001438:	f000 f858 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	2000008c 	.word	0x2000008c
 8001448:	40012400 	.word	0x40012400

0800144c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <MX_I2C1_Init+0x50>)
 8001452:	4a13      	ldr	r2, [pc, #76]	; (80014a0 <MX_I2C1_Init+0x54>)
 8001454:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 150000;
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <MX_I2C1_Init+0x50>)
 8001458:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <MX_I2C1_Init+0x58>)
 800145a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <MX_I2C1_Init+0x50>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <MX_I2C1_Init+0x50>)
 8001464:	2200      	movs	r2, #0
 8001466:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <MX_I2C1_Init+0x50>)
 800146a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800146e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <MX_I2C1_Init+0x50>)
 8001472:	2200      	movs	r2, #0
 8001474:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <MX_I2C1_Init+0x50>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <MX_I2C1_Init+0x50>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <MX_I2C1_Init+0x50>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001488:	4804      	ldr	r0, [pc, #16]	; (800149c <MX_I2C1_Init+0x50>)
 800148a:	f001 f90f 	bl	80026ac <HAL_I2C_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001494:	f000 f82a 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200000bc 	.word	0x200000bc
 80014a0:	40005400 	.word	0x40005400
 80014a4:	000249f0 	.word	0x000249f0

080014a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_GPIO_Init+0x40>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <MX_GPIO_Init+0x40>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	6193      	str	r3, [r2, #24]
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_GPIO_Init+0x40>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_GPIO_Init+0x40>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <MX_GPIO_Init+0x40>)
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	6193      	str	r3, [r2, #24]
 80014d2:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <MX_GPIO_Init+0x40>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]

}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	40021000 	.word	0x40021000

080014ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f0:	b672      	cpsid	i
}
 80014f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <Error_Handler+0x8>
	...

080014f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_MspInit+0x5c>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	4a14      	ldr	r2, [pc, #80]	; (8001554 <HAL_MspInit+0x5c>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6193      	str	r3, [r2, #24]
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_MspInit+0x5c>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_MspInit+0x5c>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_MspInit+0x5c>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	61d3      	str	r3, [r2, #28]
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_MspInit+0x5c>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_MspInit+0x60>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_MspInit+0x60>)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	40021000 	.word	0x40021000
 8001558:	40010000 	.word	0x40010000

0800155c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <HAL_ADC_MspInit+0x6c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d121      	bne.n	80015c0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <HAL_ADC_MspInit+0x70>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	4a12      	ldr	r2, [pc, #72]	; (80015cc <HAL_ADC_MspInit+0x70>)
 8001582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001586:	6193      	str	r3, [r2, #24]
 8001588:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_ADC_MspInit+0x70>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <HAL_ADC_MspInit+0x70>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	4a0c      	ldr	r2, [pc, #48]	; (80015cc <HAL_ADC_MspInit+0x70>)
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	6193      	str	r3, [r2, #24]
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_ADC_MspInit+0x70>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015ac:	2304      	movs	r3, #4
 80015ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b0:	2303      	movs	r3, #3
 80015b2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	4619      	mov	r1, r3
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <HAL_ADC_MspInit+0x74>)
 80015bc:	f000 fef2 	bl	80023a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015c0:	bf00      	nop
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40012400 	.word	0x40012400
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40010800 	.word	0x40010800

080015d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a15      	ldr	r2, [pc, #84]	; (8001644 <HAL_I2C_MspInit+0x70>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d123      	bne.n	800163c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <HAL_I2C_MspInit+0x74>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a13      	ldr	r2, [pc, #76]	; (8001648 <HAL_I2C_MspInit+0x74>)
 80015fa:	f043 0308 	orr.w	r3, r3, #8
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_I2C_MspInit+0x74>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800160c:	23c0      	movs	r3, #192	; 0xc0
 800160e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001610:	2312      	movs	r3, #18
 8001612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	4619      	mov	r1, r3
 800161e:	480b      	ldr	r0, [pc, #44]	; (800164c <HAL_I2C_MspInit+0x78>)
 8001620:	f000 fec0 	bl	80023a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_I2C_MspInit+0x74>)
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	4a07      	ldr	r2, [pc, #28]	; (8001648 <HAL_I2C_MspInit+0x74>)
 800162a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800162e:	61d3      	str	r3, [r2, #28]
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_I2C_MspInit+0x74>)
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40005400 	.word	0x40005400
 8001648:	40021000 	.word	0x40021000
 800164c:	40010c00 	.word	0x40010c00

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <NMI_Handler+0x4>

08001656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <MemManage_Handler+0x4>

08001662 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <BusFault_Handler+0x4>

08001668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <UsageFault_Handler+0x4>

0800166e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr

08001692 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001696:	f000 f935 	bl	8001904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}

0800169e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
	return 1;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <_kill>:

int _kill(int pid, int sig)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016b6:	f002 f9f7 	bl	8003aa8 <__errno>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2216      	movs	r2, #22
 80016be:	601a      	str	r2, [r3, #0]
	return -1;
 80016c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <_exit>:

void _exit (int status)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ffe7 	bl	80016ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80016de:	e7fe      	b.n	80016de <_exit+0x12>

080016e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	e00a      	b.n	8001708 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016f2:	f3af 8000 	nop.w
 80016f6:	4601      	mov	r1, r0
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	60ba      	str	r2, [r7, #8]
 80016fe:	b2ca      	uxtb	r2, r1
 8001700:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3301      	adds	r3, #1
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	429a      	cmp	r2, r3
 800170e:	dbf0      	blt.n	80016f2 <_read+0x12>
	}

return len;
 8001710:	687b      	ldr	r3, [r7, #4]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	e009      	b.n	8001740 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	60ba      	str	r2, [r7, #8]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	3301      	adds	r3, #1
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	429a      	cmp	r2, r3
 8001746:	dbf1      	blt.n	800172c <_write+0x12>
	}
	return len;
 8001748:	687b      	ldr	r3, [r7, #4]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <_close>:

int _close(int file)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
	return -1;
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001778:	605a      	str	r2, [r3, #4]
	return 0;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <_isatty>:

int _isatty(int file)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
	return 1;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800179a:	b480      	push	{r7}
 800179c:	b085      	sub	sp, #20
 800179e:	af00      	add	r7, sp, #0
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
	return 0;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
	...

080017b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017bc:	4a14      	ldr	r2, [pc, #80]	; (8001810 <_sbrk+0x5c>)
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <_sbrk+0x60>)
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c8:	4b13      	ldr	r3, [pc, #76]	; (8001818 <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d102      	bne.n	80017d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <_sbrk+0x64>)
 80017d2:	4a12      	ldr	r2, [pc, #72]	; (800181c <_sbrk+0x68>)
 80017d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <_sbrk+0x64>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d207      	bcs.n	80017f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e4:	f002 f960 	bl	8003aa8 <__errno>
 80017e8:	4603      	mov	r3, r0
 80017ea:	220c      	movs	r2, #12
 80017ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
 80017f2:	e009      	b.n	8001808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fa:	4b07      	ldr	r3, [pc, #28]	; (8001818 <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	4a05      	ldr	r2, [pc, #20]	; (8001818 <_sbrk+0x64>)
 8001804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001806:	68fb      	ldr	r3, [r7, #12]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20005000 	.word	0x20005000
 8001814:	00000400 	.word	0x00000400
 8001818:	20000110 	.word	0x20000110
 800181c:	20000128 	.word	0x20000128

08001820 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800182e:	490d      	ldr	r1, [pc, #52]	; (8001864 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001834:	e002      	b.n	800183c <LoopCopyDataInit>

08001836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183a:	3304      	adds	r3, #4

0800183c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800183c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001840:	d3f9      	bcc.n	8001836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001844:	4c0a      	ldr	r4, [pc, #40]	; (8001870 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001848:	e001      	b.n	800184e <LoopFillZerobss>

0800184a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800184c:	3204      	adds	r2, #4

0800184e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001850:	d3fb      	bcc.n	800184a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001852:	f7ff ffe5 	bl	8001820 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001856:	f002 f92d 	bl	8003ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800185a:	f7ff fcb5 	bl	80011c8 <main>
  bx lr
 800185e:	4770      	bx	lr
  ldr r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001864:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001868:	08006530 	.word	0x08006530
  ldr r2, =_sbss
 800186c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001870:	20000128 	.word	0x20000128

08001874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC1_2_IRQHandler>
	...

08001878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <HAL_Init+0x28>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <HAL_Init+0x28>)
 8001882:	f043 0310 	orr.w	r3, r3, #16
 8001886:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001888:	2003      	movs	r0, #3
 800188a:	f000 fd57 	bl	800233c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188e:	200f      	movs	r0, #15
 8001890:	f000 f808 	bl	80018a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001894:	f7ff fe30 	bl	80014f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40022000 	.word	0x40022000

080018a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_InitTick+0x54>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_InitTick+0x58>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
 80018b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80018be:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fd61 	bl	800238a <HAL_SYSTICK_Config>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00e      	b.n	80018f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b0f      	cmp	r3, #15
 80018d6:	d80a      	bhi.n	80018ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d8:	2200      	movs	r2, #0
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f000 fd37 	bl	8002352 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e4:	4a06      	ldr	r2, [pc, #24]	; (8001900 <HAL_InitTick+0x5c>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e000      	b.n	80018f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000008 	.word	0x20000008
 8001900:	20000004 	.word	0x20000004

08001904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_IncTick+0x1c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_IncTick+0x20>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4413      	add	r3, r2
 8001914:	4a03      	ldr	r2, [pc, #12]	; (8001924 <HAL_IncTick+0x20>)
 8001916:	6013      	str	r3, [r2, #0]
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	20000008 	.word	0x20000008
 8001924:	20000114 	.word	0x20000114

08001928 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTick;
 800192c:	4b02      	ldr	r3, [pc, #8]	; (8001938 <HAL_GetTick+0x10>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	20000114 	.word	0x20000114

0800193c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001944:	f7ff fff0 	bl	8001928 <HAL_GetTick>
 8001948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001954:	d005      	beq.n	8001962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001956:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <HAL_Delay+0x44>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4413      	add	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001962:	bf00      	nop
 8001964:	f7ff ffe0 	bl	8001928 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	429a      	cmp	r2, r3
 8001972:	d8f7      	bhi.n	8001964 <HAL_Delay+0x28>
  {
  }
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000008 	.word	0x20000008

08001984 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e0be      	b.n	8001b24 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d109      	bne.n	80019c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff fdca 	bl	800155c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 fbc5 	bl	8002158 <ADC_ConversionStop_Disable>
 80019ce:	4603      	mov	r3, r0
 80019d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d6:	f003 0310 	and.w	r3, r3, #16
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f040 8099 	bne.w	8001b12 <HAL_ADC_Init+0x18e>
 80019e0:	7dfb      	ldrb	r3, [r7, #23]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f040 8095 	bne.w	8001b12 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019f0:	f023 0302 	bic.w	r3, r3, #2
 80019f4:	f043 0202 	orr.w	r2, r3, #2
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a04:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7b1b      	ldrb	r3, [r3, #12]
 8001a0a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a0c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a1c:	d003      	beq.n	8001a26 <HAL_ADC_Init+0xa2>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d102      	bne.n	8001a2c <HAL_ADC_Init+0xa8>
 8001a26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a2a:	e000      	b.n	8001a2e <HAL_ADC_Init+0xaa>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7d1b      	ldrb	r3, [r3, #20]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d119      	bne.n	8001a70 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7b1b      	ldrb	r3, [r3, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d109      	bne.n	8001a58 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	035a      	lsls	r2, r3, #13
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	e00b      	b.n	8001a70 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5c:	f043 0220 	orr.w	r2, r3, #32
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	f043 0201 	orr.w	r2, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <HAL_ADC_Init+0x1a8>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6812      	ldr	r2, [r2, #0]
 8001a92:	68b9      	ldr	r1, [r7, #8]
 8001a94:	430b      	orrs	r3, r1
 8001a96:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aa0:	d003      	beq.n	8001aaa <HAL_ADC_Init+0x126>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d104      	bne.n	8001ab4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	051b      	lsls	r3, r3, #20
 8001ab2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_ADC_Init+0x1ac>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d10b      	bne.n	8001af0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae2:	f023 0303 	bic.w	r3, r3, #3
 8001ae6:	f043 0201 	orr.w	r2, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001aee:	e018      	b.n	8001b22 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	f023 0312 	bic.w	r3, r3, #18
 8001af8:	f043 0210 	orr.w	r2, r3, #16
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	f043 0201 	orr.w	r2, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b10:	e007      	b.n	8001b22 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	f043 0210 	orr.w	r2, r3, #16
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	ffe1f7fd 	.word	0xffe1f7fd
 8001b30:	ff1f0efe 	.word	0xff1f0efe

08001b34 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_Start+0x1a>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e098      	b.n	8001c80 <HAL_ADC_Start+0x14c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 faa4 	bl	80020a4 <ADC_Enable>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f040 8087 	bne.w	8001c76 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b70:	f023 0301 	bic.w	r3, r3, #1
 8001b74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a41      	ldr	r2, [pc, #260]	; (8001c88 <HAL_ADC_Start+0x154>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d105      	bne.n	8001b92 <HAL_ADC_Start+0x5e>
 8001b86:	4b41      	ldr	r3, [pc, #260]	; (8001c8c <HAL_ADC_Start+0x158>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d115      	bne.n	8001bbe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d026      	beq.n	8001bfa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bb4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bbc:	e01d      	b.n	8001bfa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a2f      	ldr	r2, [pc, #188]	; (8001c8c <HAL_ADC_Start+0x158>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d004      	beq.n	8001bde <HAL_ADC_Start+0xaa>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a2b      	ldr	r2, [pc, #172]	; (8001c88 <HAL_ADC_Start+0x154>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d10d      	bne.n	8001bfa <HAL_ADC_Start+0xc6>
 8001bde:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_ADC_Start+0x158>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d007      	beq.n	8001bfa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bf2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d006      	beq.n	8001c14 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	f023 0206 	bic.w	r2, r3, #6
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c12:	e002      	b.n	8001c1a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f06f 0202 	mvn.w	r2, #2
 8001c2a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c36:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c3a:	d113      	bne.n	8001c64 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c40:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <HAL_ADC_Start+0x154>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d105      	bne.n	8001c52 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_ADC_Start+0x158>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d108      	bne.n	8001c64 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	e00c      	b.n	8001c7e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	e003      	b.n	8001c7e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40012800 	.word	0x40012800
 8001c8c:	40012400 	.word	0x40012400

08001c90 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ca6:	f7ff fe3f 	bl	8001928 <HAL_GetTick>
 8001caa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbe:	f043 0220 	orr.w	r2, r3, #32
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e0d3      	b.n	8001e7a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d131      	bne.n	8001d44 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d12a      	bne.n	8001d44 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001cee:	e021      	b.n	8001d34 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf6:	d01d      	beq.n	8001d34 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <HAL_ADC_PollForConversion+0x7e>
 8001cfe:	f7ff fe13 	bl	8001928 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d212      	bcs.n	8001d34 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10b      	bne.n	8001d34 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	f043 0204 	orr.w	r2, r3, #4
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e0a2      	b.n	8001e7a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0d6      	beq.n	8001cf0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001d42:	e070      	b.n	8001e26 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001d44:	4b4f      	ldr	r3, [pc, #316]	; (8001e84 <HAL_ADC_PollForConversion+0x1f4>)
 8001d46:	681c      	ldr	r4, [r3, #0]
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f001 fdc9 	bl	80038e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6919      	ldr	r1, [r3, #16]
 8001d5a:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <HAL_ADC_PollForConversion+0x1f8>)
 8001d5c:	400b      	ands	r3, r1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d118      	bne.n	8001d94 <HAL_ADC_PollForConversion+0x104>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68d9      	ldr	r1, [r3, #12]
 8001d68:	4b48      	ldr	r3, [pc, #288]	; (8001e8c <HAL_ADC_PollForConversion+0x1fc>)
 8001d6a:	400b      	ands	r3, r1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d111      	bne.n	8001d94 <HAL_ADC_PollForConversion+0x104>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6919      	ldr	r1, [r3, #16]
 8001d76:	4b46      	ldr	r3, [pc, #280]	; (8001e90 <HAL_ADC_PollForConversion+0x200>)
 8001d78:	400b      	ands	r3, r1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d108      	bne.n	8001d90 <HAL_ADC_PollForConversion+0x100>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68d9      	ldr	r1, [r3, #12]
 8001d84:	4b43      	ldr	r3, [pc, #268]	; (8001e94 <HAL_ADC_PollForConversion+0x204>)
 8001d86:	400b      	ands	r3, r1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_ADC_PollForConversion+0x100>
 8001d8c:	2314      	movs	r3, #20
 8001d8e:	e020      	b.n	8001dd2 <HAL_ADC_PollForConversion+0x142>
 8001d90:	2329      	movs	r3, #41	; 0x29
 8001d92:	e01e      	b.n	8001dd2 <HAL_ADC_PollForConversion+0x142>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6919      	ldr	r1, [r3, #16]
 8001d9a:	4b3d      	ldr	r3, [pc, #244]	; (8001e90 <HAL_ADC_PollForConversion+0x200>)
 8001d9c:	400b      	ands	r3, r1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <HAL_ADC_PollForConversion+0x120>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68d9      	ldr	r1, [r3, #12]
 8001da8:	4b3a      	ldr	r3, [pc, #232]	; (8001e94 <HAL_ADC_PollForConversion+0x204>)
 8001daa:	400b      	ands	r3, r1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00d      	beq.n	8001dcc <HAL_ADC_PollForConversion+0x13c>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6919      	ldr	r1, [r3, #16]
 8001db6:	4b38      	ldr	r3, [pc, #224]	; (8001e98 <HAL_ADC_PollForConversion+0x208>)
 8001db8:	400b      	ands	r3, r1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d108      	bne.n	8001dd0 <HAL_ADC_PollForConversion+0x140>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68d9      	ldr	r1, [r3, #12]
 8001dc4:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <HAL_ADC_PollForConversion+0x208>)
 8001dc6:	400b      	ands	r3, r1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_ADC_PollForConversion+0x140>
 8001dcc:	2354      	movs	r3, #84	; 0x54
 8001dce:	e000      	b.n	8001dd2 <HAL_ADC_PollForConversion+0x142>
 8001dd0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001dd2:	fb02 f303 	mul.w	r3, r2, r3
 8001dd6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001dd8:	e021      	b.n	8001e1e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de0:	d01a      	beq.n	8001e18 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d007      	beq.n	8001df8 <HAL_ADC_PollForConversion+0x168>
 8001de8:	f7ff fd9e 	bl	8001928 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d20f      	bcs.n	8001e18 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d90b      	bls.n	8001e18 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	f043 0204 	orr.w	r2, r3, #4
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e030      	b.n	8001e7a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d8d9      	bhi.n	8001dda <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f06f 0212 	mvn.w	r2, #18
 8001e2e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e46:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e4a:	d115      	bne.n	8001e78 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d111      	bne.n	8001e78 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d105      	bne.n	8001e78 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	f043 0201 	orr.w	r2, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd90      	pop	{r4, r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000000 	.word	0x20000000
 8001e88:	24924924 	.word	0x24924924
 8001e8c:	00924924 	.word	0x00924924
 8001e90:	12492492 	.word	0x12492492
 8001e94:	00492492 	.word	0x00492492
 8001e98:	00249249 	.word	0x00249249

08001e9c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d101      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x20>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e0dc      	b.n	800208e <HAL_ADC_ConfigChannel+0x1da>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b06      	cmp	r3, #6
 8001ee2:	d81c      	bhi.n	8001f1e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3b05      	subs	r3, #5
 8001ef6:	221f      	movs	r2, #31
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	4019      	ands	r1, r3
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3b05      	subs	r3, #5
 8001f10:	fa00 f203 	lsl.w	r2, r0, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	635a      	str	r2, [r3, #52]	; 0x34
 8001f1c:	e03c      	b.n	8001f98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b0c      	cmp	r3, #12
 8001f24:	d81c      	bhi.n	8001f60 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	3b23      	subs	r3, #35	; 0x23
 8001f38:	221f      	movs	r2, #31
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	4019      	ands	r1, r3
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b23      	subs	r3, #35	; 0x23
 8001f52:	fa00 f203 	lsl.w	r2, r0, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f5e:	e01b      	b.n	8001f98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	3b41      	subs	r3, #65	; 0x41
 8001f72:	221f      	movs	r2, #31
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	4019      	ands	r1, r3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	3b41      	subs	r3, #65	; 0x41
 8001f8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b09      	cmp	r3, #9
 8001f9e:	d91c      	bls.n	8001fda <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68d9      	ldr	r1, [r3, #12]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	4613      	mov	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	3b1e      	subs	r3, #30
 8001fb2:	2207      	movs	r2, #7
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	4019      	ands	r1, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	6898      	ldr	r0, [r3, #8]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	3b1e      	subs	r3, #30
 8001fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	60da      	str	r2, [r3, #12]
 8001fd8:	e019      	b.n	800200e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6919      	ldr	r1, [r3, #16]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	2207      	movs	r2, #7
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	4019      	ands	r1, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6898      	ldr	r0, [r3, #8]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4413      	add	r3, r2
 8002002:	fa00 f203 	lsl.w	r2, r0, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b10      	cmp	r3, #16
 8002014:	d003      	beq.n	800201e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800201a:	2b11      	cmp	r3, #17
 800201c:	d132      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a1d      	ldr	r2, [pc, #116]	; (8002098 <HAL_ADC_ConfigChannel+0x1e4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d125      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d126      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002044:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b10      	cmp	r3, #16
 800204c:	d11a      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800204e:	4b13      	ldr	r3, [pc, #76]	; (800209c <HAL_ADC_ConfigChannel+0x1e8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a13      	ldr	r2, [pc, #76]	; (80020a0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	0c9a      	lsrs	r2, r3, #18
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002064:	e002      	b.n	800206c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	3b01      	subs	r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f9      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x1b2>
 8002072:	e007      	b.n	8002084 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	f043 0220 	orr.w	r2, r3, #32
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	40012400 	.word	0x40012400
 800209c:	20000000 	.word	0x20000000
 80020a0:	431bde83 	.word	0x431bde83

080020a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d040      	beq.n	8002144 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 0201 	orr.w	r2, r2, #1
 80020d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020d2:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <ADC_Enable+0xac>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a1f      	ldr	r2, [pc, #124]	; (8002154 <ADC_Enable+0xb0>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	0c9b      	lsrs	r3, r3, #18
 80020de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020e0:	e002      	b.n	80020e8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f9      	bne.n	80020e2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020ee:	f7ff fc1b 	bl	8001928 <HAL_GetTick>
 80020f2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020f4:	e01f      	b.n	8002136 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020f6:	f7ff fc17 	bl	8001928 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d918      	bls.n	8002136 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b01      	cmp	r3, #1
 8002110:	d011      	beq.n	8002136 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	f043 0210 	orr.w	r2, r3, #16
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	f043 0201 	orr.w	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e007      	b.n	8002146 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b01      	cmp	r3, #1
 8002142:	d1d8      	bne.n	80020f6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000000 	.word	0x20000000
 8002154:	431bde83 	.word	0x431bde83

08002158 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b01      	cmp	r3, #1
 8002170:	d12e      	bne.n	80021d0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0201 	bic.w	r2, r2, #1
 8002180:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002182:	f7ff fbd1 	bl	8001928 <HAL_GetTick>
 8002186:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002188:	e01b      	b.n	80021c2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800218a:	f7ff fbcd 	bl	8001928 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d914      	bls.n	80021c2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d10d      	bne.n	80021c2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021aa:	f043 0210 	orr.w	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	f043 0201 	orr.w	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e007      	b.n	80021d2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d0dc      	beq.n	800218a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <__NVIC_SetPriorityGrouping+0x44>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021f8:	4013      	ands	r3, r2
 80021fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800220c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220e:	4a04      	ldr	r2, [pc, #16]	; (8002220 <__NVIC_SetPriorityGrouping+0x44>)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	60d3      	str	r3, [r2, #12]
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002228:	4b04      	ldr	r3, [pc, #16]	; (800223c <__NVIC_GetPriorityGrouping+0x18>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	f003 0307 	and.w	r3, r3, #7
}
 8002232:	4618      	mov	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0a      	blt.n	800226a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	490c      	ldr	r1, [pc, #48]	; (800228c <__NVIC_SetPriority+0x4c>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440b      	add	r3, r1
 8002264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002268:	e00a      	b.n	8002280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4908      	ldr	r1, [pc, #32]	; (8002290 <__NVIC_SetPriority+0x50>)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3b04      	subs	r3, #4
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	440b      	add	r3, r1
 800227e:	761a      	strb	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 0307 	rsb	r3, r3, #7
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf28      	it	cs
 80022b2:	2304      	movcs	r3, #4
 80022b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d902      	bls.n	80022c4 <NVIC_EncodePriority+0x30>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b03      	subs	r3, #3
 80022c2:	e000      	b.n	80022c6 <NVIC_EncodePriority+0x32>
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	4313      	orrs	r3, r2
         );
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	; 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3b01      	subs	r3, #1
 8002304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002308:	d301      	bcc.n	800230e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230a:	2301      	movs	r3, #1
 800230c:	e00f      	b.n	800232e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800230e:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <SysTick_Config+0x40>)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002316:	210f      	movs	r1, #15
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	f7ff ff90 	bl	8002240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <SysTick_Config+0x40>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002326:	4b04      	ldr	r3, [pc, #16]	; (8002338 <SysTick_Config+0x40>)
 8002328:	2207      	movs	r2, #7
 800232a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	e000e010 	.word	0xe000e010

0800233c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff ff49 	bl	80021dc <__NVIC_SetPriorityGrouping>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af00      	add	r7, sp, #0
 8002358:	4603      	mov	r3, r0
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002364:	f7ff ff5e 	bl	8002224 <__NVIC_GetPriorityGrouping>
 8002368:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	6978      	ldr	r0, [r7, #20]
 8002370:	f7ff ff90 	bl	8002294 <NVIC_EncodePriority>
 8002374:	4602      	mov	r2, r0
 8002376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff5f 	bl	8002240 <__NVIC_SetPriority>
}
 8002382:	bf00      	nop
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff ffb0 	bl	80022f8 <SysTick_Config>
 8002398:	4603      	mov	r3, r0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b08b      	sub	sp, #44	; 0x2c
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023b2:	2300      	movs	r3, #0
 80023b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b6:	e169      	b.n	800268c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023b8:	2201      	movs	r2, #1
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	f040 8158 	bne.w	8002686 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4a9a      	ldr	r2, [pc, #616]	; (8002644 <HAL_GPIO_Init+0x2a0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d05e      	beq.n	800249e <HAL_GPIO_Init+0xfa>
 80023e0:	4a98      	ldr	r2, [pc, #608]	; (8002644 <HAL_GPIO_Init+0x2a0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d875      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 80023e6:	4a98      	ldr	r2, [pc, #608]	; (8002648 <HAL_GPIO_Init+0x2a4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d058      	beq.n	800249e <HAL_GPIO_Init+0xfa>
 80023ec:	4a96      	ldr	r2, [pc, #600]	; (8002648 <HAL_GPIO_Init+0x2a4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d86f      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 80023f2:	4a96      	ldr	r2, [pc, #600]	; (800264c <HAL_GPIO_Init+0x2a8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d052      	beq.n	800249e <HAL_GPIO_Init+0xfa>
 80023f8:	4a94      	ldr	r2, [pc, #592]	; (800264c <HAL_GPIO_Init+0x2a8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d869      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 80023fe:	4a94      	ldr	r2, [pc, #592]	; (8002650 <HAL_GPIO_Init+0x2ac>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d04c      	beq.n	800249e <HAL_GPIO_Init+0xfa>
 8002404:	4a92      	ldr	r2, [pc, #584]	; (8002650 <HAL_GPIO_Init+0x2ac>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d863      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 800240a:	4a92      	ldr	r2, [pc, #584]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d046      	beq.n	800249e <HAL_GPIO_Init+0xfa>
 8002410:	4a90      	ldr	r2, [pc, #576]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d85d      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 8002416:	2b12      	cmp	r3, #18
 8002418:	d82a      	bhi.n	8002470 <HAL_GPIO_Init+0xcc>
 800241a:	2b12      	cmp	r3, #18
 800241c:	d859      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 800241e:	a201      	add	r2, pc, #4	; (adr r2, 8002424 <HAL_GPIO_Init+0x80>)
 8002420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002424:	0800249f 	.word	0x0800249f
 8002428:	08002479 	.word	0x08002479
 800242c:	0800248b 	.word	0x0800248b
 8002430:	080024cd 	.word	0x080024cd
 8002434:	080024d3 	.word	0x080024d3
 8002438:	080024d3 	.word	0x080024d3
 800243c:	080024d3 	.word	0x080024d3
 8002440:	080024d3 	.word	0x080024d3
 8002444:	080024d3 	.word	0x080024d3
 8002448:	080024d3 	.word	0x080024d3
 800244c:	080024d3 	.word	0x080024d3
 8002450:	080024d3 	.word	0x080024d3
 8002454:	080024d3 	.word	0x080024d3
 8002458:	080024d3 	.word	0x080024d3
 800245c:	080024d3 	.word	0x080024d3
 8002460:	080024d3 	.word	0x080024d3
 8002464:	080024d3 	.word	0x080024d3
 8002468:	08002481 	.word	0x08002481
 800246c:	08002495 	.word	0x08002495
 8002470:	4a79      	ldr	r2, [pc, #484]	; (8002658 <HAL_GPIO_Init+0x2b4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d013      	beq.n	800249e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002476:	e02c      	b.n	80024d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	623b      	str	r3, [r7, #32]
          break;
 800247e:	e029      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	3304      	adds	r3, #4
 8002486:	623b      	str	r3, [r7, #32]
          break;
 8002488:	e024      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	3308      	adds	r3, #8
 8002490:	623b      	str	r3, [r7, #32]
          break;
 8002492:	e01f      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	330c      	adds	r3, #12
 800249a:	623b      	str	r3, [r7, #32]
          break;
 800249c:	e01a      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d102      	bne.n	80024ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024a6:	2304      	movs	r3, #4
 80024a8:	623b      	str	r3, [r7, #32]
          break;
 80024aa:	e013      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d105      	bne.n	80024c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b4:	2308      	movs	r3, #8
 80024b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	611a      	str	r2, [r3, #16]
          break;
 80024be:	e009      	b.n	80024d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024c0:	2308      	movs	r3, #8
 80024c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	615a      	str	r2, [r3, #20]
          break;
 80024ca:	e003      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024cc:	2300      	movs	r3, #0
 80024ce:	623b      	str	r3, [r7, #32]
          break;
 80024d0:	e000      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          break;
 80024d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2bff      	cmp	r3, #255	; 0xff
 80024d8:	d801      	bhi.n	80024de <HAL_GPIO_Init+0x13a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	e001      	b.n	80024e2 <HAL_GPIO_Init+0x13e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3304      	adds	r3, #4
 80024e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2bff      	cmp	r3, #255	; 0xff
 80024e8:	d802      	bhi.n	80024f0 <HAL_GPIO_Init+0x14c>
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	e002      	b.n	80024f6 <HAL_GPIO_Init+0x152>
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	3b08      	subs	r3, #8
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	210f      	movs	r1, #15
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	401a      	ands	r2, r3
 8002508:	6a39      	ldr	r1, [r7, #32]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	fa01 f303 	lsl.w	r3, r1, r3
 8002510:	431a      	orrs	r2, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 80b1 	beq.w	8002686 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002524:	4b4d      	ldr	r3, [pc, #308]	; (800265c <HAL_GPIO_Init+0x2b8>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	4a4c      	ldr	r2, [pc, #304]	; (800265c <HAL_GPIO_Init+0x2b8>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6193      	str	r3, [r2, #24]
 8002530:	4b4a      	ldr	r3, [pc, #296]	; (800265c <HAL_GPIO_Init+0x2b8>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800253c:	4a48      	ldr	r2, [pc, #288]	; (8002660 <HAL_GPIO_Init+0x2bc>)
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	3302      	adds	r3, #2
 8002544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002548:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	220f      	movs	r2, #15
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4013      	ands	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a40      	ldr	r2, [pc, #256]	; (8002664 <HAL_GPIO_Init+0x2c0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d013      	beq.n	8002590 <HAL_GPIO_Init+0x1ec>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a3f      	ldr	r2, [pc, #252]	; (8002668 <HAL_GPIO_Init+0x2c4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d00d      	beq.n	800258c <HAL_GPIO_Init+0x1e8>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a3e      	ldr	r2, [pc, #248]	; (800266c <HAL_GPIO_Init+0x2c8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d007      	beq.n	8002588 <HAL_GPIO_Init+0x1e4>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a3d      	ldr	r2, [pc, #244]	; (8002670 <HAL_GPIO_Init+0x2cc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d101      	bne.n	8002584 <HAL_GPIO_Init+0x1e0>
 8002580:	2303      	movs	r3, #3
 8002582:	e006      	b.n	8002592 <HAL_GPIO_Init+0x1ee>
 8002584:	2304      	movs	r3, #4
 8002586:	e004      	b.n	8002592 <HAL_GPIO_Init+0x1ee>
 8002588:	2302      	movs	r3, #2
 800258a:	e002      	b.n	8002592 <HAL_GPIO_Init+0x1ee>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <HAL_GPIO_Init+0x1ee>
 8002590:	2300      	movs	r3, #0
 8002592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002594:	f002 0203 	and.w	r2, r2, #3
 8002598:	0092      	lsls	r2, r2, #2
 800259a:	4093      	lsls	r3, r2
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025a2:	492f      	ldr	r1, [pc, #188]	; (8002660 <HAL_GPIO_Init+0x2bc>)
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	089b      	lsrs	r3, r3, #2
 80025a8:	3302      	adds	r3, #2
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d006      	beq.n	80025ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025bc:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	492c      	ldr	r1, [pc, #176]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]
 80025c8:	e006      	b.n	80025d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025ca:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	4928      	ldr	r1, [pc, #160]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d006      	beq.n	80025f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025e4:	4b23      	ldr	r3, [pc, #140]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	4922      	ldr	r1, [pc, #136]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
 80025f0:	e006      	b.n	8002600 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	491e      	ldr	r1, [pc, #120]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d006      	beq.n	800261a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800260c:	4b19      	ldr	r3, [pc, #100]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	4918      	ldr	r1, [pc, #96]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]
 8002618:	e006      	b.n	8002628 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800261a:	4b16      	ldr	r3, [pc, #88]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	43db      	mvns	r3, r3
 8002622:	4914      	ldr	r1, [pc, #80]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 8002624:	4013      	ands	r3, r2
 8002626:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d021      	beq.n	8002678 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002634:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	490e      	ldr	r1, [pc, #56]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	60cb      	str	r3, [r1, #12]
 8002640:	e021      	b.n	8002686 <HAL_GPIO_Init+0x2e2>
 8002642:	bf00      	nop
 8002644:	10320000 	.word	0x10320000
 8002648:	10310000 	.word	0x10310000
 800264c:	10220000 	.word	0x10220000
 8002650:	10210000 	.word	0x10210000
 8002654:	10120000 	.word	0x10120000
 8002658:	10110000 	.word	0x10110000
 800265c:	40021000 	.word	0x40021000
 8002660:	40010000 	.word	0x40010000
 8002664:	40010800 	.word	0x40010800
 8002668:	40010c00 	.word	0x40010c00
 800266c:	40011000 	.word	0x40011000
 8002670:	40011400 	.word	0x40011400
 8002674:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_GPIO_Init+0x304>)
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	43db      	mvns	r3, r3
 8002680:	4909      	ldr	r1, [pc, #36]	; (80026a8 <HAL_GPIO_Init+0x304>)
 8002682:	4013      	ands	r3, r2
 8002684:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	3301      	adds	r3, #1
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	fa22 f303 	lsr.w	r3, r2, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	f47f ae8e 	bne.w	80023b8 <HAL_GPIO_Init+0x14>
  }
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	372c      	adds	r7, #44	; 0x2c
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	40010400 	.word	0x40010400

080026ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e12b      	b.n	8002916 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fe ff7e 	bl	80015d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2224      	movs	r2, #36	; 0x24
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800270e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002710:	f000 ffea 	bl	80036e8 <HAL_RCC_GetPCLK1Freq>
 8002714:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4a81      	ldr	r2, [pc, #516]	; (8002920 <HAL_I2C_Init+0x274>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d807      	bhi.n	8002730 <HAL_I2C_Init+0x84>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4a80      	ldr	r2, [pc, #512]	; (8002924 <HAL_I2C_Init+0x278>)
 8002724:	4293      	cmp	r3, r2
 8002726:	bf94      	ite	ls
 8002728:	2301      	movls	r3, #1
 800272a:	2300      	movhi	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	e006      	b.n	800273e <HAL_I2C_Init+0x92>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4a7d      	ldr	r2, [pc, #500]	; (8002928 <HAL_I2C_Init+0x27c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	bf94      	ite	ls
 8002738:	2301      	movls	r3, #1
 800273a:	2300      	movhi	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0e7      	b.n	8002916 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4a78      	ldr	r2, [pc, #480]	; (800292c <HAL_I2C_Init+0x280>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	0c9b      	lsrs	r3, r3, #18
 8002750:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	430a      	orrs	r2, r1
 8002764:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a6a      	ldr	r2, [pc, #424]	; (8002920 <HAL_I2C_Init+0x274>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d802      	bhi.n	8002780 <HAL_I2C_Init+0xd4>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	3301      	adds	r3, #1
 800277e:	e009      	b.n	8002794 <HAL_I2C_Init+0xe8>
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002786:	fb02 f303 	mul.w	r3, r2, r3
 800278a:	4a69      	ldr	r2, [pc, #420]	; (8002930 <HAL_I2C_Init+0x284>)
 800278c:	fba2 2303 	umull	r2, r3, r2, r3
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	3301      	adds	r3, #1
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	430b      	orrs	r3, r1
 800279a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	495c      	ldr	r1, [pc, #368]	; (8002920 <HAL_I2C_Init+0x274>)
 80027b0:	428b      	cmp	r3, r1
 80027b2:	d819      	bhi.n	80027e8 <HAL_I2C_Init+0x13c>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1e59      	subs	r1, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fbb1 f3f3 	udiv	r3, r1, r3
 80027c2:	1c59      	adds	r1, r3, #1
 80027c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027c8:	400b      	ands	r3, r1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_I2C_Init+0x138>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1e59      	subs	r1, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80027dc:	3301      	adds	r3, #1
 80027de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e2:	e051      	b.n	8002888 <HAL_I2C_Init+0x1dc>
 80027e4:	2304      	movs	r3, #4
 80027e6:	e04f      	b.n	8002888 <HAL_I2C_Init+0x1dc>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d111      	bne.n	8002814 <HAL_I2C_Init+0x168>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1e58      	subs	r0, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6859      	ldr	r1, [r3, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	440b      	add	r3, r1
 80027fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002802:	3301      	adds	r3, #1
 8002804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002808:	2b00      	cmp	r3, #0
 800280a:	bf0c      	ite	eq
 800280c:	2301      	moveq	r3, #1
 800280e:	2300      	movne	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	e012      	b.n	800283a <HAL_I2C_Init+0x18e>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1e58      	subs	r0, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6859      	ldr	r1, [r3, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	0099      	lsls	r1, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	fbb0 f3f3 	udiv	r3, r0, r3
 800282a:	3301      	adds	r3, #1
 800282c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_Init+0x196>
 800283e:	2301      	movs	r3, #1
 8002840:	e022      	b.n	8002888 <HAL_I2C_Init+0x1dc>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10e      	bne.n	8002868 <HAL_I2C_Init+0x1bc>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1e58      	subs	r0, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6859      	ldr	r1, [r3, #4]
 8002852:	460b      	mov	r3, r1
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	440b      	add	r3, r1
 8002858:	fbb0 f3f3 	udiv	r3, r0, r3
 800285c:	3301      	adds	r3, #1
 800285e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002866:	e00f      	b.n	8002888 <HAL_I2C_Init+0x1dc>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1e58      	subs	r0, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	0099      	lsls	r1, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	fbb0 f3f3 	udiv	r3, r0, r3
 800287e:	3301      	adds	r3, #1
 8002880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002884:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	6809      	ldr	r1, [r1, #0]
 800288c:	4313      	orrs	r3, r2
 800288e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69da      	ldr	r2, [r3, #28]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6911      	ldr	r1, [r2, #16]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68d2      	ldr	r2, [r2, #12]
 80028c2:	4311      	orrs	r1, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	430b      	orrs	r3, r1
 80028ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2220      	movs	r2, #32
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	000186a0 	.word	0x000186a0
 8002924:	001e847f 	.word	0x001e847f
 8002928:	003d08ff 	.word	0x003d08ff
 800292c:	431bde83 	.word	0x431bde83
 8002930:	10624dd3 	.word	0x10624dd3

08002934 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af02      	add	r7, sp, #8
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	461a      	mov	r2, r3
 8002940:	460b      	mov	r3, r1
 8002942:	817b      	strh	r3, [r7, #10]
 8002944:	4613      	mov	r3, r2
 8002946:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002948:	f7fe ffee 	bl	8001928 <HAL_GetTick>
 800294c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b20      	cmp	r3, #32
 8002958:	f040 80e0 	bne.w	8002b1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	2319      	movs	r3, #25
 8002962:	2201      	movs	r2, #1
 8002964:	4970      	ldr	r1, [pc, #448]	; (8002b28 <HAL_I2C_Master_Transmit+0x1f4>)
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f964 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002972:	2302      	movs	r3, #2
 8002974:	e0d3      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_I2C_Master_Transmit+0x50>
 8002980:	2302      	movs	r3, #2
 8002982:	e0cc      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x1ea>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b01      	cmp	r3, #1
 8002998:	d007      	beq.n	80029aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2221      	movs	r2, #33	; 0x21
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2210      	movs	r2, #16
 80029c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	893a      	ldrh	r2, [r7, #8]
 80029da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4a50      	ldr	r2, [pc, #320]	; (8002b2c <HAL_I2C_Master_Transmit+0x1f8>)
 80029ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029ec:	8979      	ldrh	r1, [r7, #10]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	6a3a      	ldr	r2, [r7, #32]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f89c 	bl	8002b30 <I2C_MasterRequestWrite>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e08d      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a18:	e066      	b.n	8002ae8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	6a39      	ldr	r1, [r7, #32]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f9de 	bl	8002de0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00d      	beq.n	8002a46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d107      	bne.n	8002a42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e06b      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	781a      	ldrb	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d11b      	bne.n	8002abc <HAL_I2C_Master_Transmit+0x188>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d017      	beq.n	8002abc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	781a      	ldrb	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	6a39      	ldr	r1, [r7, #32]
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f9ce 	bl	8002e62 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00d      	beq.n	8002ae8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d107      	bne.n	8002ae4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e01a      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d194      	bne.n	8002a1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	e000      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b1c:	2302      	movs	r3, #2
  }
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	00100002 	.word	0x00100002
 8002b2c:	ffff0000 	.word	0xffff0000

08002b30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d006      	beq.n	8002b5a <I2C_MasterRequestWrite+0x2a>
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d003      	beq.n	8002b5a <I2C_MasterRequestWrite+0x2a>
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b58:	d108      	bne.n	8002b6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e00b      	b.n	8002b84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	2b12      	cmp	r3, #18
 8002b72:	d107      	bne.n	8002b84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f84f 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00d      	beq.n	8002bb8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002baa:	d103      	bne.n	8002bb4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e035      	b.n	8002c24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bc0:	d108      	bne.n	8002bd4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bc2:	897b      	ldrh	r3, [r7, #10]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bd0:	611a      	str	r2, [r3, #16]
 8002bd2:	e01b      	b.n	8002c0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bd4:	897b      	ldrh	r3, [r7, #10]
 8002bd6:	11db      	asrs	r3, r3, #7
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f003 0306 	and.w	r3, r3, #6
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	f063 030f 	orn	r3, r3, #15
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	490e      	ldr	r1, [pc, #56]	; (8002c2c <I2C_MasterRequestWrite+0xfc>)
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f875 	bl	8002ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e010      	b.n	8002c24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c02:	897b      	ldrh	r3, [r7, #10]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	4907      	ldr	r1, [pc, #28]	; (8002c30 <I2C_MasterRequestWrite+0x100>)
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f865 	bl	8002ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	00010008 	.word	0x00010008
 8002c30:	00010002 	.word	0x00010002

08002c34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c44:	e025      	b.n	8002c92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d021      	beq.n	8002c92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4e:	f7fe fe6b 	bl	8001928 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d116      	bne.n	8002c92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f043 0220 	orr.w	r2, r3, #32
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e023      	b.n	8002cda <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	0c1b      	lsrs	r3, r3, #16
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d10d      	bne.n	8002cb8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	43da      	mvns	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	bf0c      	ite	eq
 8002cae:	2301      	moveq	r3, #1
 8002cb0:	2300      	movne	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	e00c      	b.n	8002cd2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	43da      	mvns	r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	bf0c      	ite	eq
 8002cca:	2301      	moveq	r3, #1
 8002ccc:	2300      	movne	r3, #0
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d0b6      	beq.n	8002c46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cf0:	e051      	b.n	8002d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d00:	d123      	bne.n	8002d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f043 0204 	orr.w	r2, r3, #4
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e046      	b.n	8002dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d50:	d021      	beq.n	8002d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d52:	f7fe fde9 	bl	8001928 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d302      	bcc.n	8002d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d116      	bne.n	8002d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f043 0220 	orr.w	r2, r3, #32
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e020      	b.n	8002dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d10c      	bne.n	8002dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	43da      	mvns	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4013      	ands	r3, r2
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	bf14      	ite	ne
 8002db2:	2301      	movne	r3, #1
 8002db4:	2300      	moveq	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	e00b      	b.n	8002dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	43da      	mvns	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bf14      	ite	ne
 8002dcc:	2301      	movne	r3, #1
 8002dce:	2300      	moveq	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d18d      	bne.n	8002cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dec:	e02d      	b.n	8002e4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f878 	bl	8002ee4 <I2C_IsAcknowledgeFailed>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e02d      	b.n	8002e5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d021      	beq.n	8002e4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e06:	f7fe fd8f 	bl	8001928 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d302      	bcc.n	8002e1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d116      	bne.n	8002e4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f043 0220 	orr.w	r2, r3, #32
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e007      	b.n	8002e5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e54:	2b80      	cmp	r3, #128	; 0x80
 8002e56:	d1ca      	bne.n	8002dee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e6e:	e02d      	b.n	8002ecc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 f837 	bl	8002ee4 <I2C_IsAcknowledgeFailed>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e02d      	b.n	8002edc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e86:	d021      	beq.n	8002ecc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e88:	f7fe fd4e 	bl	8001928 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d302      	bcc.n	8002e9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d116      	bne.n	8002ecc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f043 0220 	orr.w	r2, r3, #32
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e007      	b.n	8002edc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d1ca      	bne.n	8002e70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efa:	d11b      	bne.n	8002f34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	f043 0204 	orr.w	r2, r3, #4
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e272      	b.n	8003438 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8087 	beq.w	800306e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f60:	4b92      	ldr	r3, [pc, #584]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 030c 	and.w	r3, r3, #12
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d00c      	beq.n	8002f86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f6c:	4b8f      	ldr	r3, [pc, #572]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d112      	bne.n	8002f9e <HAL_RCC_OscConfig+0x5e>
 8002f78:	4b8c      	ldr	r3, [pc, #560]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f84:	d10b      	bne.n	8002f9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f86:	4b89      	ldr	r3, [pc, #548]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d06c      	beq.n	800306c <HAL_RCC_OscConfig+0x12c>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d168      	bne.n	800306c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e24c      	b.n	8003438 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa6:	d106      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x76>
 8002fa8:	4b80      	ldr	r3, [pc, #512]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a7f      	ldr	r2, [pc, #508]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	e02e      	b.n	8003014 <HAL_RCC_OscConfig+0xd4>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x98>
 8002fbe:	4b7b      	ldr	r3, [pc, #492]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a7a      	ldr	r2, [pc, #488]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	4b78      	ldr	r3, [pc, #480]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a77      	ldr	r2, [pc, #476]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	e01d      	b.n	8003014 <HAL_RCC_OscConfig+0xd4>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0xbc>
 8002fe2:	4b72      	ldr	r3, [pc, #456]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a71      	ldr	r2, [pc, #452]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	4b6f      	ldr	r3, [pc, #444]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a6e      	ldr	r2, [pc, #440]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	e00b      	b.n	8003014 <HAL_RCC_OscConfig+0xd4>
 8002ffc:	4b6b      	ldr	r3, [pc, #428]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a6a      	ldr	r2, [pc, #424]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8003002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	4b68      	ldr	r3, [pc, #416]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a67      	ldr	r2, [pc, #412]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 800300e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003012:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d013      	beq.n	8003044 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fe fc84 	bl	8001928 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003024:	f7fe fc80 	bl	8001928 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b64      	cmp	r3, #100	; 0x64
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e200      	b.n	8003438 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003036:	4b5d      	ldr	r3, [pc, #372]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0xe4>
 8003042:	e014      	b.n	800306e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe fc70 	bl	8001928 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800304c:	f7fe fc6c 	bl	8001928 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e1ec      	b.n	8003438 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305e:	4b53      	ldr	r3, [pc, #332]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x10c>
 800306a:	e000      	b.n	800306e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d063      	beq.n	8003142 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800307a:	4b4c      	ldr	r3, [pc, #304]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00b      	beq.n	800309e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003086:	4b49      	ldr	r3, [pc, #292]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b08      	cmp	r3, #8
 8003090:	d11c      	bne.n	80030cc <HAL_RCC_OscConfig+0x18c>
 8003092:	4b46      	ldr	r3, [pc, #280]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d116      	bne.n	80030cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309e:	4b43      	ldr	r3, [pc, #268]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_RCC_OscConfig+0x176>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d001      	beq.n	80030b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e1c0      	b.n	8003438 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b6:	4b3d      	ldr	r3, [pc, #244]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4939      	ldr	r1, [pc, #228]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ca:	e03a      	b.n	8003142 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d020      	beq.n	8003116 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d4:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030da:	f7fe fc25 	bl	8001928 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e2:	f7fe fc21 	bl	8001928 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e1a1      	b.n	8003438 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f4:	4b2d      	ldr	r3, [pc, #180]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003100:	4b2a      	ldr	r3, [pc, #168]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	4927      	ldr	r1, [pc, #156]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8003110:	4313      	orrs	r3, r2
 8003112:	600b      	str	r3, [r1, #0]
 8003114:	e015      	b.n	8003142 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003116:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311c:	f7fe fc04 	bl	8001928 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003124:	f7fe fc00 	bl	8001928 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e180      	b.n	8003438 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003136:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b00      	cmp	r3, #0
 800314c:	d03a      	beq.n	80031c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d019      	beq.n	800318a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003156:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <HAL_RCC_OscConfig+0x274>)
 8003158:	2201      	movs	r2, #1
 800315a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315c:	f7fe fbe4 	bl	8001928 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003164:	f7fe fbe0 	bl	8001928 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e160      	b.n	8003438 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003176:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003182:	2001      	movs	r0, #1
 8003184:	f000 fad8 	bl	8003738 <RCC_Delay>
 8003188:	e01c      	b.n	80031c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800318a:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <HAL_RCC_OscConfig+0x274>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003190:	f7fe fbca 	bl	8001928 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003196:	e00f      	b.n	80031b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003198:	f7fe fbc6 	bl	8001928 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d908      	bls.n	80031b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e146      	b.n	8003438 <HAL_RCC_OscConfig+0x4f8>
 80031aa:	bf00      	nop
 80031ac:	40021000 	.word	0x40021000
 80031b0:	42420000 	.word	0x42420000
 80031b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b8:	4b92      	ldr	r3, [pc, #584]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1e9      	bne.n	8003198 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80a6 	beq.w	800331e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d2:	2300      	movs	r3, #0
 80031d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d6:	4b8b      	ldr	r3, [pc, #556]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10d      	bne.n	80031fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e2:	4b88      	ldr	r3, [pc, #544]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	4a87      	ldr	r2, [pc, #540]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 80031e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ec:	61d3      	str	r3, [r2, #28]
 80031ee:	4b85      	ldr	r3, [pc, #532]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031fa:	2301      	movs	r3, #1
 80031fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fe:	4b82      	ldr	r3, [pc, #520]	; (8003408 <HAL_RCC_OscConfig+0x4c8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d118      	bne.n	800323c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800320a:	4b7f      	ldr	r3, [pc, #508]	; (8003408 <HAL_RCC_OscConfig+0x4c8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a7e      	ldr	r2, [pc, #504]	; (8003408 <HAL_RCC_OscConfig+0x4c8>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003216:	f7fe fb87 	bl	8001928 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321e:	f7fe fb83 	bl	8001928 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b64      	cmp	r3, #100	; 0x64
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e103      	b.n	8003438 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003230:	4b75      	ldr	r3, [pc, #468]	; (8003408 <HAL_RCC_OscConfig+0x4c8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d106      	bne.n	8003252 <HAL_RCC_OscConfig+0x312>
 8003244:	4b6f      	ldr	r3, [pc, #444]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	4a6e      	ldr	r2, [pc, #440]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6213      	str	r3, [r2, #32]
 8003250:	e02d      	b.n	80032ae <HAL_RCC_OscConfig+0x36e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10c      	bne.n	8003274 <HAL_RCC_OscConfig+0x334>
 800325a:	4b6a      	ldr	r3, [pc, #424]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	4a69      	ldr	r2, [pc, #420]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 8003260:	f023 0301 	bic.w	r3, r3, #1
 8003264:	6213      	str	r3, [r2, #32]
 8003266:	4b67      	ldr	r3, [pc, #412]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	4a66      	ldr	r2, [pc, #408]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 800326c:	f023 0304 	bic.w	r3, r3, #4
 8003270:	6213      	str	r3, [r2, #32]
 8003272:	e01c      	b.n	80032ae <HAL_RCC_OscConfig+0x36e>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	2b05      	cmp	r3, #5
 800327a:	d10c      	bne.n	8003296 <HAL_RCC_OscConfig+0x356>
 800327c:	4b61      	ldr	r3, [pc, #388]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	4a60      	ldr	r2, [pc, #384]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 8003282:	f043 0304 	orr.w	r3, r3, #4
 8003286:	6213      	str	r3, [r2, #32]
 8003288:	4b5e      	ldr	r3, [pc, #376]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	4a5d      	ldr	r2, [pc, #372]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	6213      	str	r3, [r2, #32]
 8003294:	e00b      	b.n	80032ae <HAL_RCC_OscConfig+0x36e>
 8003296:	4b5b      	ldr	r3, [pc, #364]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	4a5a      	ldr	r2, [pc, #360]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 800329c:	f023 0301 	bic.w	r3, r3, #1
 80032a0:	6213      	str	r3, [r2, #32]
 80032a2:	4b58      	ldr	r3, [pc, #352]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	4a57      	ldr	r2, [pc, #348]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	f023 0304 	bic.w	r3, r3, #4
 80032ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d015      	beq.n	80032e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b6:	f7fe fb37 	bl	8001928 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7fe fb33 	bl	8001928 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e0b1      	b.n	8003438 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d4:	4b4b      	ldr	r3, [pc, #300]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0ee      	beq.n	80032be <HAL_RCC_OscConfig+0x37e>
 80032e0:	e014      	b.n	800330c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e2:	f7fe fb21 	bl	8001928 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e8:	e00a      	b.n	8003300 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ea:	f7fe fb1d 	bl	8001928 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e09b      	b.n	8003438 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003300:	4b40      	ldr	r3, [pc, #256]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1ee      	bne.n	80032ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800330c:	7dfb      	ldrb	r3, [r7, #23]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d105      	bne.n	800331e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003312:	4b3c      	ldr	r3, [pc, #240]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	4a3b      	ldr	r2, [pc, #236]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 8087 	beq.w	8003436 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003328:	4b36      	ldr	r3, [pc, #216]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 030c 	and.w	r3, r3, #12
 8003330:	2b08      	cmp	r3, #8
 8003332:	d061      	beq.n	80033f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d146      	bne.n	80033ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333c:	4b33      	ldr	r3, [pc, #204]	; (800340c <HAL_RCC_OscConfig+0x4cc>)
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003342:	f7fe faf1 	bl	8001928 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334a:	f7fe faed 	bl	8001928 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e06d      	b.n	8003438 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800335c:	4b29      	ldr	r3, [pc, #164]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f0      	bne.n	800334a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003370:	d108      	bne.n	8003384 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003372:	4b24      	ldr	r3, [pc, #144]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	4921      	ldr	r1, [pc, #132]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 8003380:	4313      	orrs	r3, r2
 8003382:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003384:	4b1f      	ldr	r3, [pc, #124]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a19      	ldr	r1, [r3, #32]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	430b      	orrs	r3, r1
 8003396:	491b      	ldr	r1, [pc, #108]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 8003398:	4313      	orrs	r3, r2
 800339a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800339c:	4b1b      	ldr	r3, [pc, #108]	; (800340c <HAL_RCC_OscConfig+0x4cc>)
 800339e:	2201      	movs	r2, #1
 80033a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a2:	f7fe fac1 	bl	8001928 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033aa:	f7fe fabd 	bl	8001928 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e03d      	b.n	8003438 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033bc:	4b11      	ldr	r3, [pc, #68]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x46a>
 80033c8:	e035      	b.n	8003436 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <HAL_RCC_OscConfig+0x4cc>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7fe faaa 	bl	8001928 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fe faa6 	bl	8001928 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e026      	b.n	8003438 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ea:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x498>
 80033f6:	e01e      	b.n	8003436 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d107      	bne.n	8003410 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e019      	b.n	8003438 <HAL_RCC_OscConfig+0x4f8>
 8003404:	40021000 	.word	0x40021000
 8003408:	40007000 	.word	0x40007000
 800340c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_RCC_OscConfig+0x500>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	429a      	cmp	r2, r3
 8003422:	d106      	bne.n	8003432 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800342e:	429a      	cmp	r2, r3
 8003430:	d001      	beq.n	8003436 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40021000 	.word	0x40021000

08003444 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0d0      	b.n	80035fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003458:	4b6a      	ldr	r3, [pc, #424]	; (8003604 <HAL_RCC_ClockConfig+0x1c0>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d910      	bls.n	8003488 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003466:	4b67      	ldr	r3, [pc, #412]	; (8003604 <HAL_RCC_ClockConfig+0x1c0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 0207 	bic.w	r2, r3, #7
 800346e:	4965      	ldr	r1, [pc, #404]	; (8003604 <HAL_RCC_ClockConfig+0x1c0>)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	4313      	orrs	r3, r2
 8003474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003476:	4b63      	ldr	r3, [pc, #396]	; (8003604 <HAL_RCC_ClockConfig+0x1c0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d001      	beq.n	8003488 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0b8      	b.n	80035fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d020      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034a0:	4b59      	ldr	r3, [pc, #356]	; (8003608 <HAL_RCC_ClockConfig+0x1c4>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	4a58      	ldr	r2, [pc, #352]	; (8003608 <HAL_RCC_ClockConfig+0x1c4>)
 80034a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034b8:	4b53      	ldr	r3, [pc, #332]	; (8003608 <HAL_RCC_ClockConfig+0x1c4>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4a52      	ldr	r2, [pc, #328]	; (8003608 <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c4:	4b50      	ldr	r3, [pc, #320]	; (8003608 <HAL_RCC_ClockConfig+0x1c4>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	494d      	ldr	r1, [pc, #308]	; (8003608 <HAL_RCC_ClockConfig+0x1c4>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d040      	beq.n	8003564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d107      	bne.n	80034fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ea:	4b47      	ldr	r3, [pc, #284]	; (8003608 <HAL_RCC_ClockConfig+0x1c4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d115      	bne.n	8003522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e07f      	b.n	80035fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d107      	bne.n	8003512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003502:	4b41      	ldr	r3, [pc, #260]	; (8003608 <HAL_RCC_ClockConfig+0x1c4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d109      	bne.n	8003522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e073      	b.n	80035fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003512:	4b3d      	ldr	r3, [pc, #244]	; (8003608 <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e06b      	b.n	80035fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003522:	4b39      	ldr	r3, [pc, #228]	; (8003608 <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f023 0203 	bic.w	r2, r3, #3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	4936      	ldr	r1, [pc, #216]	; (8003608 <HAL_RCC_ClockConfig+0x1c4>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003534:	f7fe f9f8 	bl	8001928 <HAL_GetTick>
 8003538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353a:	e00a      	b.n	8003552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800353c:	f7fe f9f4 	bl	8001928 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	f241 3288 	movw	r2, #5000	; 0x1388
 800354a:	4293      	cmp	r3, r2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e053      	b.n	80035fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003552:	4b2d      	ldr	r3, [pc, #180]	; (8003608 <HAL_RCC_ClockConfig+0x1c4>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 020c 	and.w	r2, r3, #12
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	429a      	cmp	r2, r3
 8003562:	d1eb      	bne.n	800353c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003564:	4b27      	ldr	r3, [pc, #156]	; (8003604 <HAL_RCC_ClockConfig+0x1c0>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d210      	bcs.n	8003594 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003572:	4b24      	ldr	r3, [pc, #144]	; (8003604 <HAL_RCC_ClockConfig+0x1c0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 0207 	bic.w	r2, r3, #7
 800357a:	4922      	ldr	r1, [pc, #136]	; (8003604 <HAL_RCC_ClockConfig+0x1c0>)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003582:	4b20      	ldr	r3, [pc, #128]	; (8003604 <HAL_RCC_ClockConfig+0x1c0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e032      	b.n	80035fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035a0:	4b19      	ldr	r3, [pc, #100]	; (8003608 <HAL_RCC_ClockConfig+0x1c4>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4916      	ldr	r1, [pc, #88]	; (8003608 <HAL_RCC_ClockConfig+0x1c4>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d009      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035be:	4b12      	ldr	r3, [pc, #72]	; (8003608 <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	490e      	ldr	r1, [pc, #56]	; (8003608 <HAL_RCC_ClockConfig+0x1c4>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035d2:	f000 f821 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 80035d6:	4602      	mov	r2, r0
 80035d8:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <HAL_RCC_ClockConfig+0x1c4>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	091b      	lsrs	r3, r3, #4
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	490a      	ldr	r1, [pc, #40]	; (800360c <HAL_RCC_ClockConfig+0x1c8>)
 80035e4:	5ccb      	ldrb	r3, [r1, r3]
 80035e6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ea:	4a09      	ldr	r2, [pc, #36]	; (8003610 <HAL_RCC_ClockConfig+0x1cc>)
 80035ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035ee:	4b09      	ldr	r3, [pc, #36]	; (8003614 <HAL_RCC_ClockConfig+0x1d0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fe f956 	bl	80018a4 <HAL_InitTick>

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40022000 	.word	0x40022000
 8003608:	40021000 	.word	0x40021000
 800360c:	0800624c 	.word	0x0800624c
 8003610:	20000000 	.word	0x20000000
 8003614:	20000004 	.word	0x20000004

08003618 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003618:	b490      	push	{r4, r7}
 800361a:	b08a      	sub	sp, #40	; 0x28
 800361c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800361e:	4b29      	ldr	r3, [pc, #164]	; (80036c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003620:	1d3c      	adds	r4, r7, #4
 8003622:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003624:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003628:	f240 2301 	movw	r3, #513	; 0x201
 800362c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	2300      	movs	r3, #0
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	2300      	movs	r3, #0
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003642:	4b21      	ldr	r3, [pc, #132]	; (80036c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	2b04      	cmp	r3, #4
 8003650:	d002      	beq.n	8003658 <HAL_RCC_GetSysClockFreq+0x40>
 8003652:	2b08      	cmp	r3, #8
 8003654:	d003      	beq.n	800365e <HAL_RCC_GetSysClockFreq+0x46>
 8003656:	e02b      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003658:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800365a:	623b      	str	r3, [r7, #32]
      break;
 800365c:	e02b      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	0c9b      	lsrs	r3, r3, #18
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	3328      	adds	r3, #40	; 0x28
 8003668:	443b      	add	r3, r7
 800366a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800366e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d012      	beq.n	80036a0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800367a:	4b13      	ldr	r3, [pc, #76]	; (80036c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	0c5b      	lsrs	r3, r3, #17
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	3328      	adds	r3, #40	; 0x28
 8003686:	443b      	add	r3, r7
 8003688:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800368c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	4a0e      	ldr	r2, [pc, #56]	; (80036cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003692:	fb03 f202 	mul.w	r2, r3, r2
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	fbb2 f3f3 	udiv	r3, r2, r3
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
 800369e:	e004      	b.n	80036aa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	4a0b      	ldr	r2, [pc, #44]	; (80036d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036a4:	fb02 f303 	mul.w	r3, r2, r3
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	623b      	str	r3, [r7, #32]
      break;
 80036ae:	e002      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <HAL_RCC_GetSysClockFreq+0xb4>)
 80036b2:	623b      	str	r3, [r7, #32]
      break;
 80036b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036b6:	6a3b      	ldr	r3, [r7, #32]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3728      	adds	r7, #40	; 0x28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc90      	pop	{r4, r7}
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	0800622c 	.word	0x0800622c
 80036c8:	40021000 	.word	0x40021000
 80036cc:	007a1200 	.word	0x007a1200
 80036d0:	003d0900 	.word	0x003d0900

080036d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036d8:	4b02      	ldr	r3, [pc, #8]	; (80036e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr
 80036e4:	20000000 	.word	0x20000000

080036e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036ec:	f7ff fff2 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 80036f0:	4602      	mov	r2, r0
 80036f2:	4b05      	ldr	r3, [pc, #20]	; (8003708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	0a1b      	lsrs	r3, r3, #8
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	4903      	ldr	r1, [pc, #12]	; (800370c <HAL_RCC_GetPCLK1Freq+0x24>)
 80036fe:	5ccb      	ldrb	r3, [r1, r3]
 8003700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003704:	4618      	mov	r0, r3
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40021000 	.word	0x40021000
 800370c:	0800625c 	.word	0x0800625c

08003710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003714:	f7ff ffde 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 8003718:	4602      	mov	r2, r0
 800371a:	4b05      	ldr	r3, [pc, #20]	; (8003730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	0adb      	lsrs	r3, r3, #11
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	4903      	ldr	r1, [pc, #12]	; (8003734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003726:	5ccb      	ldrb	r3, [r1, r3]
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800372c:	4618      	mov	r0, r3
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40021000 	.word	0x40021000
 8003734:	0800625c 	.word	0x0800625c

08003738 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <RCC_Delay+0x34>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <RCC_Delay+0x38>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	0a5b      	lsrs	r3, r3, #9
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003754:	bf00      	nop
  }
  while (Delay --);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	1e5a      	subs	r2, r3, #1
 800375a:	60fa      	str	r2, [r7, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1f9      	bne.n	8003754 <RCC_Delay+0x1c>
}
 8003760:	bf00      	nop
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr
 800376c:	20000000 	.word	0x20000000
 8003770:	10624dd3 	.word	0x10624dd3

08003774 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	2300      	movs	r3, #0
 8003782:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d07d      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003790:	2300      	movs	r3, #0
 8003792:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003794:	4b4f      	ldr	r3, [pc, #316]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10d      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a0:	4b4c      	ldr	r3, [pc, #304]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	4a4b      	ldr	r2, [pc, #300]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037aa:	61d3      	str	r3, [r2, #28]
 80037ac:	4b49      	ldr	r3, [pc, #292]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b8:	2301      	movs	r3, #1
 80037ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037bc:	4b46      	ldr	r3, [pc, #280]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d118      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c8:	4b43      	ldr	r3, [pc, #268]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a42      	ldr	r2, [pc, #264]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d4:	f7fe f8a8 	bl	8001928 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037da:	e008      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037dc:	f7fe f8a4 	bl	8001928 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b64      	cmp	r3, #100	; 0x64
 80037e8:	d901      	bls.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e06d      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ee:	4b3a      	ldr	r3, [pc, #232]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037fa:	4b36      	ldr	r3, [pc, #216]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003802:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d02e      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	429a      	cmp	r2, r3
 8003816:	d027      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003818:	4b2e      	ldr	r3, [pc, #184]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003820:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003822:	4b2e      	ldr	r3, [pc, #184]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003824:	2201      	movs	r2, #1
 8003826:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003828:	4b2c      	ldr	r3, [pc, #176]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800382e:	4a29      	ldr	r2, [pc, #164]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d014      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383e:	f7fe f873 	bl	8001928 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003844:	e00a      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003846:	f7fe f86f 	bl	8001928 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	f241 3288 	movw	r2, #5000	; 0x1388
 8003854:	4293      	cmp	r3, r2
 8003856:	d901      	bls.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e036      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385c:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0ee      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003868:	4b1a      	ldr	r3, [pc, #104]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	4917      	ldr	r1, [pc, #92]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003876:	4313      	orrs	r3, r2
 8003878:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800387a:	7dfb      	ldrb	r3, [r7, #23]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d105      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003880:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	4a13      	ldr	r2, [pc, #76]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003898:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	490b      	ldr	r1, [pc, #44]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d008      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038b6:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	4904      	ldr	r1, [pc, #16]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40007000 	.word	0x40007000
 80038dc:	42420440 	.word	0x42420440

080038e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80038e0:	b590      	push	{r4, r7, lr}
 80038e2:	b08d      	sub	sp, #52	; 0x34
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038e8:	4b58      	ldr	r3, [pc, #352]	; (8003a4c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80038ea:	f107 040c 	add.w	r4, r7, #12
 80038ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038f4:	f240 2301 	movw	r3, #513	; 0x201
 80038f8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
 80038fe:	2300      	movs	r3, #0
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003902:	2300      	movs	r3, #0
 8003904:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	61fb      	str	r3, [r7, #28]
 800390a:	2300      	movs	r3, #0
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b10      	cmp	r3, #16
 8003912:	d00a      	beq.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b10      	cmp	r3, #16
 8003918:	f200 808e 	bhi.w	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d049      	beq.n	80039b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b02      	cmp	r3, #2
 8003926:	d079      	beq.n	8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003928:	e086      	b.n	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800392a:	4b49      	ldr	r3, [pc, #292]	; (8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003930:	4b47      	ldr	r3, [pc, #284]	; (8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d07f      	beq.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	0c9b      	lsrs	r3, r3, #18
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	3330      	adds	r3, #48	; 0x30
 8003946:	443b      	add	r3, r7
 8003948:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800394c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d017      	beq.n	8003988 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003958:	4b3d      	ldr	r3, [pc, #244]	; (8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	0c5b      	lsrs	r3, r3, #17
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	3330      	adds	r3, #48	; 0x30
 8003964:	443b      	add	r3, r7
 8003966:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00d      	beq.n	8003992 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003976:	4a37      	ldr	r2, [pc, #220]	; (8003a54 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	fbb2 f2f3 	udiv	r2, r2, r3
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	fb02 f303 	mul.w	r3, r2, r3
 8003984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003986:	e004      	b.n	8003992 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	4a33      	ldr	r2, [pc, #204]	; (8003a58 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800398c:	fb02 f303 	mul.w	r3, r2, r3
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003992:	4b2f      	ldr	r3, [pc, #188]	; (8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800399e:	d102      	bne.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80039a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80039a4:	e04a      	b.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80039a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	4a2c      	ldr	r2, [pc, #176]	; (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80039b4:	e042      	b.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80039b6:	4b26      	ldr	r3, [pc, #152]	; (8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c6:	d108      	bne.n	80039da <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80039d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80039d8:	e01f      	b.n	8003a1a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e4:	d109      	bne.n	80039fa <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80039e6:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80039f2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80039f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80039f8:	e00f      	b.n	8003a1a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a04:	d11c      	bne.n	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003a06:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d016      	beq.n	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003a12:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003a16:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a18:	e012      	b.n	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003a1a:	e011      	b.n	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003a1c:	f7ff fe78 	bl	8003710 <HAL_RCC_GetPCLK2Freq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	0b9b      	lsrs	r3, r3, #14
 8003a28:	f003 0303 	and.w	r3, r3, #3
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a34:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a36:	e004      	b.n	8003a42 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003a38:	bf00      	nop
 8003a3a:	e002      	b.n	8003a42 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003a3c:	bf00      	nop
 8003a3e:	e000      	b.n	8003a42 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003a40:	bf00      	nop
    }
  }
  return (frequency);
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3734      	adds	r7, #52	; 0x34
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd90      	pop	{r4, r7, pc}
 8003a4c:	0800623c 	.word	0x0800623c
 8003a50:	40021000 	.word	0x40021000
 8003a54:	007a1200 	.word	0x007a1200
 8003a58:	003d0900 	.word	0x003d0900
 8003a5c:	aaaaaaab 	.word	0xaaaaaaab

08003a60 <gcvt>:
 8003a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a62:	461c      	mov	r4, r3
 8003a64:	4615      	mov	r5, r2
 8003a66:	2300      	movs	r3, #0
 8003a68:	2200      	movs	r2, #0
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	4606      	mov	r6, r0
 8003a6e:	460f      	mov	r7, r1
 8003a70:	f7fc ff9c 	bl	80009ac <__aeabi_dcmplt>
 8003a74:	4623      	mov	r3, r4
 8003a76:	b118      	cbz	r0, 8003a80 <gcvt+0x20>
 8003a78:	222d      	movs	r2, #45	; 0x2d
 8003a7a:	3d01      	subs	r5, #1
 8003a7c:	f803 2b01 	strb.w	r2, [r3], #1
 8003a80:	2267      	movs	r2, #103	; 0x67
 8003a82:	2100      	movs	r1, #0
 8003a84:	e9cd 5300 	strd	r5, r3, [sp]
 8003a88:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8003a8c:	4905      	ldr	r1, [pc, #20]	; (8003aa4 <gcvt+0x44>)
 8003a8e:	4632      	mov	r2, r6
 8003a90:	463b      	mov	r3, r7
 8003a92:	6808      	ldr	r0, [r1, #0]
 8003a94:	f000 f8b4 	bl	8003c00 <_gcvt>
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	bf14      	ite	ne
 8003a9c:	4620      	movne	r0, r4
 8003a9e:	2000      	moveq	r0, #0
 8003aa0:	b005      	add	sp, #20
 8003aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aa4:	2000000c 	.word	0x2000000c

08003aa8 <__errno>:
 8003aa8:	4b01      	ldr	r3, [pc, #4]	; (8003ab0 <__errno+0x8>)
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	2000000c 	.word	0x2000000c

08003ab4 <__libc_init_array>:
 8003ab4:	b570      	push	{r4, r5, r6, lr}
 8003ab6:	2600      	movs	r6, #0
 8003ab8:	4d0c      	ldr	r5, [pc, #48]	; (8003aec <__libc_init_array+0x38>)
 8003aba:	4c0d      	ldr	r4, [pc, #52]	; (8003af0 <__libc_init_array+0x3c>)
 8003abc:	1b64      	subs	r4, r4, r5
 8003abe:	10a4      	asrs	r4, r4, #2
 8003ac0:	42a6      	cmp	r6, r4
 8003ac2:	d109      	bne.n	8003ad8 <__libc_init_array+0x24>
 8003ac4:	f002 fb9e 	bl	8006204 <_init>
 8003ac8:	2600      	movs	r6, #0
 8003aca:	4d0a      	ldr	r5, [pc, #40]	; (8003af4 <__libc_init_array+0x40>)
 8003acc:	4c0a      	ldr	r4, [pc, #40]	; (8003af8 <__libc_init_array+0x44>)
 8003ace:	1b64      	subs	r4, r4, r5
 8003ad0:	10a4      	asrs	r4, r4, #2
 8003ad2:	42a6      	cmp	r6, r4
 8003ad4:	d105      	bne.n	8003ae2 <__libc_init_array+0x2e>
 8003ad6:	bd70      	pop	{r4, r5, r6, pc}
 8003ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003adc:	4798      	blx	r3
 8003ade:	3601      	adds	r6, #1
 8003ae0:	e7ee      	b.n	8003ac0 <__libc_init_array+0xc>
 8003ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae6:	4798      	blx	r3
 8003ae8:	3601      	adds	r6, #1
 8003aea:	e7f2      	b.n	8003ad2 <__libc_init_array+0x1e>
 8003aec:	08006528 	.word	0x08006528
 8003af0:	08006528 	.word	0x08006528
 8003af4:	08006528 	.word	0x08006528
 8003af8:	0800652c 	.word	0x0800652c

08003afc <memset>:
 8003afc:	4603      	mov	r3, r0
 8003afe:	4402      	add	r2, r0
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d100      	bne.n	8003b06 <memset+0xa>
 8003b04:	4770      	bx	lr
 8003b06:	f803 1b01 	strb.w	r1, [r3], #1
 8003b0a:	e7f9      	b.n	8003b00 <memset+0x4>

08003b0c <print_e>:
 8003b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b0e:	b08b      	sub	sp, #44	; 0x2c
 8003b10:	460d      	mov	r5, r1
 8003b12:	a908      	add	r1, sp, #32
 8003b14:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8003b16:	9104      	str	r1, [sp, #16]
 8003b18:	a907      	add	r1, sp, #28
 8003b1a:	9103      	str	r1, [sp, #12]
 8003b1c:	a909      	add	r1, sp, #36	; 0x24
 8003b1e:	9102      	str	r1, [sp, #8]
 8003b20:	1c71      	adds	r1, r6, #1
 8003b22:	9101      	str	r1, [sp, #4]
 8003b24:	2102      	movs	r1, #2
 8003b26:	9100      	str	r1, [sp, #0]
 8003b28:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8003b2c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8003b2e:	f000 fe2f 	bl	8004790 <_dtoa_r>
 8003b32:	f242 730f 	movw	r3, #9999	; 0x270f
 8003b36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b38:	4601      	mov	r1, r0
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d104      	bne.n	8003b48 <print_e+0x3c>
 8003b3e:	4628      	mov	r0, r5
 8003b40:	f000 fd74 	bl	800462c <strcpy>
 8003b44:	b00b      	add	sp, #44	; 0x2c
 8003b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b48:	462b      	mov	r3, r5
 8003b4a:	7800      	ldrb	r0, [r0, #0]
 8003b4c:	2e00      	cmp	r6, #0
 8003b4e:	f803 0b01 	strb.w	r0, [r3], #1
 8003b52:	bfc8      	it	gt
 8003b54:	2401      	movgt	r4, #1
 8003b56:	202e      	movs	r0, #46	; 0x2e
 8003b58:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8003b5c:	b10d      	cbz	r5, 8003b62 <print_e+0x56>
 8003b5e:	2e00      	cmp	r6, #0
 8003b60:	dc37      	bgt.n	8003bd2 <print_e+0xc6>
 8003b62:	2f67      	cmp	r7, #103	; 0x67
 8003b64:	d046      	beq.n	8003bf4 <print_e+0xe8>
 8003b66:	2f47      	cmp	r7, #71	; 0x47
 8003b68:	d046      	beq.n	8003bf8 <print_e+0xec>
 8003b6a:	212e      	movs	r1, #46	; 0x2e
 8003b6c:	2030      	movs	r0, #48	; 0x30
 8003b6e:	2e00      	cmp	r6, #0
 8003b70:	dc38      	bgt.n	8003be4 <print_e+0xd8>
 8003b72:	1e51      	subs	r1, r2, #1
 8003b74:	2900      	cmp	r1, #0
 8003b76:	bfa8      	it	ge
 8003b78:	222b      	movge	r2, #43	; 0x2b
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	9109      	str	r1, [sp, #36]	; 0x24
 8003b7e:	bfbe      	ittt	lt
 8003b80:	212d      	movlt	r1, #45	; 0x2d
 8003b82:	f1c2 0201 	rsblt	r2, r2, #1
 8003b86:	9209      	strlt	r2, [sp, #36]	; 0x24
 8003b88:	f800 7b02 	strb.w	r7, [r0], #2
 8003b8c:	bfa8      	it	ge
 8003b8e:	705a      	strbge	r2, [r3, #1]
 8003b90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b92:	bfb8      	it	lt
 8003b94:	7059      	strblt	r1, [r3, #1]
 8003b96:	2a63      	cmp	r2, #99	; 0x63
 8003b98:	dd0b      	ble.n	8003bb2 <print_e+0xa6>
 8003b9a:	2164      	movs	r1, #100	; 0x64
 8003b9c:	fb92 f1f1 	sdiv	r1, r2, r1
 8003ba0:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8003ba4:	1cd8      	adds	r0, r3, #3
 8003ba6:	709c      	strb	r4, [r3, #2]
 8003ba8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8003bac:	fb03 2201 	mla	r2, r3, r1, r2
 8003bb0:	9209      	str	r2, [sp, #36]	; 0x24
 8003bb2:	220a      	movs	r2, #10
 8003bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bb6:	fb93 f2f2 	sdiv	r2, r3, r2
 8003bba:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8003bbe:	7001      	strb	r1, [r0, #0]
 8003bc0:	f06f 0109 	mvn.w	r1, #9
 8003bc4:	fb01 3302 	mla	r3, r1, r2, r3
 8003bc8:	3330      	adds	r3, #48	; 0x30
 8003bca:	7043      	strb	r3, [r0, #1]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	7083      	strb	r3, [r0, #2]
 8003bd0:	e7b8      	b.n	8003b44 <print_e+0x38>
 8003bd2:	b10c      	cbz	r4, 8003bd8 <print_e+0xcc>
 8003bd4:	f803 0b01 	strb.w	r0, [r3], #1
 8003bd8:	780c      	ldrb	r4, [r1, #0]
 8003bda:	3e01      	subs	r6, #1
 8003bdc:	f803 4b01 	strb.w	r4, [r3], #1
 8003be0:	2400      	movs	r4, #0
 8003be2:	e7b9      	b.n	8003b58 <print_e+0x4c>
 8003be4:	b10c      	cbz	r4, 8003bea <print_e+0xde>
 8003be6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bea:	2400      	movs	r4, #0
 8003bec:	f803 0b01 	strb.w	r0, [r3], #1
 8003bf0:	3e01      	subs	r6, #1
 8003bf2:	e7bc      	b.n	8003b6e <print_e+0x62>
 8003bf4:	2765      	movs	r7, #101	; 0x65
 8003bf6:	e7bc      	b.n	8003b72 <print_e+0x66>
 8003bf8:	2745      	movs	r7, #69	; 0x45
 8003bfa:	e7ba      	b.n	8003b72 <print_e+0x66>
 8003bfc:	0000      	movs	r0, r0
	...

08003c00 <_gcvt>:
 8003c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c04:	4690      	mov	r8, r2
 8003c06:	461c      	mov	r4, r3
 8003c08:	b08b      	sub	sp, #44	; 0x2c
 8003c0a:	4681      	mov	r9, r0
 8003c0c:	e9dd 7512 	ldrd	r7, r5, [sp, #72]	; 0x48
 8003c10:	2200      	movs	r2, #0
 8003c12:	2300      	movs	r3, #0
 8003c14:	4640      	mov	r0, r8
 8003c16:	4621      	mov	r1, r4
 8003c18:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8003c1a:	f7fc fec7 	bl	80009ac <__aeabi_dcmplt>
 8003c1e:	b108      	cbz	r0, 8003c24 <_gcvt+0x24>
 8003c20:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8003c24:	2200      	movs	r2, #0
 8003c26:	2300      	movs	r3, #0
 8003c28:	4640      	mov	r0, r8
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	f7fc feb4 	bl	8000998 <__aeabi_dcmpeq>
 8003c30:	b138      	cbz	r0, 8003c42 <_gcvt+0x42>
 8003c32:	2330      	movs	r3, #48	; 0x30
 8003c34:	702b      	strb	r3, [r5, #0]
 8003c36:	2300      	movs	r3, #0
 8003c38:	706b      	strb	r3, [r5, #1]
 8003c3a:	4628      	mov	r0, r5
 8003c3c:	b00b      	add	sp, #44	; 0x2c
 8003c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c42:	4640      	mov	r0, r8
 8003c44:	a34c      	add	r3, pc, #304	; (adr r3, 8003d78 <_gcvt+0x178>)
 8003c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	f7fc feb8 	bl	80009c0 <__aeabi_dcmple>
 8003c50:	b160      	cbz	r0, 8003c6c <_gcvt+0x6c>
 8003c52:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8003c56:	3f01      	subs	r7, #1
 8003c58:	9301      	str	r3, [sp, #4]
 8003c5a:	4642      	mov	r2, r8
 8003c5c:	4623      	mov	r3, r4
 8003c5e:	4629      	mov	r1, r5
 8003c60:	4648      	mov	r0, r9
 8003c62:	9602      	str	r6, [sp, #8]
 8003c64:	9700      	str	r7, [sp, #0]
 8003c66:	f7ff ff51 	bl	8003b0c <print_e>
 8003c6a:	e7e6      	b.n	8003c3a <_gcvt+0x3a>
 8003c6c:	4638      	mov	r0, r7
 8003c6e:	f000 fc09 	bl	8004484 <_mprec_log10>
 8003c72:	4642      	mov	r2, r8
 8003c74:	4623      	mov	r3, r4
 8003c76:	f7fc fea3 	bl	80009c0 <__aeabi_dcmple>
 8003c7a:	2800      	cmp	r0, #0
 8003c7c:	d1e9      	bne.n	8003c52 <_gcvt+0x52>
 8003c7e:	ab09      	add	r3, sp, #36	; 0x24
 8003c80:	9304      	str	r3, [sp, #16]
 8003c82:	ab08      	add	r3, sp, #32
 8003c84:	9303      	str	r3, [sp, #12]
 8003c86:	ab07      	add	r3, sp, #28
 8003c88:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	4642      	mov	r2, r8
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	4648      	mov	r0, r9
 8003c94:	4623      	mov	r3, r4
 8003c96:	f000 fd7b 	bl	8004790 <_dtoa_r>
 8003c9a:	f242 730f 	movw	r3, #9999	; 0x270f
 8003c9e:	9a07      	ldr	r2, [sp, #28]
 8003ca0:	4601      	mov	r1, r0
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d00f      	beq.n	8003cc6 <_gcvt+0xc6>
 8003ca6:	462b      	mov	r3, r5
 8003ca8:	442f      	add	r7, r5
 8003caa:	4608      	mov	r0, r1
 8003cac:	f811 cb01 	ldrb.w	ip, [r1], #1
 8003cb0:	9a07      	ldr	r2, [sp, #28]
 8003cb2:	1afc      	subs	r4, r7, r3
 8003cb4:	f1bc 0f00 	cmp.w	ip, #0
 8003cb8:	d001      	beq.n	8003cbe <_gcvt+0xbe>
 8003cba:	2a00      	cmp	r2, #0
 8003cbc:	dc07      	bgt.n	8003cce <_gcvt+0xce>
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8003cc4:	e00c      	b.n	8003ce0 <_gcvt+0xe0>
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	f000 fcb0 	bl	800462c <strcpy>
 8003ccc:	e7b5      	b.n	8003c3a <_gcvt+0x3a>
 8003cce:	3a01      	subs	r2, #1
 8003cd0:	f803 cb01 	strb.w	ip, [r3], #1
 8003cd4:	9207      	str	r2, [sp, #28]
 8003cd6:	e7e8      	b.n	8003caa <_gcvt+0xaa>
 8003cd8:	2101      	movs	r1, #1
 8003cda:	f803 cb01 	strb.w	ip, [r3], #1
 8003cde:	3c01      	subs	r4, #1
 8003ce0:	2a00      	cmp	r2, #0
 8003ce2:	4617      	mov	r7, r2
 8003ce4:	dc2a      	bgt.n	8003d3c <_gcvt+0x13c>
 8003ce6:	b101      	cbz	r1, 8003cea <_gcvt+0xea>
 8003ce8:	9207      	str	r2, [sp, #28]
 8003cea:	b90e      	cbnz	r6, 8003cf0 <_gcvt+0xf0>
 8003cec:	7802      	ldrb	r2, [r0, #0]
 8003cee:	b312      	cbz	r2, 8003d36 <_gcvt+0x136>
 8003cf0:	42ab      	cmp	r3, r5
 8003cf2:	bf04      	itt	eq
 8003cf4:	2230      	moveq	r2, #48	; 0x30
 8003cf6:	f803 2b01 	strbeq.w	r2, [r3], #1
 8003cfa:	222e      	movs	r2, #46	; 0x2e
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	2700      	movs	r7, #0
 8003d00:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8003d04:	701a      	strb	r2, [r3, #0]
 8003d06:	9a07      	ldr	r2, [sp, #28]
 8003d08:	eba2 0c03 	sub.w	ip, r2, r3
 8003d0c:	eb1c 0f01 	cmn.w	ip, r1
 8003d10:	d41c      	bmi.n	8003d4c <_gcvt+0x14c>
 8003d12:	2a00      	cmp	r2, #0
 8003d14:	f1c2 0100 	rsb	r1, r2, #0
 8003d18:	bfc8      	it	gt
 8003d1a:	2100      	movgt	r1, #0
 8003d1c:	f101 0c01 	add.w	ip, r1, #1
 8003d20:	4463      	add	r3, ip
 8003d22:	440a      	add	r2, r1
 8003d24:	b107      	cbz	r7, 8003d28 <_gcvt+0x128>
 8003d26:	9207      	str	r2, [sp, #28]
 8003d28:	1e42      	subs	r2, r0, #1
 8003d2a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8003d2e:	b109      	cbz	r1, 8003d34 <_gcvt+0x134>
 8003d30:	2c00      	cmp	r4, #0
 8003d32:	dc0f      	bgt.n	8003d54 <_gcvt+0x154>
 8003d34:	b9de      	cbnz	r6, 8003d6e <_gcvt+0x16e>
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
 8003d3a:	e77e      	b.n	8003c3a <_gcvt+0x3a>
 8003d3c:	2c00      	cmp	r4, #0
 8003d3e:	f102 32ff 	add.w	r2, r2, #4294967295
 8003d42:	dcc9      	bgt.n	8003cd8 <_gcvt+0xd8>
 8003d44:	2900      	cmp	r1, #0
 8003d46:	d0d0      	beq.n	8003cea <_gcvt+0xea>
 8003d48:	9707      	str	r7, [sp, #28]
 8003d4a:	e7ce      	b.n	8003cea <_gcvt+0xea>
 8003d4c:	2701      	movs	r7, #1
 8003d4e:	f801 ef01 	strb.w	lr, [r1, #1]!
 8003d52:	e7db      	b.n	8003d0c <_gcvt+0x10c>
 8003d54:	f803 1b01 	strb.w	r1, [r3], #1
 8003d58:	3c01      	subs	r4, #1
 8003d5a:	e7e6      	b.n	8003d2a <_gcvt+0x12a>
 8003d5c:	f802 6b01 	strb.w	r6, [r2], #1
 8003d60:	1a81      	subs	r1, r0, r2
 8003d62:	2900      	cmp	r1, #0
 8003d64:	dcfa      	bgt.n	8003d5c <_gcvt+0x15c>
 8003d66:	2c00      	cmp	r4, #0
 8003d68:	bfa8      	it	ge
 8003d6a:	191b      	addge	r3, r3, r4
 8003d6c:	e7e3      	b.n	8003d36 <_gcvt+0x136>
 8003d6e:	461a      	mov	r2, r3
 8003d70:	2630      	movs	r6, #48	; 0x30
 8003d72:	1918      	adds	r0, r3, r4
 8003d74:	e7f4      	b.n	8003d60 <_gcvt+0x160>
 8003d76:	bf00      	nop
 8003d78:	eb1c432d 	.word	0xeb1c432d
 8003d7c:	3f1a36e2 	.word	0x3f1a36e2

08003d80 <_Balloc>:
 8003d80:	b570      	push	{r4, r5, r6, lr}
 8003d82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003d84:	4604      	mov	r4, r0
 8003d86:	460d      	mov	r5, r1
 8003d88:	b976      	cbnz	r6, 8003da8 <_Balloc+0x28>
 8003d8a:	2010      	movs	r0, #16
 8003d8c:	f001 fb00 	bl	8005390 <malloc>
 8003d90:	4602      	mov	r2, r0
 8003d92:	6260      	str	r0, [r4, #36]	; 0x24
 8003d94:	b920      	cbnz	r0, 8003da0 <_Balloc+0x20>
 8003d96:	2166      	movs	r1, #102	; 0x66
 8003d98:	4b17      	ldr	r3, [pc, #92]	; (8003df8 <_Balloc+0x78>)
 8003d9a:	4818      	ldr	r0, [pc, #96]	; (8003dfc <_Balloc+0x7c>)
 8003d9c:	f000 fc4e 	bl	800463c <__assert_func>
 8003da0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003da4:	6006      	str	r6, [r0, #0]
 8003da6:	60c6      	str	r6, [r0, #12]
 8003da8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003daa:	68f3      	ldr	r3, [r6, #12]
 8003dac:	b183      	cbz	r3, 8003dd0 <_Balloc+0x50>
 8003dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003db6:	b9b8      	cbnz	r0, 8003de8 <_Balloc+0x68>
 8003db8:	2101      	movs	r1, #1
 8003dba:	fa01 f605 	lsl.w	r6, r1, r5
 8003dbe:	1d72      	adds	r2, r6, #5
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	0092      	lsls	r2, r2, #2
 8003dc4:	f000 fb7a 	bl	80044bc <_calloc_r>
 8003dc8:	b160      	cbz	r0, 8003de4 <_Balloc+0x64>
 8003dca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003dce:	e00e      	b.n	8003dee <_Balloc+0x6e>
 8003dd0:	2221      	movs	r2, #33	; 0x21
 8003dd2:	2104      	movs	r1, #4
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	f000 fb71 	bl	80044bc <_calloc_r>
 8003dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ddc:	60f0      	str	r0, [r6, #12]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e4      	bne.n	8003dae <_Balloc+0x2e>
 8003de4:	2000      	movs	r0, #0
 8003de6:	bd70      	pop	{r4, r5, r6, pc}
 8003de8:	6802      	ldr	r2, [r0, #0]
 8003dea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003dee:	2300      	movs	r3, #0
 8003df0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003df4:	e7f7      	b.n	8003de6 <_Balloc+0x66>
 8003df6:	bf00      	nop
 8003df8:	08006268 	.word	0x08006268
 8003dfc:	0800627f 	.word	0x0800627f

08003e00 <_Bfree>:
 8003e00:	b570      	push	{r4, r5, r6, lr}
 8003e02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003e04:	4605      	mov	r5, r0
 8003e06:	460c      	mov	r4, r1
 8003e08:	b976      	cbnz	r6, 8003e28 <_Bfree+0x28>
 8003e0a:	2010      	movs	r0, #16
 8003e0c:	f001 fac0 	bl	8005390 <malloc>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6268      	str	r0, [r5, #36]	; 0x24
 8003e14:	b920      	cbnz	r0, 8003e20 <_Bfree+0x20>
 8003e16:	218a      	movs	r1, #138	; 0x8a
 8003e18:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <_Bfree+0x3c>)
 8003e1a:	4809      	ldr	r0, [pc, #36]	; (8003e40 <_Bfree+0x40>)
 8003e1c:	f000 fc0e 	bl	800463c <__assert_func>
 8003e20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003e24:	6006      	str	r6, [r0, #0]
 8003e26:	60c6      	str	r6, [r0, #12]
 8003e28:	b13c      	cbz	r4, 8003e3a <_Bfree+0x3a>
 8003e2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003e2c:	6862      	ldr	r2, [r4, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e34:	6021      	str	r1, [r4, #0]
 8003e36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003e3a:	bd70      	pop	{r4, r5, r6, pc}
 8003e3c:	08006268 	.word	0x08006268
 8003e40:	0800627f 	.word	0x0800627f

08003e44 <__multadd>:
 8003e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e48:	4607      	mov	r7, r0
 8003e4a:	460c      	mov	r4, r1
 8003e4c:	461e      	mov	r6, r3
 8003e4e:	2000      	movs	r0, #0
 8003e50:	690d      	ldr	r5, [r1, #16]
 8003e52:	f101 0c14 	add.w	ip, r1, #20
 8003e56:	f8dc 3000 	ldr.w	r3, [ip]
 8003e5a:	3001      	adds	r0, #1
 8003e5c:	b299      	uxth	r1, r3
 8003e5e:	fb02 6101 	mla	r1, r2, r1, r6
 8003e62:	0c1e      	lsrs	r6, r3, #16
 8003e64:	0c0b      	lsrs	r3, r1, #16
 8003e66:	fb02 3306 	mla	r3, r2, r6, r3
 8003e6a:	b289      	uxth	r1, r1
 8003e6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003e70:	4285      	cmp	r5, r0
 8003e72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003e76:	f84c 1b04 	str.w	r1, [ip], #4
 8003e7a:	dcec      	bgt.n	8003e56 <__multadd+0x12>
 8003e7c:	b30e      	cbz	r6, 8003ec2 <__multadd+0x7e>
 8003e7e:	68a3      	ldr	r3, [r4, #8]
 8003e80:	42ab      	cmp	r3, r5
 8003e82:	dc19      	bgt.n	8003eb8 <__multadd+0x74>
 8003e84:	6861      	ldr	r1, [r4, #4]
 8003e86:	4638      	mov	r0, r7
 8003e88:	3101      	adds	r1, #1
 8003e8a:	f7ff ff79 	bl	8003d80 <_Balloc>
 8003e8e:	4680      	mov	r8, r0
 8003e90:	b928      	cbnz	r0, 8003e9e <__multadd+0x5a>
 8003e92:	4602      	mov	r2, r0
 8003e94:	21b5      	movs	r1, #181	; 0xb5
 8003e96:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <__multadd+0x84>)
 8003e98:	480c      	ldr	r0, [pc, #48]	; (8003ecc <__multadd+0x88>)
 8003e9a:	f000 fbcf 	bl	800463c <__assert_func>
 8003e9e:	6922      	ldr	r2, [r4, #16]
 8003ea0:	f104 010c 	add.w	r1, r4, #12
 8003ea4:	3202      	adds	r2, #2
 8003ea6:	0092      	lsls	r2, r2, #2
 8003ea8:	300c      	adds	r0, #12
 8003eaa:	f001 fa79 	bl	80053a0 <memcpy>
 8003eae:	4621      	mov	r1, r4
 8003eb0:	4638      	mov	r0, r7
 8003eb2:	f7ff ffa5 	bl	8003e00 <_Bfree>
 8003eb6:	4644      	mov	r4, r8
 8003eb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003ebc:	3501      	adds	r5, #1
 8003ebe:	615e      	str	r6, [r3, #20]
 8003ec0:	6125      	str	r5, [r4, #16]
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ec8:	080062db 	.word	0x080062db
 8003ecc:	0800627f 	.word	0x0800627f

08003ed0 <__hi0bits>:
 8003ed0:	0c02      	lsrs	r2, r0, #16
 8003ed2:	0412      	lsls	r2, r2, #16
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	b9ca      	cbnz	r2, 8003f0c <__hi0bits+0x3c>
 8003ed8:	0403      	lsls	r3, r0, #16
 8003eda:	2010      	movs	r0, #16
 8003edc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003ee0:	bf04      	itt	eq
 8003ee2:	021b      	lsleq	r3, r3, #8
 8003ee4:	3008      	addeq	r0, #8
 8003ee6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003eea:	bf04      	itt	eq
 8003eec:	011b      	lsleq	r3, r3, #4
 8003eee:	3004      	addeq	r0, #4
 8003ef0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003ef4:	bf04      	itt	eq
 8003ef6:	009b      	lsleq	r3, r3, #2
 8003ef8:	3002      	addeq	r0, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	db05      	blt.n	8003f0a <__hi0bits+0x3a>
 8003efe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003f02:	f100 0001 	add.w	r0, r0, #1
 8003f06:	bf08      	it	eq
 8003f08:	2020      	moveq	r0, #32
 8003f0a:	4770      	bx	lr
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	e7e5      	b.n	8003edc <__hi0bits+0xc>

08003f10 <__lo0bits>:
 8003f10:	6803      	ldr	r3, [r0, #0]
 8003f12:	4602      	mov	r2, r0
 8003f14:	f013 0007 	ands.w	r0, r3, #7
 8003f18:	d00b      	beq.n	8003f32 <__lo0bits+0x22>
 8003f1a:	07d9      	lsls	r1, r3, #31
 8003f1c:	d421      	bmi.n	8003f62 <__lo0bits+0x52>
 8003f1e:	0798      	lsls	r0, r3, #30
 8003f20:	bf49      	itett	mi
 8003f22:	085b      	lsrmi	r3, r3, #1
 8003f24:	089b      	lsrpl	r3, r3, #2
 8003f26:	2001      	movmi	r0, #1
 8003f28:	6013      	strmi	r3, [r2, #0]
 8003f2a:	bf5c      	itt	pl
 8003f2c:	2002      	movpl	r0, #2
 8003f2e:	6013      	strpl	r3, [r2, #0]
 8003f30:	4770      	bx	lr
 8003f32:	b299      	uxth	r1, r3
 8003f34:	b909      	cbnz	r1, 8003f3a <__lo0bits+0x2a>
 8003f36:	2010      	movs	r0, #16
 8003f38:	0c1b      	lsrs	r3, r3, #16
 8003f3a:	b2d9      	uxtb	r1, r3
 8003f3c:	b909      	cbnz	r1, 8003f42 <__lo0bits+0x32>
 8003f3e:	3008      	adds	r0, #8
 8003f40:	0a1b      	lsrs	r3, r3, #8
 8003f42:	0719      	lsls	r1, r3, #28
 8003f44:	bf04      	itt	eq
 8003f46:	091b      	lsreq	r3, r3, #4
 8003f48:	3004      	addeq	r0, #4
 8003f4a:	0799      	lsls	r1, r3, #30
 8003f4c:	bf04      	itt	eq
 8003f4e:	089b      	lsreq	r3, r3, #2
 8003f50:	3002      	addeq	r0, #2
 8003f52:	07d9      	lsls	r1, r3, #31
 8003f54:	d403      	bmi.n	8003f5e <__lo0bits+0x4e>
 8003f56:	085b      	lsrs	r3, r3, #1
 8003f58:	f100 0001 	add.w	r0, r0, #1
 8003f5c:	d003      	beq.n	8003f66 <__lo0bits+0x56>
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	4770      	bx	lr
 8003f62:	2000      	movs	r0, #0
 8003f64:	4770      	bx	lr
 8003f66:	2020      	movs	r0, #32
 8003f68:	4770      	bx	lr
	...

08003f6c <__i2b>:
 8003f6c:	b510      	push	{r4, lr}
 8003f6e:	460c      	mov	r4, r1
 8003f70:	2101      	movs	r1, #1
 8003f72:	f7ff ff05 	bl	8003d80 <_Balloc>
 8003f76:	4602      	mov	r2, r0
 8003f78:	b928      	cbnz	r0, 8003f86 <__i2b+0x1a>
 8003f7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003f7e:	4b04      	ldr	r3, [pc, #16]	; (8003f90 <__i2b+0x24>)
 8003f80:	4804      	ldr	r0, [pc, #16]	; (8003f94 <__i2b+0x28>)
 8003f82:	f000 fb5b 	bl	800463c <__assert_func>
 8003f86:	2301      	movs	r3, #1
 8003f88:	6144      	str	r4, [r0, #20]
 8003f8a:	6103      	str	r3, [r0, #16]
 8003f8c:	bd10      	pop	{r4, pc}
 8003f8e:	bf00      	nop
 8003f90:	080062db 	.word	0x080062db
 8003f94:	0800627f 	.word	0x0800627f

08003f98 <__multiply>:
 8003f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f9c:	4691      	mov	r9, r2
 8003f9e:	690a      	ldr	r2, [r1, #16]
 8003fa0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	bfbe      	ittt	lt
 8003faa:	460b      	movlt	r3, r1
 8003fac:	464c      	movlt	r4, r9
 8003fae:	4699      	movlt	r9, r3
 8003fb0:	6927      	ldr	r7, [r4, #16]
 8003fb2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003fb6:	68a3      	ldr	r3, [r4, #8]
 8003fb8:	6861      	ldr	r1, [r4, #4]
 8003fba:	eb07 060a 	add.w	r6, r7, sl
 8003fbe:	42b3      	cmp	r3, r6
 8003fc0:	b085      	sub	sp, #20
 8003fc2:	bfb8      	it	lt
 8003fc4:	3101      	addlt	r1, #1
 8003fc6:	f7ff fedb 	bl	8003d80 <_Balloc>
 8003fca:	b930      	cbnz	r0, 8003fda <__multiply+0x42>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	f240 115d 	movw	r1, #349	; 0x15d
 8003fd2:	4b43      	ldr	r3, [pc, #268]	; (80040e0 <__multiply+0x148>)
 8003fd4:	4843      	ldr	r0, [pc, #268]	; (80040e4 <__multiply+0x14c>)
 8003fd6:	f000 fb31 	bl	800463c <__assert_func>
 8003fda:	f100 0514 	add.w	r5, r0, #20
 8003fde:	462b      	mov	r3, r5
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003fe6:	4543      	cmp	r3, r8
 8003fe8:	d321      	bcc.n	800402e <__multiply+0x96>
 8003fea:	f104 0314 	add.w	r3, r4, #20
 8003fee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003ff2:	f109 0314 	add.w	r3, r9, #20
 8003ff6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003ffa:	9202      	str	r2, [sp, #8]
 8003ffc:	1b3a      	subs	r2, r7, r4
 8003ffe:	3a15      	subs	r2, #21
 8004000:	f022 0203 	bic.w	r2, r2, #3
 8004004:	3204      	adds	r2, #4
 8004006:	f104 0115 	add.w	r1, r4, #21
 800400a:	428f      	cmp	r7, r1
 800400c:	bf38      	it	cc
 800400e:	2204      	movcc	r2, #4
 8004010:	9201      	str	r2, [sp, #4]
 8004012:	9a02      	ldr	r2, [sp, #8]
 8004014:	9303      	str	r3, [sp, #12]
 8004016:	429a      	cmp	r2, r3
 8004018:	d80c      	bhi.n	8004034 <__multiply+0x9c>
 800401a:	2e00      	cmp	r6, #0
 800401c:	dd03      	ble.n	8004026 <__multiply+0x8e>
 800401e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004022:	2b00      	cmp	r3, #0
 8004024:	d059      	beq.n	80040da <__multiply+0x142>
 8004026:	6106      	str	r6, [r0, #16]
 8004028:	b005      	add	sp, #20
 800402a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800402e:	f843 2b04 	str.w	r2, [r3], #4
 8004032:	e7d8      	b.n	8003fe6 <__multiply+0x4e>
 8004034:	f8b3 a000 	ldrh.w	sl, [r3]
 8004038:	f1ba 0f00 	cmp.w	sl, #0
 800403c:	d023      	beq.n	8004086 <__multiply+0xee>
 800403e:	46a9      	mov	r9, r5
 8004040:	f04f 0c00 	mov.w	ip, #0
 8004044:	f104 0e14 	add.w	lr, r4, #20
 8004048:	f85e 2b04 	ldr.w	r2, [lr], #4
 800404c:	f8d9 1000 	ldr.w	r1, [r9]
 8004050:	fa1f fb82 	uxth.w	fp, r2
 8004054:	b289      	uxth	r1, r1
 8004056:	fb0a 110b 	mla	r1, sl, fp, r1
 800405a:	4461      	add	r1, ip
 800405c:	f8d9 c000 	ldr.w	ip, [r9]
 8004060:	0c12      	lsrs	r2, r2, #16
 8004062:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004066:	fb0a c202 	mla	r2, sl, r2, ip
 800406a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800406e:	b289      	uxth	r1, r1
 8004070:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004074:	4577      	cmp	r7, lr
 8004076:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800407a:	f849 1b04 	str.w	r1, [r9], #4
 800407e:	d8e3      	bhi.n	8004048 <__multiply+0xb0>
 8004080:	9a01      	ldr	r2, [sp, #4]
 8004082:	f845 c002 	str.w	ip, [r5, r2]
 8004086:	9a03      	ldr	r2, [sp, #12]
 8004088:	3304      	adds	r3, #4
 800408a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800408e:	f1b9 0f00 	cmp.w	r9, #0
 8004092:	d020      	beq.n	80040d6 <__multiply+0x13e>
 8004094:	46ae      	mov	lr, r5
 8004096:	f04f 0a00 	mov.w	sl, #0
 800409a:	6829      	ldr	r1, [r5, #0]
 800409c:	f104 0c14 	add.w	ip, r4, #20
 80040a0:	f8bc b000 	ldrh.w	fp, [ip]
 80040a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80040a8:	b289      	uxth	r1, r1
 80040aa:	fb09 220b 	mla	r2, r9, fp, r2
 80040ae:	4492      	add	sl, r2
 80040b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80040b4:	f84e 1b04 	str.w	r1, [lr], #4
 80040b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80040bc:	f8be 1000 	ldrh.w	r1, [lr]
 80040c0:	0c12      	lsrs	r2, r2, #16
 80040c2:	fb09 1102 	mla	r1, r9, r2, r1
 80040c6:	4567      	cmp	r7, ip
 80040c8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80040cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80040d0:	d8e6      	bhi.n	80040a0 <__multiply+0x108>
 80040d2:	9a01      	ldr	r2, [sp, #4]
 80040d4:	50a9      	str	r1, [r5, r2]
 80040d6:	3504      	adds	r5, #4
 80040d8:	e79b      	b.n	8004012 <__multiply+0x7a>
 80040da:	3e01      	subs	r6, #1
 80040dc:	e79d      	b.n	800401a <__multiply+0x82>
 80040de:	bf00      	nop
 80040e0:	080062db 	.word	0x080062db
 80040e4:	0800627f 	.word	0x0800627f

080040e8 <__pow5mult>:
 80040e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040ec:	4615      	mov	r5, r2
 80040ee:	f012 0203 	ands.w	r2, r2, #3
 80040f2:	4606      	mov	r6, r0
 80040f4:	460f      	mov	r7, r1
 80040f6:	d007      	beq.n	8004108 <__pow5mult+0x20>
 80040f8:	4c25      	ldr	r4, [pc, #148]	; (8004190 <__pow5mult+0xa8>)
 80040fa:	3a01      	subs	r2, #1
 80040fc:	2300      	movs	r3, #0
 80040fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004102:	f7ff fe9f 	bl	8003e44 <__multadd>
 8004106:	4607      	mov	r7, r0
 8004108:	10ad      	asrs	r5, r5, #2
 800410a:	d03d      	beq.n	8004188 <__pow5mult+0xa0>
 800410c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800410e:	b97c      	cbnz	r4, 8004130 <__pow5mult+0x48>
 8004110:	2010      	movs	r0, #16
 8004112:	f001 f93d 	bl	8005390 <malloc>
 8004116:	4602      	mov	r2, r0
 8004118:	6270      	str	r0, [r6, #36]	; 0x24
 800411a:	b928      	cbnz	r0, 8004128 <__pow5mult+0x40>
 800411c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004120:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <__pow5mult+0xac>)
 8004122:	481d      	ldr	r0, [pc, #116]	; (8004198 <__pow5mult+0xb0>)
 8004124:	f000 fa8a 	bl	800463c <__assert_func>
 8004128:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800412c:	6004      	str	r4, [r0, #0]
 800412e:	60c4      	str	r4, [r0, #12]
 8004130:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004134:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004138:	b94c      	cbnz	r4, 800414e <__pow5mult+0x66>
 800413a:	f240 2171 	movw	r1, #625	; 0x271
 800413e:	4630      	mov	r0, r6
 8004140:	f7ff ff14 	bl	8003f6c <__i2b>
 8004144:	2300      	movs	r3, #0
 8004146:	4604      	mov	r4, r0
 8004148:	f8c8 0008 	str.w	r0, [r8, #8]
 800414c:	6003      	str	r3, [r0, #0]
 800414e:	f04f 0900 	mov.w	r9, #0
 8004152:	07eb      	lsls	r3, r5, #31
 8004154:	d50a      	bpl.n	800416c <__pow5mult+0x84>
 8004156:	4639      	mov	r1, r7
 8004158:	4622      	mov	r2, r4
 800415a:	4630      	mov	r0, r6
 800415c:	f7ff ff1c 	bl	8003f98 <__multiply>
 8004160:	4680      	mov	r8, r0
 8004162:	4639      	mov	r1, r7
 8004164:	4630      	mov	r0, r6
 8004166:	f7ff fe4b 	bl	8003e00 <_Bfree>
 800416a:	4647      	mov	r7, r8
 800416c:	106d      	asrs	r5, r5, #1
 800416e:	d00b      	beq.n	8004188 <__pow5mult+0xa0>
 8004170:	6820      	ldr	r0, [r4, #0]
 8004172:	b938      	cbnz	r0, 8004184 <__pow5mult+0x9c>
 8004174:	4622      	mov	r2, r4
 8004176:	4621      	mov	r1, r4
 8004178:	4630      	mov	r0, r6
 800417a:	f7ff ff0d 	bl	8003f98 <__multiply>
 800417e:	6020      	str	r0, [r4, #0]
 8004180:	f8c0 9000 	str.w	r9, [r0]
 8004184:	4604      	mov	r4, r0
 8004186:	e7e4      	b.n	8004152 <__pow5mult+0x6a>
 8004188:	4638      	mov	r0, r7
 800418a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800418e:	bf00      	nop
 8004190:	080063e0 	.word	0x080063e0
 8004194:	08006268 	.word	0x08006268
 8004198:	0800627f 	.word	0x0800627f

0800419c <__lshift>:
 800419c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041a0:	460c      	mov	r4, r1
 80041a2:	4607      	mov	r7, r0
 80041a4:	4691      	mov	r9, r2
 80041a6:	6923      	ldr	r3, [r4, #16]
 80041a8:	6849      	ldr	r1, [r1, #4]
 80041aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80041ae:	68a3      	ldr	r3, [r4, #8]
 80041b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80041b4:	f108 0601 	add.w	r6, r8, #1
 80041b8:	42b3      	cmp	r3, r6
 80041ba:	db0b      	blt.n	80041d4 <__lshift+0x38>
 80041bc:	4638      	mov	r0, r7
 80041be:	f7ff fddf 	bl	8003d80 <_Balloc>
 80041c2:	4605      	mov	r5, r0
 80041c4:	b948      	cbnz	r0, 80041da <__lshift+0x3e>
 80041c6:	4602      	mov	r2, r0
 80041c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80041cc:	4b29      	ldr	r3, [pc, #164]	; (8004274 <__lshift+0xd8>)
 80041ce:	482a      	ldr	r0, [pc, #168]	; (8004278 <__lshift+0xdc>)
 80041d0:	f000 fa34 	bl	800463c <__assert_func>
 80041d4:	3101      	adds	r1, #1
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	e7ee      	b.n	80041b8 <__lshift+0x1c>
 80041da:	2300      	movs	r3, #0
 80041dc:	f100 0114 	add.w	r1, r0, #20
 80041e0:	f100 0210 	add.w	r2, r0, #16
 80041e4:	4618      	mov	r0, r3
 80041e6:	4553      	cmp	r3, sl
 80041e8:	db37      	blt.n	800425a <__lshift+0xbe>
 80041ea:	6920      	ldr	r0, [r4, #16]
 80041ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80041f0:	f104 0314 	add.w	r3, r4, #20
 80041f4:	f019 091f 	ands.w	r9, r9, #31
 80041f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80041fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004200:	d02f      	beq.n	8004262 <__lshift+0xc6>
 8004202:	468a      	mov	sl, r1
 8004204:	f04f 0c00 	mov.w	ip, #0
 8004208:	f1c9 0e20 	rsb	lr, r9, #32
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	fa02 f209 	lsl.w	r2, r2, r9
 8004212:	ea42 020c 	orr.w	r2, r2, ip
 8004216:	f84a 2b04 	str.w	r2, [sl], #4
 800421a:	f853 2b04 	ldr.w	r2, [r3], #4
 800421e:	4298      	cmp	r0, r3
 8004220:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004224:	d8f2      	bhi.n	800420c <__lshift+0x70>
 8004226:	1b03      	subs	r3, r0, r4
 8004228:	3b15      	subs	r3, #21
 800422a:	f023 0303 	bic.w	r3, r3, #3
 800422e:	3304      	adds	r3, #4
 8004230:	f104 0215 	add.w	r2, r4, #21
 8004234:	4290      	cmp	r0, r2
 8004236:	bf38      	it	cc
 8004238:	2304      	movcc	r3, #4
 800423a:	f841 c003 	str.w	ip, [r1, r3]
 800423e:	f1bc 0f00 	cmp.w	ip, #0
 8004242:	d001      	beq.n	8004248 <__lshift+0xac>
 8004244:	f108 0602 	add.w	r6, r8, #2
 8004248:	3e01      	subs	r6, #1
 800424a:	4638      	mov	r0, r7
 800424c:	4621      	mov	r1, r4
 800424e:	612e      	str	r6, [r5, #16]
 8004250:	f7ff fdd6 	bl	8003e00 <_Bfree>
 8004254:	4628      	mov	r0, r5
 8004256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800425a:	f842 0f04 	str.w	r0, [r2, #4]!
 800425e:	3301      	adds	r3, #1
 8004260:	e7c1      	b.n	80041e6 <__lshift+0x4a>
 8004262:	3904      	subs	r1, #4
 8004264:	f853 2b04 	ldr.w	r2, [r3], #4
 8004268:	4298      	cmp	r0, r3
 800426a:	f841 2f04 	str.w	r2, [r1, #4]!
 800426e:	d8f9      	bhi.n	8004264 <__lshift+0xc8>
 8004270:	e7ea      	b.n	8004248 <__lshift+0xac>
 8004272:	bf00      	nop
 8004274:	080062db 	.word	0x080062db
 8004278:	0800627f 	.word	0x0800627f

0800427c <__mcmp>:
 800427c:	4603      	mov	r3, r0
 800427e:	690a      	ldr	r2, [r1, #16]
 8004280:	6900      	ldr	r0, [r0, #16]
 8004282:	b530      	push	{r4, r5, lr}
 8004284:	1a80      	subs	r0, r0, r2
 8004286:	d10d      	bne.n	80042a4 <__mcmp+0x28>
 8004288:	3314      	adds	r3, #20
 800428a:	3114      	adds	r1, #20
 800428c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004290:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004294:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004298:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800429c:	4295      	cmp	r5, r2
 800429e:	d002      	beq.n	80042a6 <__mcmp+0x2a>
 80042a0:	d304      	bcc.n	80042ac <__mcmp+0x30>
 80042a2:	2001      	movs	r0, #1
 80042a4:	bd30      	pop	{r4, r5, pc}
 80042a6:	42a3      	cmp	r3, r4
 80042a8:	d3f4      	bcc.n	8004294 <__mcmp+0x18>
 80042aa:	e7fb      	b.n	80042a4 <__mcmp+0x28>
 80042ac:	f04f 30ff 	mov.w	r0, #4294967295
 80042b0:	e7f8      	b.n	80042a4 <__mcmp+0x28>
	...

080042b4 <__mdiff>:
 80042b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b8:	460d      	mov	r5, r1
 80042ba:	4607      	mov	r7, r0
 80042bc:	4611      	mov	r1, r2
 80042be:	4628      	mov	r0, r5
 80042c0:	4614      	mov	r4, r2
 80042c2:	f7ff ffdb 	bl	800427c <__mcmp>
 80042c6:	1e06      	subs	r6, r0, #0
 80042c8:	d111      	bne.n	80042ee <__mdiff+0x3a>
 80042ca:	4631      	mov	r1, r6
 80042cc:	4638      	mov	r0, r7
 80042ce:	f7ff fd57 	bl	8003d80 <_Balloc>
 80042d2:	4602      	mov	r2, r0
 80042d4:	b928      	cbnz	r0, 80042e2 <__mdiff+0x2e>
 80042d6:	f240 2132 	movw	r1, #562	; 0x232
 80042da:	4b3a      	ldr	r3, [pc, #232]	; (80043c4 <__mdiff+0x110>)
 80042dc:	483a      	ldr	r0, [pc, #232]	; (80043c8 <__mdiff+0x114>)
 80042de:	f000 f9ad 	bl	800463c <__assert_func>
 80042e2:	2301      	movs	r3, #1
 80042e4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80042e8:	4610      	mov	r0, r2
 80042ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ee:	bfa4      	itt	ge
 80042f0:	4623      	movge	r3, r4
 80042f2:	462c      	movge	r4, r5
 80042f4:	4638      	mov	r0, r7
 80042f6:	6861      	ldr	r1, [r4, #4]
 80042f8:	bfa6      	itte	ge
 80042fa:	461d      	movge	r5, r3
 80042fc:	2600      	movge	r6, #0
 80042fe:	2601      	movlt	r6, #1
 8004300:	f7ff fd3e 	bl	8003d80 <_Balloc>
 8004304:	4602      	mov	r2, r0
 8004306:	b918      	cbnz	r0, 8004310 <__mdiff+0x5c>
 8004308:	f44f 7110 	mov.w	r1, #576	; 0x240
 800430c:	4b2d      	ldr	r3, [pc, #180]	; (80043c4 <__mdiff+0x110>)
 800430e:	e7e5      	b.n	80042dc <__mdiff+0x28>
 8004310:	f102 0814 	add.w	r8, r2, #20
 8004314:	46c2      	mov	sl, r8
 8004316:	f04f 0c00 	mov.w	ip, #0
 800431a:	6927      	ldr	r7, [r4, #16]
 800431c:	60c6      	str	r6, [r0, #12]
 800431e:	692e      	ldr	r6, [r5, #16]
 8004320:	f104 0014 	add.w	r0, r4, #20
 8004324:	f105 0914 	add.w	r9, r5, #20
 8004328:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800432c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004330:	3410      	adds	r4, #16
 8004332:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004336:	f859 3b04 	ldr.w	r3, [r9], #4
 800433a:	fa1f f18b 	uxth.w	r1, fp
 800433e:	448c      	add	ip, r1
 8004340:	b299      	uxth	r1, r3
 8004342:	0c1b      	lsrs	r3, r3, #16
 8004344:	ebac 0101 	sub.w	r1, ip, r1
 8004348:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800434c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004350:	b289      	uxth	r1, r1
 8004352:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004356:	454e      	cmp	r6, r9
 8004358:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800435c:	f84a 3b04 	str.w	r3, [sl], #4
 8004360:	d8e7      	bhi.n	8004332 <__mdiff+0x7e>
 8004362:	1b73      	subs	r3, r6, r5
 8004364:	3b15      	subs	r3, #21
 8004366:	f023 0303 	bic.w	r3, r3, #3
 800436a:	3515      	adds	r5, #21
 800436c:	3304      	adds	r3, #4
 800436e:	42ae      	cmp	r6, r5
 8004370:	bf38      	it	cc
 8004372:	2304      	movcc	r3, #4
 8004374:	4418      	add	r0, r3
 8004376:	4443      	add	r3, r8
 8004378:	461e      	mov	r6, r3
 800437a:	4605      	mov	r5, r0
 800437c:	4575      	cmp	r5, lr
 800437e:	d30e      	bcc.n	800439e <__mdiff+0xea>
 8004380:	f10e 0103 	add.w	r1, lr, #3
 8004384:	1a09      	subs	r1, r1, r0
 8004386:	f021 0103 	bic.w	r1, r1, #3
 800438a:	3803      	subs	r0, #3
 800438c:	4586      	cmp	lr, r0
 800438e:	bf38      	it	cc
 8004390:	2100      	movcc	r1, #0
 8004392:	4419      	add	r1, r3
 8004394:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004398:	b18b      	cbz	r3, 80043be <__mdiff+0x10a>
 800439a:	6117      	str	r7, [r2, #16]
 800439c:	e7a4      	b.n	80042e8 <__mdiff+0x34>
 800439e:	f855 8b04 	ldr.w	r8, [r5], #4
 80043a2:	fa1f f188 	uxth.w	r1, r8
 80043a6:	4461      	add	r1, ip
 80043a8:	140c      	asrs	r4, r1, #16
 80043aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80043ae:	b289      	uxth	r1, r1
 80043b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80043b4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80043b8:	f846 1b04 	str.w	r1, [r6], #4
 80043bc:	e7de      	b.n	800437c <__mdiff+0xc8>
 80043be:	3f01      	subs	r7, #1
 80043c0:	e7e8      	b.n	8004394 <__mdiff+0xe0>
 80043c2:	bf00      	nop
 80043c4:	080062db 	.word	0x080062db
 80043c8:	0800627f 	.word	0x0800627f

080043cc <__d2b>:
 80043cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80043d0:	2101      	movs	r1, #1
 80043d2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80043d6:	4690      	mov	r8, r2
 80043d8:	461d      	mov	r5, r3
 80043da:	f7ff fcd1 	bl	8003d80 <_Balloc>
 80043de:	4604      	mov	r4, r0
 80043e0:	b930      	cbnz	r0, 80043f0 <__d2b+0x24>
 80043e2:	4602      	mov	r2, r0
 80043e4:	f240 310a 	movw	r1, #778	; 0x30a
 80043e8:	4b24      	ldr	r3, [pc, #144]	; (800447c <__d2b+0xb0>)
 80043ea:	4825      	ldr	r0, [pc, #148]	; (8004480 <__d2b+0xb4>)
 80043ec:	f000 f926 	bl	800463c <__assert_func>
 80043f0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80043f4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80043f8:	bb2d      	cbnz	r5, 8004446 <__d2b+0x7a>
 80043fa:	9301      	str	r3, [sp, #4]
 80043fc:	f1b8 0300 	subs.w	r3, r8, #0
 8004400:	d026      	beq.n	8004450 <__d2b+0x84>
 8004402:	4668      	mov	r0, sp
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	f7ff fd83 	bl	8003f10 <__lo0bits>
 800440a:	9900      	ldr	r1, [sp, #0]
 800440c:	b1f0      	cbz	r0, 800444c <__d2b+0x80>
 800440e:	9a01      	ldr	r2, [sp, #4]
 8004410:	f1c0 0320 	rsb	r3, r0, #32
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	430b      	orrs	r3, r1
 800441a:	40c2      	lsrs	r2, r0
 800441c:	6163      	str	r3, [r4, #20]
 800441e:	9201      	str	r2, [sp, #4]
 8004420:	9b01      	ldr	r3, [sp, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	bf14      	ite	ne
 8004426:	2102      	movne	r1, #2
 8004428:	2101      	moveq	r1, #1
 800442a:	61a3      	str	r3, [r4, #24]
 800442c:	6121      	str	r1, [r4, #16]
 800442e:	b1c5      	cbz	r5, 8004462 <__d2b+0x96>
 8004430:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004434:	4405      	add	r5, r0
 8004436:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800443a:	603d      	str	r5, [r7, #0]
 800443c:	6030      	str	r0, [r6, #0]
 800443e:	4620      	mov	r0, r4
 8004440:	b002      	add	sp, #8
 8004442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800444a:	e7d6      	b.n	80043fa <__d2b+0x2e>
 800444c:	6161      	str	r1, [r4, #20]
 800444e:	e7e7      	b.n	8004420 <__d2b+0x54>
 8004450:	a801      	add	r0, sp, #4
 8004452:	f7ff fd5d 	bl	8003f10 <__lo0bits>
 8004456:	2101      	movs	r1, #1
 8004458:	9b01      	ldr	r3, [sp, #4]
 800445a:	6121      	str	r1, [r4, #16]
 800445c:	6163      	str	r3, [r4, #20]
 800445e:	3020      	adds	r0, #32
 8004460:	e7e5      	b.n	800442e <__d2b+0x62>
 8004462:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004466:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800446a:	6038      	str	r0, [r7, #0]
 800446c:	6918      	ldr	r0, [r3, #16]
 800446e:	f7ff fd2f 	bl	8003ed0 <__hi0bits>
 8004472:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004476:	6031      	str	r1, [r6, #0]
 8004478:	e7e1      	b.n	800443e <__d2b+0x72>
 800447a:	bf00      	nop
 800447c:	080062db 	.word	0x080062db
 8004480:	0800627f 	.word	0x0800627f

08004484 <_mprec_log10>:
 8004484:	2817      	cmp	r0, #23
 8004486:	b5d0      	push	{r4, r6, r7, lr}
 8004488:	4604      	mov	r4, r0
 800448a:	dc05      	bgt.n	8004498 <_mprec_log10+0x14>
 800448c:	4808      	ldr	r0, [pc, #32]	; (80044b0 <_mprec_log10+0x2c>)
 800448e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8004492:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004496:	bdd0      	pop	{r4, r6, r7, pc}
 8004498:	2000      	movs	r0, #0
 800449a:	2600      	movs	r6, #0
 800449c:	4905      	ldr	r1, [pc, #20]	; (80044b4 <_mprec_log10+0x30>)
 800449e:	4f06      	ldr	r7, [pc, #24]	; (80044b8 <_mprec_log10+0x34>)
 80044a0:	4632      	mov	r2, r6
 80044a2:	463b      	mov	r3, r7
 80044a4:	f7fc f810 	bl	80004c8 <__aeabi_dmul>
 80044a8:	3c01      	subs	r4, #1
 80044aa:	d1f9      	bne.n	80044a0 <_mprec_log10+0x1c>
 80044ac:	e7f3      	b.n	8004496 <_mprec_log10+0x12>
 80044ae:	bf00      	nop
 80044b0:	08006318 	.word	0x08006318
 80044b4:	3ff00000 	.word	0x3ff00000
 80044b8:	40240000 	.word	0x40240000

080044bc <_calloc_r>:
 80044bc:	b570      	push	{r4, r5, r6, lr}
 80044be:	fba1 5402 	umull	r5, r4, r1, r2
 80044c2:	b934      	cbnz	r4, 80044d2 <_calloc_r+0x16>
 80044c4:	4629      	mov	r1, r5
 80044c6:	f000 f82d 	bl	8004524 <_malloc_r>
 80044ca:	4606      	mov	r6, r0
 80044cc:	b928      	cbnz	r0, 80044da <_calloc_r+0x1e>
 80044ce:	4630      	mov	r0, r6
 80044d0:	bd70      	pop	{r4, r5, r6, pc}
 80044d2:	220c      	movs	r2, #12
 80044d4:	2600      	movs	r6, #0
 80044d6:	6002      	str	r2, [r0, #0]
 80044d8:	e7f9      	b.n	80044ce <_calloc_r+0x12>
 80044da:	462a      	mov	r2, r5
 80044dc:	4621      	mov	r1, r4
 80044de:	f7ff fb0d 	bl	8003afc <memset>
 80044e2:	e7f4      	b.n	80044ce <_calloc_r+0x12>

080044e4 <sbrk_aligned>:
 80044e4:	b570      	push	{r4, r5, r6, lr}
 80044e6:	4e0e      	ldr	r6, [pc, #56]	; (8004520 <sbrk_aligned+0x3c>)
 80044e8:	460c      	mov	r4, r1
 80044ea:	6831      	ldr	r1, [r6, #0]
 80044ec:	4605      	mov	r5, r0
 80044ee:	b911      	cbnz	r1, 80044f6 <sbrk_aligned+0x12>
 80044f0:	f000 f88c 	bl	800460c <_sbrk_r>
 80044f4:	6030      	str	r0, [r6, #0]
 80044f6:	4621      	mov	r1, r4
 80044f8:	4628      	mov	r0, r5
 80044fa:	f000 f887 	bl	800460c <_sbrk_r>
 80044fe:	1c43      	adds	r3, r0, #1
 8004500:	d00a      	beq.n	8004518 <sbrk_aligned+0x34>
 8004502:	1cc4      	adds	r4, r0, #3
 8004504:	f024 0403 	bic.w	r4, r4, #3
 8004508:	42a0      	cmp	r0, r4
 800450a:	d007      	beq.n	800451c <sbrk_aligned+0x38>
 800450c:	1a21      	subs	r1, r4, r0
 800450e:	4628      	mov	r0, r5
 8004510:	f000 f87c 	bl	800460c <_sbrk_r>
 8004514:	3001      	adds	r0, #1
 8004516:	d101      	bne.n	800451c <sbrk_aligned+0x38>
 8004518:	f04f 34ff 	mov.w	r4, #4294967295
 800451c:	4620      	mov	r0, r4
 800451e:	bd70      	pop	{r4, r5, r6, pc}
 8004520:	2000011c 	.word	0x2000011c

08004524 <_malloc_r>:
 8004524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004528:	1ccd      	adds	r5, r1, #3
 800452a:	f025 0503 	bic.w	r5, r5, #3
 800452e:	3508      	adds	r5, #8
 8004530:	2d0c      	cmp	r5, #12
 8004532:	bf38      	it	cc
 8004534:	250c      	movcc	r5, #12
 8004536:	2d00      	cmp	r5, #0
 8004538:	4607      	mov	r7, r0
 800453a:	db01      	blt.n	8004540 <_malloc_r+0x1c>
 800453c:	42a9      	cmp	r1, r5
 800453e:	d905      	bls.n	800454c <_malloc_r+0x28>
 8004540:	230c      	movs	r3, #12
 8004542:	2600      	movs	r6, #0
 8004544:	603b      	str	r3, [r7, #0]
 8004546:	4630      	mov	r0, r6
 8004548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800454c:	4e2e      	ldr	r6, [pc, #184]	; (8004608 <_malloc_r+0xe4>)
 800454e:	f000 ff35 	bl	80053bc <__malloc_lock>
 8004552:	6833      	ldr	r3, [r6, #0]
 8004554:	461c      	mov	r4, r3
 8004556:	bb34      	cbnz	r4, 80045a6 <_malloc_r+0x82>
 8004558:	4629      	mov	r1, r5
 800455a:	4638      	mov	r0, r7
 800455c:	f7ff ffc2 	bl	80044e4 <sbrk_aligned>
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	4604      	mov	r4, r0
 8004564:	d14d      	bne.n	8004602 <_malloc_r+0xde>
 8004566:	6834      	ldr	r4, [r6, #0]
 8004568:	4626      	mov	r6, r4
 800456a:	2e00      	cmp	r6, #0
 800456c:	d140      	bne.n	80045f0 <_malloc_r+0xcc>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	4631      	mov	r1, r6
 8004572:	4638      	mov	r0, r7
 8004574:	eb04 0803 	add.w	r8, r4, r3
 8004578:	f000 f848 	bl	800460c <_sbrk_r>
 800457c:	4580      	cmp	r8, r0
 800457e:	d13a      	bne.n	80045f6 <_malloc_r+0xd2>
 8004580:	6821      	ldr	r1, [r4, #0]
 8004582:	3503      	adds	r5, #3
 8004584:	1a6d      	subs	r5, r5, r1
 8004586:	f025 0503 	bic.w	r5, r5, #3
 800458a:	3508      	adds	r5, #8
 800458c:	2d0c      	cmp	r5, #12
 800458e:	bf38      	it	cc
 8004590:	250c      	movcc	r5, #12
 8004592:	4638      	mov	r0, r7
 8004594:	4629      	mov	r1, r5
 8004596:	f7ff ffa5 	bl	80044e4 <sbrk_aligned>
 800459a:	3001      	adds	r0, #1
 800459c:	d02b      	beq.n	80045f6 <_malloc_r+0xd2>
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	442b      	add	r3, r5
 80045a2:	6023      	str	r3, [r4, #0]
 80045a4:	e00e      	b.n	80045c4 <_malloc_r+0xa0>
 80045a6:	6822      	ldr	r2, [r4, #0]
 80045a8:	1b52      	subs	r2, r2, r5
 80045aa:	d41e      	bmi.n	80045ea <_malloc_r+0xc6>
 80045ac:	2a0b      	cmp	r2, #11
 80045ae:	d916      	bls.n	80045de <_malloc_r+0xba>
 80045b0:	1961      	adds	r1, r4, r5
 80045b2:	42a3      	cmp	r3, r4
 80045b4:	6025      	str	r5, [r4, #0]
 80045b6:	bf18      	it	ne
 80045b8:	6059      	strne	r1, [r3, #4]
 80045ba:	6863      	ldr	r3, [r4, #4]
 80045bc:	bf08      	it	eq
 80045be:	6031      	streq	r1, [r6, #0]
 80045c0:	5162      	str	r2, [r4, r5]
 80045c2:	604b      	str	r3, [r1, #4]
 80045c4:	4638      	mov	r0, r7
 80045c6:	f104 060b 	add.w	r6, r4, #11
 80045ca:	f000 fefd 	bl	80053c8 <__malloc_unlock>
 80045ce:	f026 0607 	bic.w	r6, r6, #7
 80045d2:	1d23      	adds	r3, r4, #4
 80045d4:	1af2      	subs	r2, r6, r3
 80045d6:	d0b6      	beq.n	8004546 <_malloc_r+0x22>
 80045d8:	1b9b      	subs	r3, r3, r6
 80045da:	50a3      	str	r3, [r4, r2]
 80045dc:	e7b3      	b.n	8004546 <_malloc_r+0x22>
 80045de:	6862      	ldr	r2, [r4, #4]
 80045e0:	42a3      	cmp	r3, r4
 80045e2:	bf0c      	ite	eq
 80045e4:	6032      	streq	r2, [r6, #0]
 80045e6:	605a      	strne	r2, [r3, #4]
 80045e8:	e7ec      	b.n	80045c4 <_malloc_r+0xa0>
 80045ea:	4623      	mov	r3, r4
 80045ec:	6864      	ldr	r4, [r4, #4]
 80045ee:	e7b2      	b.n	8004556 <_malloc_r+0x32>
 80045f0:	4634      	mov	r4, r6
 80045f2:	6876      	ldr	r6, [r6, #4]
 80045f4:	e7b9      	b.n	800456a <_malloc_r+0x46>
 80045f6:	230c      	movs	r3, #12
 80045f8:	4638      	mov	r0, r7
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	f000 fee4 	bl	80053c8 <__malloc_unlock>
 8004600:	e7a1      	b.n	8004546 <_malloc_r+0x22>
 8004602:	6025      	str	r5, [r4, #0]
 8004604:	e7de      	b.n	80045c4 <_malloc_r+0xa0>
 8004606:	bf00      	nop
 8004608:	20000118 	.word	0x20000118

0800460c <_sbrk_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	2300      	movs	r3, #0
 8004610:	4d05      	ldr	r5, [pc, #20]	; (8004628 <_sbrk_r+0x1c>)
 8004612:	4604      	mov	r4, r0
 8004614:	4608      	mov	r0, r1
 8004616:	602b      	str	r3, [r5, #0]
 8004618:	f7fd f8cc 	bl	80017b4 <_sbrk>
 800461c:	1c43      	adds	r3, r0, #1
 800461e:	d102      	bne.n	8004626 <_sbrk_r+0x1a>
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	b103      	cbz	r3, 8004626 <_sbrk_r+0x1a>
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	bd38      	pop	{r3, r4, r5, pc}
 8004628:	20000120 	.word	0x20000120

0800462c <strcpy>:
 800462c:	4603      	mov	r3, r0
 800462e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004632:	f803 2b01 	strb.w	r2, [r3], #1
 8004636:	2a00      	cmp	r2, #0
 8004638:	d1f9      	bne.n	800462e <strcpy+0x2>
 800463a:	4770      	bx	lr

0800463c <__assert_func>:
 800463c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800463e:	4614      	mov	r4, r2
 8004640:	461a      	mov	r2, r3
 8004642:	4b09      	ldr	r3, [pc, #36]	; (8004668 <__assert_func+0x2c>)
 8004644:	4605      	mov	r5, r0
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68d8      	ldr	r0, [r3, #12]
 800464a:	b14c      	cbz	r4, 8004660 <__assert_func+0x24>
 800464c:	4b07      	ldr	r3, [pc, #28]	; (800466c <__assert_func+0x30>)
 800464e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004652:	9100      	str	r1, [sp, #0]
 8004654:	462b      	mov	r3, r5
 8004656:	4906      	ldr	r1, [pc, #24]	; (8004670 <__assert_func+0x34>)
 8004658:	f000 fe88 	bl	800536c <fiprintf>
 800465c:	f001 fab0 	bl	8005bc0 <abort>
 8004660:	4b04      	ldr	r3, [pc, #16]	; (8004674 <__assert_func+0x38>)
 8004662:	461c      	mov	r4, r3
 8004664:	e7f3      	b.n	800464e <__assert_func+0x12>
 8004666:	bf00      	nop
 8004668:	2000000c 	.word	0x2000000c
 800466c:	080063ec 	.word	0x080063ec
 8004670:	080063f9 	.word	0x080063f9
 8004674:	08006427 	.word	0x08006427

08004678 <quorem>:
 8004678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800467c:	6903      	ldr	r3, [r0, #16]
 800467e:	690c      	ldr	r4, [r1, #16]
 8004680:	4607      	mov	r7, r0
 8004682:	42a3      	cmp	r3, r4
 8004684:	f2c0 8082 	blt.w	800478c <quorem+0x114>
 8004688:	3c01      	subs	r4, #1
 800468a:	f100 0514 	add.w	r5, r0, #20
 800468e:	f101 0814 	add.w	r8, r1, #20
 8004692:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004696:	9301      	str	r3, [sp, #4]
 8004698:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800469c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046a0:	3301      	adds	r3, #1
 80046a2:	429a      	cmp	r2, r3
 80046a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80046a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80046ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80046b0:	d331      	bcc.n	8004716 <quorem+0x9e>
 80046b2:	f04f 0e00 	mov.w	lr, #0
 80046b6:	4640      	mov	r0, r8
 80046b8:	46ac      	mov	ip, r5
 80046ba:	46f2      	mov	sl, lr
 80046bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80046c0:	b293      	uxth	r3, r2
 80046c2:	fb06 e303 	mla	r3, r6, r3, lr
 80046c6:	0c12      	lsrs	r2, r2, #16
 80046c8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	fb06 e202 	mla	r2, r6, r2, lr
 80046d2:	ebaa 0303 	sub.w	r3, sl, r3
 80046d6:	f8dc a000 	ldr.w	sl, [ip]
 80046da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80046de:	fa1f fa8a 	uxth.w	sl, sl
 80046e2:	4453      	add	r3, sl
 80046e4:	f8dc a000 	ldr.w	sl, [ip]
 80046e8:	b292      	uxth	r2, r2
 80046ea:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80046ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046f8:	4581      	cmp	r9, r0
 80046fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80046fe:	f84c 3b04 	str.w	r3, [ip], #4
 8004702:	d2db      	bcs.n	80046bc <quorem+0x44>
 8004704:	f855 300b 	ldr.w	r3, [r5, fp]
 8004708:	b92b      	cbnz	r3, 8004716 <quorem+0x9e>
 800470a:	9b01      	ldr	r3, [sp, #4]
 800470c:	3b04      	subs	r3, #4
 800470e:	429d      	cmp	r5, r3
 8004710:	461a      	mov	r2, r3
 8004712:	d32f      	bcc.n	8004774 <quorem+0xfc>
 8004714:	613c      	str	r4, [r7, #16]
 8004716:	4638      	mov	r0, r7
 8004718:	f7ff fdb0 	bl	800427c <__mcmp>
 800471c:	2800      	cmp	r0, #0
 800471e:	db25      	blt.n	800476c <quorem+0xf4>
 8004720:	4628      	mov	r0, r5
 8004722:	f04f 0c00 	mov.w	ip, #0
 8004726:	3601      	adds	r6, #1
 8004728:	f858 1b04 	ldr.w	r1, [r8], #4
 800472c:	f8d0 e000 	ldr.w	lr, [r0]
 8004730:	b28b      	uxth	r3, r1
 8004732:	ebac 0303 	sub.w	r3, ip, r3
 8004736:	fa1f f28e 	uxth.w	r2, lr
 800473a:	4413      	add	r3, r2
 800473c:	0c0a      	lsrs	r2, r1, #16
 800473e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004742:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004746:	b29b      	uxth	r3, r3
 8004748:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800474c:	45c1      	cmp	r9, r8
 800474e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004752:	f840 3b04 	str.w	r3, [r0], #4
 8004756:	d2e7      	bcs.n	8004728 <quorem+0xb0>
 8004758:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800475c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004760:	b922      	cbnz	r2, 800476c <quorem+0xf4>
 8004762:	3b04      	subs	r3, #4
 8004764:	429d      	cmp	r5, r3
 8004766:	461a      	mov	r2, r3
 8004768:	d30a      	bcc.n	8004780 <quorem+0x108>
 800476a:	613c      	str	r4, [r7, #16]
 800476c:	4630      	mov	r0, r6
 800476e:	b003      	add	sp, #12
 8004770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004774:	6812      	ldr	r2, [r2, #0]
 8004776:	3b04      	subs	r3, #4
 8004778:	2a00      	cmp	r2, #0
 800477a:	d1cb      	bne.n	8004714 <quorem+0x9c>
 800477c:	3c01      	subs	r4, #1
 800477e:	e7c6      	b.n	800470e <quorem+0x96>
 8004780:	6812      	ldr	r2, [r2, #0]
 8004782:	3b04      	subs	r3, #4
 8004784:	2a00      	cmp	r2, #0
 8004786:	d1f0      	bne.n	800476a <quorem+0xf2>
 8004788:	3c01      	subs	r4, #1
 800478a:	e7eb      	b.n	8004764 <quorem+0xec>
 800478c:	2000      	movs	r0, #0
 800478e:	e7ee      	b.n	800476e <quorem+0xf6>

08004790 <_dtoa_r>:
 8004790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004794:	4616      	mov	r6, r2
 8004796:	461f      	mov	r7, r3
 8004798:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800479a:	b099      	sub	sp, #100	; 0x64
 800479c:	4605      	mov	r5, r0
 800479e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80047a2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80047a6:	b974      	cbnz	r4, 80047c6 <_dtoa_r+0x36>
 80047a8:	2010      	movs	r0, #16
 80047aa:	f000 fdf1 	bl	8005390 <malloc>
 80047ae:	4602      	mov	r2, r0
 80047b0:	6268      	str	r0, [r5, #36]	; 0x24
 80047b2:	b920      	cbnz	r0, 80047be <_dtoa_r+0x2e>
 80047b4:	21ea      	movs	r1, #234	; 0xea
 80047b6:	4ba8      	ldr	r3, [pc, #672]	; (8004a58 <_dtoa_r+0x2c8>)
 80047b8:	48a8      	ldr	r0, [pc, #672]	; (8004a5c <_dtoa_r+0x2cc>)
 80047ba:	f7ff ff3f 	bl	800463c <__assert_func>
 80047be:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80047c2:	6004      	str	r4, [r0, #0]
 80047c4:	60c4      	str	r4, [r0, #12]
 80047c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80047c8:	6819      	ldr	r1, [r3, #0]
 80047ca:	b151      	cbz	r1, 80047e2 <_dtoa_r+0x52>
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	2301      	movs	r3, #1
 80047d0:	4093      	lsls	r3, r2
 80047d2:	604a      	str	r2, [r1, #4]
 80047d4:	608b      	str	r3, [r1, #8]
 80047d6:	4628      	mov	r0, r5
 80047d8:	f7ff fb12 	bl	8003e00 <_Bfree>
 80047dc:	2200      	movs	r2, #0
 80047de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	1e3b      	subs	r3, r7, #0
 80047e4:	bfaf      	iteee	ge
 80047e6:	2300      	movge	r3, #0
 80047e8:	2201      	movlt	r2, #1
 80047ea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80047ee:	9305      	strlt	r3, [sp, #20]
 80047f0:	bfa8      	it	ge
 80047f2:	f8c8 3000 	strge.w	r3, [r8]
 80047f6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80047fa:	4b99      	ldr	r3, [pc, #612]	; (8004a60 <_dtoa_r+0x2d0>)
 80047fc:	bfb8      	it	lt
 80047fe:	f8c8 2000 	strlt.w	r2, [r8]
 8004802:	ea33 0309 	bics.w	r3, r3, r9
 8004806:	d119      	bne.n	800483c <_dtoa_r+0xac>
 8004808:	f242 730f 	movw	r3, #9999	; 0x270f
 800480c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004814:	4333      	orrs	r3, r6
 8004816:	f000 857f 	beq.w	8005318 <_dtoa_r+0xb88>
 800481a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800481c:	b953      	cbnz	r3, 8004834 <_dtoa_r+0xa4>
 800481e:	4b91      	ldr	r3, [pc, #580]	; (8004a64 <_dtoa_r+0x2d4>)
 8004820:	e022      	b.n	8004868 <_dtoa_r+0xd8>
 8004822:	4b91      	ldr	r3, [pc, #580]	; (8004a68 <_dtoa_r+0x2d8>)
 8004824:	9303      	str	r3, [sp, #12]
 8004826:	3308      	adds	r3, #8
 8004828:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	9803      	ldr	r0, [sp, #12]
 800482e:	b019      	add	sp, #100	; 0x64
 8004830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004834:	4b8b      	ldr	r3, [pc, #556]	; (8004a64 <_dtoa_r+0x2d4>)
 8004836:	9303      	str	r3, [sp, #12]
 8004838:	3303      	adds	r3, #3
 800483a:	e7f5      	b.n	8004828 <_dtoa_r+0x98>
 800483c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004840:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004844:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004848:	2200      	movs	r2, #0
 800484a:	2300      	movs	r3, #0
 800484c:	f7fc f8a4 	bl	8000998 <__aeabi_dcmpeq>
 8004850:	4680      	mov	r8, r0
 8004852:	b158      	cbz	r0, 800486c <_dtoa_r+0xdc>
 8004854:	2301      	movs	r3, #1
 8004856:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 8558 	beq.w	8005312 <_dtoa_r+0xb82>
 8004862:	4882      	ldr	r0, [pc, #520]	; (8004a6c <_dtoa_r+0x2dc>)
 8004864:	6018      	str	r0, [r3, #0]
 8004866:	1e43      	subs	r3, r0, #1
 8004868:	9303      	str	r3, [sp, #12]
 800486a:	e7df      	b.n	800482c <_dtoa_r+0x9c>
 800486c:	ab16      	add	r3, sp, #88	; 0x58
 800486e:	9301      	str	r3, [sp, #4]
 8004870:	ab17      	add	r3, sp, #92	; 0x5c
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	4628      	mov	r0, r5
 8004876:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800487a:	f7ff fda7 	bl	80043cc <__d2b>
 800487e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004882:	4683      	mov	fp, r0
 8004884:	2c00      	cmp	r4, #0
 8004886:	d07f      	beq.n	8004988 <_dtoa_r+0x1f8>
 8004888:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800488c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800488e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004892:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004896:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800489a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800489e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80048a2:	2200      	movs	r2, #0
 80048a4:	4b72      	ldr	r3, [pc, #456]	; (8004a70 <_dtoa_r+0x2e0>)
 80048a6:	f7fb fc57 	bl	8000158 <__aeabi_dsub>
 80048aa:	a365      	add	r3, pc, #404	; (adr r3, 8004a40 <_dtoa_r+0x2b0>)
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	f7fb fe0a 	bl	80004c8 <__aeabi_dmul>
 80048b4:	a364      	add	r3, pc, #400	; (adr r3, 8004a48 <_dtoa_r+0x2b8>)
 80048b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ba:	f7fb fc4f 	bl	800015c <__adddf3>
 80048be:	4606      	mov	r6, r0
 80048c0:	4620      	mov	r0, r4
 80048c2:	460f      	mov	r7, r1
 80048c4:	f7fb fd96 	bl	80003f4 <__aeabi_i2d>
 80048c8:	a361      	add	r3, pc, #388	; (adr r3, 8004a50 <_dtoa_r+0x2c0>)
 80048ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ce:	f7fb fdfb 	bl	80004c8 <__aeabi_dmul>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	4630      	mov	r0, r6
 80048d8:	4639      	mov	r1, r7
 80048da:	f7fb fc3f 	bl	800015c <__adddf3>
 80048de:	4606      	mov	r6, r0
 80048e0:	460f      	mov	r7, r1
 80048e2:	f7fc f88b 	bl	80009fc <__aeabi_d2iz>
 80048e6:	2200      	movs	r2, #0
 80048e8:	4682      	mov	sl, r0
 80048ea:	2300      	movs	r3, #0
 80048ec:	4630      	mov	r0, r6
 80048ee:	4639      	mov	r1, r7
 80048f0:	f7fc f85c 	bl	80009ac <__aeabi_dcmplt>
 80048f4:	b148      	cbz	r0, 800490a <_dtoa_r+0x17a>
 80048f6:	4650      	mov	r0, sl
 80048f8:	f7fb fd7c 	bl	80003f4 <__aeabi_i2d>
 80048fc:	4632      	mov	r2, r6
 80048fe:	463b      	mov	r3, r7
 8004900:	f7fc f84a 	bl	8000998 <__aeabi_dcmpeq>
 8004904:	b908      	cbnz	r0, 800490a <_dtoa_r+0x17a>
 8004906:	f10a 3aff 	add.w	sl, sl, #4294967295
 800490a:	f1ba 0f16 	cmp.w	sl, #22
 800490e:	d858      	bhi.n	80049c2 <_dtoa_r+0x232>
 8004910:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004914:	4b57      	ldr	r3, [pc, #348]	; (8004a74 <_dtoa_r+0x2e4>)
 8004916:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491e:	f7fc f845 	bl	80009ac <__aeabi_dcmplt>
 8004922:	2800      	cmp	r0, #0
 8004924:	d04f      	beq.n	80049c6 <_dtoa_r+0x236>
 8004926:	2300      	movs	r3, #0
 8004928:	f10a 3aff 	add.w	sl, sl, #4294967295
 800492c:	930f      	str	r3, [sp, #60]	; 0x3c
 800492e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004930:	1b1c      	subs	r4, r3, r4
 8004932:	1e63      	subs	r3, r4, #1
 8004934:	9309      	str	r3, [sp, #36]	; 0x24
 8004936:	bf49      	itett	mi
 8004938:	f1c4 0301 	rsbmi	r3, r4, #1
 800493c:	2300      	movpl	r3, #0
 800493e:	9306      	strmi	r3, [sp, #24]
 8004940:	2300      	movmi	r3, #0
 8004942:	bf54      	ite	pl
 8004944:	9306      	strpl	r3, [sp, #24]
 8004946:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004948:	f1ba 0f00 	cmp.w	sl, #0
 800494c:	db3d      	blt.n	80049ca <_dtoa_r+0x23a>
 800494e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004950:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004954:	4453      	add	r3, sl
 8004956:	9309      	str	r3, [sp, #36]	; 0x24
 8004958:	2300      	movs	r3, #0
 800495a:	930a      	str	r3, [sp, #40]	; 0x28
 800495c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800495e:	2b09      	cmp	r3, #9
 8004960:	f200 808c 	bhi.w	8004a7c <_dtoa_r+0x2ec>
 8004964:	2b05      	cmp	r3, #5
 8004966:	bfc4      	itt	gt
 8004968:	3b04      	subgt	r3, #4
 800496a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800496c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800496e:	bfc8      	it	gt
 8004970:	2400      	movgt	r4, #0
 8004972:	f1a3 0302 	sub.w	r3, r3, #2
 8004976:	bfd8      	it	le
 8004978:	2401      	movle	r4, #1
 800497a:	2b03      	cmp	r3, #3
 800497c:	f200 808a 	bhi.w	8004a94 <_dtoa_r+0x304>
 8004980:	e8df f003 	tbb	[pc, r3]
 8004984:	5b4d4f2d 	.word	0x5b4d4f2d
 8004988:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800498c:	441c      	add	r4, r3
 800498e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004992:	2b20      	cmp	r3, #32
 8004994:	bfc3      	ittte	gt
 8004996:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800499a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800499e:	fa09 f303 	lslgt.w	r3, r9, r3
 80049a2:	f1c3 0320 	rsble	r3, r3, #32
 80049a6:	bfc6      	itte	gt
 80049a8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80049ac:	4318      	orrgt	r0, r3
 80049ae:	fa06 f003 	lslle.w	r0, r6, r3
 80049b2:	f7fb fd0f 	bl	80003d4 <__aeabi_ui2d>
 80049b6:	2301      	movs	r3, #1
 80049b8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80049bc:	3c01      	subs	r4, #1
 80049be:	9313      	str	r3, [sp, #76]	; 0x4c
 80049c0:	e76f      	b.n	80048a2 <_dtoa_r+0x112>
 80049c2:	2301      	movs	r3, #1
 80049c4:	e7b2      	b.n	800492c <_dtoa_r+0x19c>
 80049c6:	900f      	str	r0, [sp, #60]	; 0x3c
 80049c8:	e7b1      	b.n	800492e <_dtoa_r+0x19e>
 80049ca:	9b06      	ldr	r3, [sp, #24]
 80049cc:	eba3 030a 	sub.w	r3, r3, sl
 80049d0:	9306      	str	r3, [sp, #24]
 80049d2:	f1ca 0300 	rsb	r3, sl, #0
 80049d6:	930a      	str	r3, [sp, #40]	; 0x28
 80049d8:	2300      	movs	r3, #0
 80049da:	930e      	str	r3, [sp, #56]	; 0x38
 80049dc:	e7be      	b.n	800495c <_dtoa_r+0x1cc>
 80049de:	2300      	movs	r3, #0
 80049e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80049e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	dc58      	bgt.n	8004a9a <_dtoa_r+0x30a>
 80049e8:	f04f 0901 	mov.w	r9, #1
 80049ec:	464b      	mov	r3, r9
 80049ee:	f8cd 9020 	str.w	r9, [sp, #32]
 80049f2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80049f6:	2200      	movs	r2, #0
 80049f8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80049fa:	6042      	str	r2, [r0, #4]
 80049fc:	2204      	movs	r2, #4
 80049fe:	f102 0614 	add.w	r6, r2, #20
 8004a02:	429e      	cmp	r6, r3
 8004a04:	6841      	ldr	r1, [r0, #4]
 8004a06:	d94e      	bls.n	8004aa6 <_dtoa_r+0x316>
 8004a08:	4628      	mov	r0, r5
 8004a0a:	f7ff f9b9 	bl	8003d80 <_Balloc>
 8004a0e:	9003      	str	r0, [sp, #12]
 8004a10:	2800      	cmp	r0, #0
 8004a12:	d14c      	bne.n	8004aae <_dtoa_r+0x31e>
 8004a14:	4602      	mov	r2, r0
 8004a16:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004a1a:	4b17      	ldr	r3, [pc, #92]	; (8004a78 <_dtoa_r+0x2e8>)
 8004a1c:	e6cc      	b.n	80047b8 <_dtoa_r+0x28>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e7de      	b.n	80049e0 <_dtoa_r+0x250>
 8004a22:	2300      	movs	r3, #0
 8004a24:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a26:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a28:	eb0a 0903 	add.w	r9, sl, r3
 8004a2c:	f109 0301 	add.w	r3, r9, #1
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	9308      	str	r3, [sp, #32]
 8004a34:	bfb8      	it	lt
 8004a36:	2301      	movlt	r3, #1
 8004a38:	e7dd      	b.n	80049f6 <_dtoa_r+0x266>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e7f2      	b.n	8004a24 <_dtoa_r+0x294>
 8004a3e:	bf00      	nop
 8004a40:	636f4361 	.word	0x636f4361
 8004a44:	3fd287a7 	.word	0x3fd287a7
 8004a48:	8b60c8b3 	.word	0x8b60c8b3
 8004a4c:	3fc68a28 	.word	0x3fc68a28
 8004a50:	509f79fb 	.word	0x509f79fb
 8004a54:	3fd34413 	.word	0x3fd34413
 8004a58:	08006268 	.word	0x08006268
 8004a5c:	08006437 	.word	0x08006437
 8004a60:	7ff00000 	.word	0x7ff00000
 8004a64:	08006431 	.word	0x08006431
 8004a68:	08006428 	.word	0x08006428
 8004a6c:	08006436 	.word	0x08006436
 8004a70:	3ff80000 	.word	0x3ff80000
 8004a74:	08006318 	.word	0x08006318
 8004a78:	080062db 	.word	0x080062db
 8004a7c:	2401      	movs	r4, #1
 8004a7e:	2300      	movs	r3, #0
 8004a80:	940b      	str	r4, [sp, #44]	; 0x2c
 8004a82:	9322      	str	r3, [sp, #136]	; 0x88
 8004a84:	f04f 39ff 	mov.w	r9, #4294967295
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2312      	movs	r3, #18
 8004a8c:	f8cd 9020 	str.w	r9, [sp, #32]
 8004a90:	9223      	str	r2, [sp, #140]	; 0x8c
 8004a92:	e7b0      	b.n	80049f6 <_dtoa_r+0x266>
 8004a94:	2301      	movs	r3, #1
 8004a96:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a98:	e7f4      	b.n	8004a84 <_dtoa_r+0x2f4>
 8004a9a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004a9e:	464b      	mov	r3, r9
 8004aa0:	f8cd 9020 	str.w	r9, [sp, #32]
 8004aa4:	e7a7      	b.n	80049f6 <_dtoa_r+0x266>
 8004aa6:	3101      	adds	r1, #1
 8004aa8:	6041      	str	r1, [r0, #4]
 8004aaa:	0052      	lsls	r2, r2, #1
 8004aac:	e7a7      	b.n	80049fe <_dtoa_r+0x26e>
 8004aae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ab0:	9a03      	ldr	r2, [sp, #12]
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	9b08      	ldr	r3, [sp, #32]
 8004ab6:	2b0e      	cmp	r3, #14
 8004ab8:	f200 80a8 	bhi.w	8004c0c <_dtoa_r+0x47c>
 8004abc:	2c00      	cmp	r4, #0
 8004abe:	f000 80a5 	beq.w	8004c0c <_dtoa_r+0x47c>
 8004ac2:	f1ba 0f00 	cmp.w	sl, #0
 8004ac6:	dd34      	ble.n	8004b32 <_dtoa_r+0x3a2>
 8004ac8:	4a9a      	ldr	r2, [pc, #616]	; (8004d34 <_dtoa_r+0x5a4>)
 8004aca:	f00a 030f 	and.w	r3, sl, #15
 8004ace:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004ad2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004ad6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ada:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004ade:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004ae2:	d016      	beq.n	8004b12 <_dtoa_r+0x382>
 8004ae4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ae8:	4b93      	ldr	r3, [pc, #588]	; (8004d38 <_dtoa_r+0x5a8>)
 8004aea:	2703      	movs	r7, #3
 8004aec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004af0:	f7fb fe14 	bl	800071c <__aeabi_ddiv>
 8004af4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004af8:	f004 040f 	and.w	r4, r4, #15
 8004afc:	4e8e      	ldr	r6, [pc, #568]	; (8004d38 <_dtoa_r+0x5a8>)
 8004afe:	b954      	cbnz	r4, 8004b16 <_dtoa_r+0x386>
 8004b00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004b04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b08:	f7fb fe08 	bl	800071c <__aeabi_ddiv>
 8004b0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b10:	e029      	b.n	8004b66 <_dtoa_r+0x3d6>
 8004b12:	2702      	movs	r7, #2
 8004b14:	e7f2      	b.n	8004afc <_dtoa_r+0x36c>
 8004b16:	07e1      	lsls	r1, r4, #31
 8004b18:	d508      	bpl.n	8004b2c <_dtoa_r+0x39c>
 8004b1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b1e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b22:	f7fb fcd1 	bl	80004c8 <__aeabi_dmul>
 8004b26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b2a:	3701      	adds	r7, #1
 8004b2c:	1064      	asrs	r4, r4, #1
 8004b2e:	3608      	adds	r6, #8
 8004b30:	e7e5      	b.n	8004afe <_dtoa_r+0x36e>
 8004b32:	f000 80a5 	beq.w	8004c80 <_dtoa_r+0x4f0>
 8004b36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b3a:	f1ca 0400 	rsb	r4, sl, #0
 8004b3e:	4b7d      	ldr	r3, [pc, #500]	; (8004d34 <_dtoa_r+0x5a4>)
 8004b40:	f004 020f 	and.w	r2, r4, #15
 8004b44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4c:	f7fb fcbc 	bl	80004c8 <__aeabi_dmul>
 8004b50:	2702      	movs	r7, #2
 8004b52:	2300      	movs	r3, #0
 8004b54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b58:	4e77      	ldr	r6, [pc, #476]	; (8004d38 <_dtoa_r+0x5a8>)
 8004b5a:	1124      	asrs	r4, r4, #4
 8004b5c:	2c00      	cmp	r4, #0
 8004b5e:	f040 8084 	bne.w	8004c6a <_dtoa_r+0x4da>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1d2      	bne.n	8004b0c <_dtoa_r+0x37c>
 8004b66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 808b 	beq.w	8004c84 <_dtoa_r+0x4f4>
 8004b6e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004b72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004b76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	4b6f      	ldr	r3, [pc, #444]	; (8004d3c <_dtoa_r+0x5ac>)
 8004b7e:	f7fb ff15 	bl	80009ac <__aeabi_dcmplt>
 8004b82:	2800      	cmp	r0, #0
 8004b84:	d07e      	beq.n	8004c84 <_dtoa_r+0x4f4>
 8004b86:	9b08      	ldr	r3, [sp, #32]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d07b      	beq.n	8004c84 <_dtoa_r+0x4f4>
 8004b8c:	f1b9 0f00 	cmp.w	r9, #0
 8004b90:	dd38      	ble.n	8004c04 <_dtoa_r+0x474>
 8004b92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b96:	2200      	movs	r2, #0
 8004b98:	4b69      	ldr	r3, [pc, #420]	; (8004d40 <_dtoa_r+0x5b0>)
 8004b9a:	f7fb fc95 	bl	80004c8 <__aeabi_dmul>
 8004b9e:	464c      	mov	r4, r9
 8004ba0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ba4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004ba8:	3701      	adds	r7, #1
 8004baa:	4638      	mov	r0, r7
 8004bac:	f7fb fc22 	bl	80003f4 <__aeabi_i2d>
 8004bb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bb4:	f7fb fc88 	bl	80004c8 <__aeabi_dmul>
 8004bb8:	2200      	movs	r2, #0
 8004bba:	4b62      	ldr	r3, [pc, #392]	; (8004d44 <_dtoa_r+0x5b4>)
 8004bbc:	f7fb face 	bl	800015c <__adddf3>
 8004bc0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004bc4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004bc8:	9611      	str	r6, [sp, #68]	; 0x44
 8004bca:	2c00      	cmp	r4, #0
 8004bcc:	d15d      	bne.n	8004c8a <_dtoa_r+0x4fa>
 8004bce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	4b5c      	ldr	r3, [pc, #368]	; (8004d48 <_dtoa_r+0x5b8>)
 8004bd6:	f7fb fabf 	bl	8000158 <__aeabi_dsub>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004be2:	4633      	mov	r3, r6
 8004be4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004be6:	f7fb feff 	bl	80009e8 <__aeabi_dcmpgt>
 8004bea:	2800      	cmp	r0, #0
 8004bec:	f040 829c 	bne.w	8005128 <_dtoa_r+0x998>
 8004bf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004bf6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004bfa:	f7fb fed7 	bl	80009ac <__aeabi_dcmplt>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	f040 8290 	bne.w	8005124 <_dtoa_r+0x994>
 8004c04:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004c08:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f2c0 8152 	blt.w	8004eb8 <_dtoa_r+0x728>
 8004c14:	f1ba 0f0e 	cmp.w	sl, #14
 8004c18:	f300 814e 	bgt.w	8004eb8 <_dtoa_r+0x728>
 8004c1c:	4b45      	ldr	r3, [pc, #276]	; (8004d34 <_dtoa_r+0x5a4>)
 8004c1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004c22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c26:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004c2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f280 80db 	bge.w	8004de8 <_dtoa_r+0x658>
 8004c32:	9b08      	ldr	r3, [sp, #32]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f300 80d7 	bgt.w	8004de8 <_dtoa_r+0x658>
 8004c3a:	f040 8272 	bne.w	8005122 <_dtoa_r+0x992>
 8004c3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c42:	2200      	movs	r2, #0
 8004c44:	4b40      	ldr	r3, [pc, #256]	; (8004d48 <_dtoa_r+0x5b8>)
 8004c46:	f7fb fc3f 	bl	80004c8 <__aeabi_dmul>
 8004c4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c4e:	f7fb fec1 	bl	80009d4 <__aeabi_dcmpge>
 8004c52:	9c08      	ldr	r4, [sp, #32]
 8004c54:	4626      	mov	r6, r4
 8004c56:	2800      	cmp	r0, #0
 8004c58:	f040 8248 	bne.w	80050ec <_dtoa_r+0x95c>
 8004c5c:	2331      	movs	r3, #49	; 0x31
 8004c5e:	9f03      	ldr	r7, [sp, #12]
 8004c60:	f10a 0a01 	add.w	sl, sl, #1
 8004c64:	f807 3b01 	strb.w	r3, [r7], #1
 8004c68:	e244      	b.n	80050f4 <_dtoa_r+0x964>
 8004c6a:	07e2      	lsls	r2, r4, #31
 8004c6c:	d505      	bpl.n	8004c7a <_dtoa_r+0x4ea>
 8004c6e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004c72:	f7fb fc29 	bl	80004c8 <__aeabi_dmul>
 8004c76:	2301      	movs	r3, #1
 8004c78:	3701      	adds	r7, #1
 8004c7a:	1064      	asrs	r4, r4, #1
 8004c7c:	3608      	adds	r6, #8
 8004c7e:	e76d      	b.n	8004b5c <_dtoa_r+0x3cc>
 8004c80:	2702      	movs	r7, #2
 8004c82:	e770      	b.n	8004b66 <_dtoa_r+0x3d6>
 8004c84:	46d0      	mov	r8, sl
 8004c86:	9c08      	ldr	r4, [sp, #32]
 8004c88:	e78f      	b.n	8004baa <_dtoa_r+0x41a>
 8004c8a:	9903      	ldr	r1, [sp, #12]
 8004c8c:	4b29      	ldr	r3, [pc, #164]	; (8004d34 <_dtoa_r+0x5a4>)
 8004c8e:	4421      	add	r1, r4
 8004c90:	9112      	str	r1, [sp, #72]	; 0x48
 8004c92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004c98:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004c9c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ca0:	2900      	cmp	r1, #0
 8004ca2:	d055      	beq.n	8004d50 <_dtoa_r+0x5c0>
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	4929      	ldr	r1, [pc, #164]	; (8004d4c <_dtoa_r+0x5bc>)
 8004ca8:	f7fb fd38 	bl	800071c <__aeabi_ddiv>
 8004cac:	463b      	mov	r3, r7
 8004cae:	4632      	mov	r2, r6
 8004cb0:	f7fb fa52 	bl	8000158 <__aeabi_dsub>
 8004cb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004cb8:	9f03      	ldr	r7, [sp, #12]
 8004cba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cbe:	f7fb fe9d 	bl	80009fc <__aeabi_d2iz>
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	f7fb fb96 	bl	80003f4 <__aeabi_i2d>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cd0:	f7fb fa42 	bl	8000158 <__aeabi_dsub>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	3430      	adds	r4, #48	; 0x30
 8004cda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004cde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ce2:	f807 4b01 	strb.w	r4, [r7], #1
 8004ce6:	f7fb fe61 	bl	80009ac <__aeabi_dcmplt>
 8004cea:	2800      	cmp	r0, #0
 8004cec:	d174      	bne.n	8004dd8 <_dtoa_r+0x648>
 8004cee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	4911      	ldr	r1, [pc, #68]	; (8004d3c <_dtoa_r+0x5ac>)
 8004cf6:	f7fb fa2f 	bl	8000158 <__aeabi_dsub>
 8004cfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004cfe:	f7fb fe55 	bl	80009ac <__aeabi_dcmplt>
 8004d02:	2800      	cmp	r0, #0
 8004d04:	f040 80b7 	bne.w	8004e76 <_dtoa_r+0x6e6>
 8004d08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d0a:	429f      	cmp	r7, r3
 8004d0c:	f43f af7a 	beq.w	8004c04 <_dtoa_r+0x474>
 8004d10:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d14:	2200      	movs	r2, #0
 8004d16:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <_dtoa_r+0x5b0>)
 8004d18:	f7fb fbd6 	bl	80004c8 <__aeabi_dmul>
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d26:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <_dtoa_r+0x5b0>)
 8004d28:	f7fb fbce 	bl	80004c8 <__aeabi_dmul>
 8004d2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d30:	e7c3      	b.n	8004cba <_dtoa_r+0x52a>
 8004d32:	bf00      	nop
 8004d34:	08006318 	.word	0x08006318
 8004d38:	080062f0 	.word	0x080062f0
 8004d3c:	3ff00000 	.word	0x3ff00000
 8004d40:	40240000 	.word	0x40240000
 8004d44:	401c0000 	.word	0x401c0000
 8004d48:	40140000 	.word	0x40140000
 8004d4c:	3fe00000 	.word	0x3fe00000
 8004d50:	4630      	mov	r0, r6
 8004d52:	4639      	mov	r1, r7
 8004d54:	f7fb fbb8 	bl	80004c8 <__aeabi_dmul>
 8004d58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d5a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d5e:	9c03      	ldr	r4, [sp, #12]
 8004d60:	9314      	str	r3, [sp, #80]	; 0x50
 8004d62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d66:	f7fb fe49 	bl	80009fc <__aeabi_d2iz>
 8004d6a:	9015      	str	r0, [sp, #84]	; 0x54
 8004d6c:	f7fb fb42 	bl	80003f4 <__aeabi_i2d>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d78:	f7fb f9ee 	bl	8000158 <__aeabi_dsub>
 8004d7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d7e:	4606      	mov	r6, r0
 8004d80:	3330      	adds	r3, #48	; 0x30
 8004d82:	f804 3b01 	strb.w	r3, [r4], #1
 8004d86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d88:	460f      	mov	r7, r1
 8004d8a:	429c      	cmp	r4, r3
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	d124      	bne.n	8004ddc <_dtoa_r+0x64c>
 8004d92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d96:	4bb0      	ldr	r3, [pc, #704]	; (8005058 <_dtoa_r+0x8c8>)
 8004d98:	f7fb f9e0 	bl	800015c <__adddf3>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4630      	mov	r0, r6
 8004da2:	4639      	mov	r1, r7
 8004da4:	f7fb fe20 	bl	80009e8 <__aeabi_dcmpgt>
 8004da8:	2800      	cmp	r0, #0
 8004daa:	d163      	bne.n	8004e74 <_dtoa_r+0x6e4>
 8004dac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004db0:	2000      	movs	r0, #0
 8004db2:	49a9      	ldr	r1, [pc, #676]	; (8005058 <_dtoa_r+0x8c8>)
 8004db4:	f7fb f9d0 	bl	8000158 <__aeabi_dsub>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	4639      	mov	r1, r7
 8004dc0:	f7fb fdf4 	bl	80009ac <__aeabi_dcmplt>
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	f43f af1d 	beq.w	8004c04 <_dtoa_r+0x474>
 8004dca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004dcc:	1e7b      	subs	r3, r7, #1
 8004dce:	9314      	str	r3, [sp, #80]	; 0x50
 8004dd0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004dd4:	2b30      	cmp	r3, #48	; 0x30
 8004dd6:	d0f8      	beq.n	8004dca <_dtoa_r+0x63a>
 8004dd8:	46c2      	mov	sl, r8
 8004dda:	e03b      	b.n	8004e54 <_dtoa_r+0x6c4>
 8004ddc:	4b9f      	ldr	r3, [pc, #636]	; (800505c <_dtoa_r+0x8cc>)
 8004dde:	f7fb fb73 	bl	80004c8 <__aeabi_dmul>
 8004de2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004de6:	e7bc      	b.n	8004d62 <_dtoa_r+0x5d2>
 8004de8:	9f03      	ldr	r7, [sp, #12]
 8004dea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004dee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004df2:	4640      	mov	r0, r8
 8004df4:	4649      	mov	r1, r9
 8004df6:	f7fb fc91 	bl	800071c <__aeabi_ddiv>
 8004dfa:	f7fb fdff 	bl	80009fc <__aeabi_d2iz>
 8004dfe:	4604      	mov	r4, r0
 8004e00:	f7fb faf8 	bl	80003f4 <__aeabi_i2d>
 8004e04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e08:	f7fb fb5e 	bl	80004c8 <__aeabi_dmul>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4640      	mov	r0, r8
 8004e12:	4649      	mov	r1, r9
 8004e14:	f7fb f9a0 	bl	8000158 <__aeabi_dsub>
 8004e18:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004e1c:	f807 6b01 	strb.w	r6, [r7], #1
 8004e20:	9e03      	ldr	r6, [sp, #12]
 8004e22:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004e26:	1bbe      	subs	r6, r7, r6
 8004e28:	45b4      	cmp	ip, r6
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	d136      	bne.n	8004e9e <_dtoa_r+0x70e>
 8004e30:	f7fb f994 	bl	800015c <__adddf3>
 8004e34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e38:	4680      	mov	r8, r0
 8004e3a:	4689      	mov	r9, r1
 8004e3c:	f7fb fdd4 	bl	80009e8 <__aeabi_dcmpgt>
 8004e40:	bb58      	cbnz	r0, 8004e9a <_dtoa_r+0x70a>
 8004e42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e46:	4640      	mov	r0, r8
 8004e48:	4649      	mov	r1, r9
 8004e4a:	f7fb fda5 	bl	8000998 <__aeabi_dcmpeq>
 8004e4e:	b108      	cbz	r0, 8004e54 <_dtoa_r+0x6c4>
 8004e50:	07e1      	lsls	r1, r4, #31
 8004e52:	d422      	bmi.n	8004e9a <_dtoa_r+0x70a>
 8004e54:	4628      	mov	r0, r5
 8004e56:	4659      	mov	r1, fp
 8004e58:	f7fe ffd2 	bl	8003e00 <_Bfree>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	703b      	strb	r3, [r7, #0]
 8004e60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004e62:	f10a 0001 	add.w	r0, sl, #1
 8004e66:	6018      	str	r0, [r3, #0]
 8004e68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f43f acde 	beq.w	800482c <_dtoa_r+0x9c>
 8004e70:	601f      	str	r7, [r3, #0]
 8004e72:	e4db      	b.n	800482c <_dtoa_r+0x9c>
 8004e74:	4627      	mov	r7, r4
 8004e76:	463b      	mov	r3, r7
 8004e78:	461f      	mov	r7, r3
 8004e7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e7e:	2a39      	cmp	r2, #57	; 0x39
 8004e80:	d107      	bne.n	8004e92 <_dtoa_r+0x702>
 8004e82:	9a03      	ldr	r2, [sp, #12]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d1f7      	bne.n	8004e78 <_dtoa_r+0x6e8>
 8004e88:	2230      	movs	r2, #48	; 0x30
 8004e8a:	9903      	ldr	r1, [sp, #12]
 8004e8c:	f108 0801 	add.w	r8, r8, #1
 8004e90:	700a      	strb	r2, [r1, #0]
 8004e92:	781a      	ldrb	r2, [r3, #0]
 8004e94:	3201      	adds	r2, #1
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	e79e      	b.n	8004dd8 <_dtoa_r+0x648>
 8004e9a:	46d0      	mov	r8, sl
 8004e9c:	e7eb      	b.n	8004e76 <_dtoa_r+0x6e6>
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	4b6e      	ldr	r3, [pc, #440]	; (800505c <_dtoa_r+0x8cc>)
 8004ea2:	f7fb fb11 	bl	80004c8 <__aeabi_dmul>
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	4680      	mov	r8, r0
 8004eac:	4689      	mov	r9, r1
 8004eae:	f7fb fd73 	bl	8000998 <__aeabi_dcmpeq>
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	d09b      	beq.n	8004dee <_dtoa_r+0x65e>
 8004eb6:	e7cd      	b.n	8004e54 <_dtoa_r+0x6c4>
 8004eb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004eba:	2a00      	cmp	r2, #0
 8004ebc:	f000 80d0 	beq.w	8005060 <_dtoa_r+0x8d0>
 8004ec0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004ec2:	2a01      	cmp	r2, #1
 8004ec4:	f300 80ae 	bgt.w	8005024 <_dtoa_r+0x894>
 8004ec8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004eca:	2a00      	cmp	r2, #0
 8004ecc:	f000 80a6 	beq.w	800501c <_dtoa_r+0x88c>
 8004ed0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004ed4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004ed6:	9f06      	ldr	r7, [sp, #24]
 8004ed8:	9a06      	ldr	r2, [sp, #24]
 8004eda:	2101      	movs	r1, #1
 8004edc:	441a      	add	r2, r3
 8004ede:	9206      	str	r2, [sp, #24]
 8004ee0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	441a      	add	r2, r3
 8004ee6:	9209      	str	r2, [sp, #36]	; 0x24
 8004ee8:	f7ff f840 	bl	8003f6c <__i2b>
 8004eec:	4606      	mov	r6, r0
 8004eee:	2f00      	cmp	r7, #0
 8004ef0:	dd0c      	ble.n	8004f0c <_dtoa_r+0x77c>
 8004ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	dd09      	ble.n	8004f0c <_dtoa_r+0x77c>
 8004ef8:	42bb      	cmp	r3, r7
 8004efa:	bfa8      	it	ge
 8004efc:	463b      	movge	r3, r7
 8004efe:	9a06      	ldr	r2, [sp, #24]
 8004f00:	1aff      	subs	r7, r7, r3
 8004f02:	1ad2      	subs	r2, r2, r3
 8004f04:	9206      	str	r2, [sp, #24]
 8004f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f0e:	b1f3      	cbz	r3, 8004f4e <_dtoa_r+0x7be>
 8004f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 80a8 	beq.w	8005068 <_dtoa_r+0x8d8>
 8004f18:	2c00      	cmp	r4, #0
 8004f1a:	dd10      	ble.n	8004f3e <_dtoa_r+0x7ae>
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	4622      	mov	r2, r4
 8004f20:	4628      	mov	r0, r5
 8004f22:	f7ff f8e1 	bl	80040e8 <__pow5mult>
 8004f26:	465a      	mov	r2, fp
 8004f28:	4601      	mov	r1, r0
 8004f2a:	4606      	mov	r6, r0
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	f7ff f833 	bl	8003f98 <__multiply>
 8004f32:	4680      	mov	r8, r0
 8004f34:	4659      	mov	r1, fp
 8004f36:	4628      	mov	r0, r5
 8004f38:	f7fe ff62 	bl	8003e00 <_Bfree>
 8004f3c:	46c3      	mov	fp, r8
 8004f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f40:	1b1a      	subs	r2, r3, r4
 8004f42:	d004      	beq.n	8004f4e <_dtoa_r+0x7be>
 8004f44:	4659      	mov	r1, fp
 8004f46:	4628      	mov	r0, r5
 8004f48:	f7ff f8ce 	bl	80040e8 <__pow5mult>
 8004f4c:	4683      	mov	fp, r0
 8004f4e:	2101      	movs	r1, #1
 8004f50:	4628      	mov	r0, r5
 8004f52:	f7ff f80b 	bl	8003f6c <__i2b>
 8004f56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f58:	4604      	mov	r4, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f340 8086 	ble.w	800506c <_dtoa_r+0x8dc>
 8004f60:	461a      	mov	r2, r3
 8004f62:	4601      	mov	r1, r0
 8004f64:	4628      	mov	r0, r5
 8004f66:	f7ff f8bf 	bl	80040e8 <__pow5mult>
 8004f6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	dd7f      	ble.n	8005072 <_dtoa_r+0x8e2>
 8004f72:	f04f 0800 	mov.w	r8, #0
 8004f76:	6923      	ldr	r3, [r4, #16]
 8004f78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f7c:	6918      	ldr	r0, [r3, #16]
 8004f7e:	f7fe ffa7 	bl	8003ed0 <__hi0bits>
 8004f82:	f1c0 0020 	rsb	r0, r0, #32
 8004f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f88:	4418      	add	r0, r3
 8004f8a:	f010 001f 	ands.w	r0, r0, #31
 8004f8e:	f000 8092 	beq.w	80050b6 <_dtoa_r+0x926>
 8004f92:	f1c0 0320 	rsb	r3, r0, #32
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	f340 808a 	ble.w	80050b0 <_dtoa_r+0x920>
 8004f9c:	f1c0 001c 	rsb	r0, r0, #28
 8004fa0:	9b06      	ldr	r3, [sp, #24]
 8004fa2:	4407      	add	r7, r0
 8004fa4:	4403      	add	r3, r0
 8004fa6:	9306      	str	r3, [sp, #24]
 8004fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004faa:	4403      	add	r3, r0
 8004fac:	9309      	str	r3, [sp, #36]	; 0x24
 8004fae:	9b06      	ldr	r3, [sp, #24]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	dd05      	ble.n	8004fc0 <_dtoa_r+0x830>
 8004fb4:	4659      	mov	r1, fp
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	4628      	mov	r0, r5
 8004fba:	f7ff f8ef 	bl	800419c <__lshift>
 8004fbe:	4683      	mov	fp, r0
 8004fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	dd05      	ble.n	8004fd2 <_dtoa_r+0x842>
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4628      	mov	r0, r5
 8004fcc:	f7ff f8e6 	bl	800419c <__lshift>
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d070      	beq.n	80050ba <_dtoa_r+0x92a>
 8004fd8:	4621      	mov	r1, r4
 8004fda:	4658      	mov	r0, fp
 8004fdc:	f7ff f94e 	bl	800427c <__mcmp>
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	da6a      	bge.n	80050ba <_dtoa_r+0x92a>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	4659      	mov	r1, fp
 8004fe8:	220a      	movs	r2, #10
 8004fea:	4628      	mov	r0, r5
 8004fec:	f7fe ff2a 	bl	8003e44 <__multadd>
 8004ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ff2:	4683      	mov	fp, r0
 8004ff4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 8194 	beq.w	8005326 <_dtoa_r+0xb96>
 8004ffe:	4631      	mov	r1, r6
 8005000:	2300      	movs	r3, #0
 8005002:	220a      	movs	r2, #10
 8005004:	4628      	mov	r0, r5
 8005006:	f7fe ff1d 	bl	8003e44 <__multadd>
 800500a:	f1b9 0f00 	cmp.w	r9, #0
 800500e:	4606      	mov	r6, r0
 8005010:	f300 8093 	bgt.w	800513a <_dtoa_r+0x9aa>
 8005014:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005016:	2b02      	cmp	r3, #2
 8005018:	dc57      	bgt.n	80050ca <_dtoa_r+0x93a>
 800501a:	e08e      	b.n	800513a <_dtoa_r+0x9aa>
 800501c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800501e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005022:	e757      	b.n	8004ed4 <_dtoa_r+0x744>
 8005024:	9b08      	ldr	r3, [sp, #32]
 8005026:	1e5c      	subs	r4, r3, #1
 8005028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800502a:	42a3      	cmp	r3, r4
 800502c:	bfb7      	itett	lt
 800502e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005030:	1b1c      	subge	r4, r3, r4
 8005032:	1ae2      	sublt	r2, r4, r3
 8005034:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005036:	bfbe      	ittt	lt
 8005038:	940a      	strlt	r4, [sp, #40]	; 0x28
 800503a:	189b      	addlt	r3, r3, r2
 800503c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800503e:	9b08      	ldr	r3, [sp, #32]
 8005040:	bfb8      	it	lt
 8005042:	2400      	movlt	r4, #0
 8005044:	2b00      	cmp	r3, #0
 8005046:	bfbb      	ittet	lt
 8005048:	9b06      	ldrlt	r3, [sp, #24]
 800504a:	9a08      	ldrlt	r2, [sp, #32]
 800504c:	9f06      	ldrge	r7, [sp, #24]
 800504e:	1a9f      	sublt	r7, r3, r2
 8005050:	bfac      	ite	ge
 8005052:	9b08      	ldrge	r3, [sp, #32]
 8005054:	2300      	movlt	r3, #0
 8005056:	e73f      	b.n	8004ed8 <_dtoa_r+0x748>
 8005058:	3fe00000 	.word	0x3fe00000
 800505c:	40240000 	.word	0x40240000
 8005060:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005062:	9f06      	ldr	r7, [sp, #24]
 8005064:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005066:	e742      	b.n	8004eee <_dtoa_r+0x75e>
 8005068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800506a:	e76b      	b.n	8004f44 <_dtoa_r+0x7b4>
 800506c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800506e:	2b01      	cmp	r3, #1
 8005070:	dc19      	bgt.n	80050a6 <_dtoa_r+0x916>
 8005072:	9b04      	ldr	r3, [sp, #16]
 8005074:	b9bb      	cbnz	r3, 80050a6 <_dtoa_r+0x916>
 8005076:	9b05      	ldr	r3, [sp, #20]
 8005078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800507c:	b99b      	cbnz	r3, 80050a6 <_dtoa_r+0x916>
 800507e:	9b05      	ldr	r3, [sp, #20]
 8005080:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005084:	0d1b      	lsrs	r3, r3, #20
 8005086:	051b      	lsls	r3, r3, #20
 8005088:	b183      	cbz	r3, 80050ac <_dtoa_r+0x91c>
 800508a:	f04f 0801 	mov.w	r8, #1
 800508e:	9b06      	ldr	r3, [sp, #24]
 8005090:	3301      	adds	r3, #1
 8005092:	9306      	str	r3, [sp, #24]
 8005094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005096:	3301      	adds	r3, #1
 8005098:	9309      	str	r3, [sp, #36]	; 0x24
 800509a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800509c:	2b00      	cmp	r3, #0
 800509e:	f47f af6a 	bne.w	8004f76 <_dtoa_r+0x7e6>
 80050a2:	2001      	movs	r0, #1
 80050a4:	e76f      	b.n	8004f86 <_dtoa_r+0x7f6>
 80050a6:	f04f 0800 	mov.w	r8, #0
 80050aa:	e7f6      	b.n	800509a <_dtoa_r+0x90a>
 80050ac:	4698      	mov	r8, r3
 80050ae:	e7f4      	b.n	800509a <_dtoa_r+0x90a>
 80050b0:	f43f af7d 	beq.w	8004fae <_dtoa_r+0x81e>
 80050b4:	4618      	mov	r0, r3
 80050b6:	301c      	adds	r0, #28
 80050b8:	e772      	b.n	8004fa0 <_dtoa_r+0x810>
 80050ba:	9b08      	ldr	r3, [sp, #32]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	dc36      	bgt.n	800512e <_dtoa_r+0x99e>
 80050c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	dd33      	ble.n	800512e <_dtoa_r+0x99e>
 80050c6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050ca:	f1b9 0f00 	cmp.w	r9, #0
 80050ce:	d10d      	bne.n	80050ec <_dtoa_r+0x95c>
 80050d0:	4621      	mov	r1, r4
 80050d2:	464b      	mov	r3, r9
 80050d4:	2205      	movs	r2, #5
 80050d6:	4628      	mov	r0, r5
 80050d8:	f7fe feb4 	bl	8003e44 <__multadd>
 80050dc:	4601      	mov	r1, r0
 80050de:	4604      	mov	r4, r0
 80050e0:	4658      	mov	r0, fp
 80050e2:	f7ff f8cb 	bl	800427c <__mcmp>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	f73f adb8 	bgt.w	8004c5c <_dtoa_r+0x4cc>
 80050ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050ee:	9f03      	ldr	r7, [sp, #12]
 80050f0:	ea6f 0a03 	mvn.w	sl, r3
 80050f4:	f04f 0800 	mov.w	r8, #0
 80050f8:	4621      	mov	r1, r4
 80050fa:	4628      	mov	r0, r5
 80050fc:	f7fe fe80 	bl	8003e00 <_Bfree>
 8005100:	2e00      	cmp	r6, #0
 8005102:	f43f aea7 	beq.w	8004e54 <_dtoa_r+0x6c4>
 8005106:	f1b8 0f00 	cmp.w	r8, #0
 800510a:	d005      	beq.n	8005118 <_dtoa_r+0x988>
 800510c:	45b0      	cmp	r8, r6
 800510e:	d003      	beq.n	8005118 <_dtoa_r+0x988>
 8005110:	4641      	mov	r1, r8
 8005112:	4628      	mov	r0, r5
 8005114:	f7fe fe74 	bl	8003e00 <_Bfree>
 8005118:	4631      	mov	r1, r6
 800511a:	4628      	mov	r0, r5
 800511c:	f7fe fe70 	bl	8003e00 <_Bfree>
 8005120:	e698      	b.n	8004e54 <_dtoa_r+0x6c4>
 8005122:	2400      	movs	r4, #0
 8005124:	4626      	mov	r6, r4
 8005126:	e7e1      	b.n	80050ec <_dtoa_r+0x95c>
 8005128:	46c2      	mov	sl, r8
 800512a:	4626      	mov	r6, r4
 800512c:	e596      	b.n	8004c5c <_dtoa_r+0x4cc>
 800512e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005130:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 80fd 	beq.w	8005334 <_dtoa_r+0xba4>
 800513a:	2f00      	cmp	r7, #0
 800513c:	dd05      	ble.n	800514a <_dtoa_r+0x9ba>
 800513e:	4631      	mov	r1, r6
 8005140:	463a      	mov	r2, r7
 8005142:	4628      	mov	r0, r5
 8005144:	f7ff f82a 	bl	800419c <__lshift>
 8005148:	4606      	mov	r6, r0
 800514a:	f1b8 0f00 	cmp.w	r8, #0
 800514e:	d05c      	beq.n	800520a <_dtoa_r+0xa7a>
 8005150:	4628      	mov	r0, r5
 8005152:	6871      	ldr	r1, [r6, #4]
 8005154:	f7fe fe14 	bl	8003d80 <_Balloc>
 8005158:	4607      	mov	r7, r0
 800515a:	b928      	cbnz	r0, 8005168 <_dtoa_r+0x9d8>
 800515c:	4602      	mov	r2, r0
 800515e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005162:	4b7f      	ldr	r3, [pc, #508]	; (8005360 <_dtoa_r+0xbd0>)
 8005164:	f7ff bb28 	b.w	80047b8 <_dtoa_r+0x28>
 8005168:	6932      	ldr	r2, [r6, #16]
 800516a:	f106 010c 	add.w	r1, r6, #12
 800516e:	3202      	adds	r2, #2
 8005170:	0092      	lsls	r2, r2, #2
 8005172:	300c      	adds	r0, #12
 8005174:	f000 f914 	bl	80053a0 <memcpy>
 8005178:	2201      	movs	r2, #1
 800517a:	4639      	mov	r1, r7
 800517c:	4628      	mov	r0, r5
 800517e:	f7ff f80d 	bl	800419c <__lshift>
 8005182:	46b0      	mov	r8, r6
 8005184:	4606      	mov	r6, r0
 8005186:	9b03      	ldr	r3, [sp, #12]
 8005188:	3301      	adds	r3, #1
 800518a:	9308      	str	r3, [sp, #32]
 800518c:	9b03      	ldr	r3, [sp, #12]
 800518e:	444b      	add	r3, r9
 8005190:	930a      	str	r3, [sp, #40]	; 0x28
 8005192:	9b04      	ldr	r3, [sp, #16]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	9309      	str	r3, [sp, #36]	; 0x24
 800519a:	9b08      	ldr	r3, [sp, #32]
 800519c:	4621      	mov	r1, r4
 800519e:	3b01      	subs	r3, #1
 80051a0:	4658      	mov	r0, fp
 80051a2:	9304      	str	r3, [sp, #16]
 80051a4:	f7ff fa68 	bl	8004678 <quorem>
 80051a8:	4603      	mov	r3, r0
 80051aa:	4641      	mov	r1, r8
 80051ac:	3330      	adds	r3, #48	; 0x30
 80051ae:	9006      	str	r0, [sp, #24]
 80051b0:	4658      	mov	r0, fp
 80051b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80051b4:	f7ff f862 	bl	800427c <__mcmp>
 80051b8:	4632      	mov	r2, r6
 80051ba:	4681      	mov	r9, r0
 80051bc:	4621      	mov	r1, r4
 80051be:	4628      	mov	r0, r5
 80051c0:	f7ff f878 	bl	80042b4 <__mdiff>
 80051c4:	68c2      	ldr	r2, [r0, #12]
 80051c6:	4607      	mov	r7, r0
 80051c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051ca:	bb02      	cbnz	r2, 800520e <_dtoa_r+0xa7e>
 80051cc:	4601      	mov	r1, r0
 80051ce:	4658      	mov	r0, fp
 80051d0:	f7ff f854 	bl	800427c <__mcmp>
 80051d4:	4602      	mov	r2, r0
 80051d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051d8:	4639      	mov	r1, r7
 80051da:	4628      	mov	r0, r5
 80051dc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80051e0:	f7fe fe0e 	bl	8003e00 <_Bfree>
 80051e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051e8:	9f08      	ldr	r7, [sp, #32]
 80051ea:	ea43 0102 	orr.w	r1, r3, r2
 80051ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051f0:	430b      	orrs	r3, r1
 80051f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051f4:	d10d      	bne.n	8005212 <_dtoa_r+0xa82>
 80051f6:	2b39      	cmp	r3, #57	; 0x39
 80051f8:	d029      	beq.n	800524e <_dtoa_r+0xabe>
 80051fa:	f1b9 0f00 	cmp.w	r9, #0
 80051fe:	dd01      	ble.n	8005204 <_dtoa_r+0xa74>
 8005200:	9b06      	ldr	r3, [sp, #24]
 8005202:	3331      	adds	r3, #49	; 0x31
 8005204:	9a04      	ldr	r2, [sp, #16]
 8005206:	7013      	strb	r3, [r2, #0]
 8005208:	e776      	b.n	80050f8 <_dtoa_r+0x968>
 800520a:	4630      	mov	r0, r6
 800520c:	e7b9      	b.n	8005182 <_dtoa_r+0x9f2>
 800520e:	2201      	movs	r2, #1
 8005210:	e7e2      	b.n	80051d8 <_dtoa_r+0xa48>
 8005212:	f1b9 0f00 	cmp.w	r9, #0
 8005216:	db06      	blt.n	8005226 <_dtoa_r+0xa96>
 8005218:	9922      	ldr	r1, [sp, #136]	; 0x88
 800521a:	ea41 0909 	orr.w	r9, r1, r9
 800521e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005220:	ea59 0101 	orrs.w	r1, r9, r1
 8005224:	d120      	bne.n	8005268 <_dtoa_r+0xad8>
 8005226:	2a00      	cmp	r2, #0
 8005228:	ddec      	ble.n	8005204 <_dtoa_r+0xa74>
 800522a:	4659      	mov	r1, fp
 800522c:	2201      	movs	r2, #1
 800522e:	4628      	mov	r0, r5
 8005230:	9308      	str	r3, [sp, #32]
 8005232:	f7fe ffb3 	bl	800419c <__lshift>
 8005236:	4621      	mov	r1, r4
 8005238:	4683      	mov	fp, r0
 800523a:	f7ff f81f 	bl	800427c <__mcmp>
 800523e:	2800      	cmp	r0, #0
 8005240:	9b08      	ldr	r3, [sp, #32]
 8005242:	dc02      	bgt.n	800524a <_dtoa_r+0xaba>
 8005244:	d1de      	bne.n	8005204 <_dtoa_r+0xa74>
 8005246:	07da      	lsls	r2, r3, #31
 8005248:	d5dc      	bpl.n	8005204 <_dtoa_r+0xa74>
 800524a:	2b39      	cmp	r3, #57	; 0x39
 800524c:	d1d8      	bne.n	8005200 <_dtoa_r+0xa70>
 800524e:	2339      	movs	r3, #57	; 0x39
 8005250:	9a04      	ldr	r2, [sp, #16]
 8005252:	7013      	strb	r3, [r2, #0]
 8005254:	463b      	mov	r3, r7
 8005256:	461f      	mov	r7, r3
 8005258:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800525c:	3b01      	subs	r3, #1
 800525e:	2a39      	cmp	r2, #57	; 0x39
 8005260:	d050      	beq.n	8005304 <_dtoa_r+0xb74>
 8005262:	3201      	adds	r2, #1
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	e747      	b.n	80050f8 <_dtoa_r+0x968>
 8005268:	2a00      	cmp	r2, #0
 800526a:	dd03      	ble.n	8005274 <_dtoa_r+0xae4>
 800526c:	2b39      	cmp	r3, #57	; 0x39
 800526e:	d0ee      	beq.n	800524e <_dtoa_r+0xabe>
 8005270:	3301      	adds	r3, #1
 8005272:	e7c7      	b.n	8005204 <_dtoa_r+0xa74>
 8005274:	9a08      	ldr	r2, [sp, #32]
 8005276:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005278:	f802 3c01 	strb.w	r3, [r2, #-1]
 800527c:	428a      	cmp	r2, r1
 800527e:	d02a      	beq.n	80052d6 <_dtoa_r+0xb46>
 8005280:	4659      	mov	r1, fp
 8005282:	2300      	movs	r3, #0
 8005284:	220a      	movs	r2, #10
 8005286:	4628      	mov	r0, r5
 8005288:	f7fe fddc 	bl	8003e44 <__multadd>
 800528c:	45b0      	cmp	r8, r6
 800528e:	4683      	mov	fp, r0
 8005290:	f04f 0300 	mov.w	r3, #0
 8005294:	f04f 020a 	mov.w	r2, #10
 8005298:	4641      	mov	r1, r8
 800529a:	4628      	mov	r0, r5
 800529c:	d107      	bne.n	80052ae <_dtoa_r+0xb1e>
 800529e:	f7fe fdd1 	bl	8003e44 <__multadd>
 80052a2:	4680      	mov	r8, r0
 80052a4:	4606      	mov	r6, r0
 80052a6:	9b08      	ldr	r3, [sp, #32]
 80052a8:	3301      	adds	r3, #1
 80052aa:	9308      	str	r3, [sp, #32]
 80052ac:	e775      	b.n	800519a <_dtoa_r+0xa0a>
 80052ae:	f7fe fdc9 	bl	8003e44 <__multadd>
 80052b2:	4631      	mov	r1, r6
 80052b4:	4680      	mov	r8, r0
 80052b6:	2300      	movs	r3, #0
 80052b8:	220a      	movs	r2, #10
 80052ba:	4628      	mov	r0, r5
 80052bc:	f7fe fdc2 	bl	8003e44 <__multadd>
 80052c0:	4606      	mov	r6, r0
 80052c2:	e7f0      	b.n	80052a6 <_dtoa_r+0xb16>
 80052c4:	f1b9 0f00 	cmp.w	r9, #0
 80052c8:	bfcc      	ite	gt
 80052ca:	464f      	movgt	r7, r9
 80052cc:	2701      	movle	r7, #1
 80052ce:	f04f 0800 	mov.w	r8, #0
 80052d2:	9a03      	ldr	r2, [sp, #12]
 80052d4:	4417      	add	r7, r2
 80052d6:	4659      	mov	r1, fp
 80052d8:	2201      	movs	r2, #1
 80052da:	4628      	mov	r0, r5
 80052dc:	9308      	str	r3, [sp, #32]
 80052de:	f7fe ff5d 	bl	800419c <__lshift>
 80052e2:	4621      	mov	r1, r4
 80052e4:	4683      	mov	fp, r0
 80052e6:	f7fe ffc9 	bl	800427c <__mcmp>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	dcb2      	bgt.n	8005254 <_dtoa_r+0xac4>
 80052ee:	d102      	bne.n	80052f6 <_dtoa_r+0xb66>
 80052f0:	9b08      	ldr	r3, [sp, #32]
 80052f2:	07db      	lsls	r3, r3, #31
 80052f4:	d4ae      	bmi.n	8005254 <_dtoa_r+0xac4>
 80052f6:	463b      	mov	r3, r7
 80052f8:	461f      	mov	r7, r3
 80052fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052fe:	2a30      	cmp	r2, #48	; 0x30
 8005300:	d0fa      	beq.n	80052f8 <_dtoa_r+0xb68>
 8005302:	e6f9      	b.n	80050f8 <_dtoa_r+0x968>
 8005304:	9a03      	ldr	r2, [sp, #12]
 8005306:	429a      	cmp	r2, r3
 8005308:	d1a5      	bne.n	8005256 <_dtoa_r+0xac6>
 800530a:	2331      	movs	r3, #49	; 0x31
 800530c:	f10a 0a01 	add.w	sl, sl, #1
 8005310:	e779      	b.n	8005206 <_dtoa_r+0xa76>
 8005312:	4b14      	ldr	r3, [pc, #80]	; (8005364 <_dtoa_r+0xbd4>)
 8005314:	f7ff baa8 	b.w	8004868 <_dtoa_r+0xd8>
 8005318:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800531a:	2b00      	cmp	r3, #0
 800531c:	f47f aa81 	bne.w	8004822 <_dtoa_r+0x92>
 8005320:	4b11      	ldr	r3, [pc, #68]	; (8005368 <_dtoa_r+0xbd8>)
 8005322:	f7ff baa1 	b.w	8004868 <_dtoa_r+0xd8>
 8005326:	f1b9 0f00 	cmp.w	r9, #0
 800532a:	dc03      	bgt.n	8005334 <_dtoa_r+0xba4>
 800532c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800532e:	2b02      	cmp	r3, #2
 8005330:	f73f aecb 	bgt.w	80050ca <_dtoa_r+0x93a>
 8005334:	9f03      	ldr	r7, [sp, #12]
 8005336:	4621      	mov	r1, r4
 8005338:	4658      	mov	r0, fp
 800533a:	f7ff f99d 	bl	8004678 <quorem>
 800533e:	9a03      	ldr	r2, [sp, #12]
 8005340:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005344:	f807 3b01 	strb.w	r3, [r7], #1
 8005348:	1aba      	subs	r2, r7, r2
 800534a:	4591      	cmp	r9, r2
 800534c:	ddba      	ble.n	80052c4 <_dtoa_r+0xb34>
 800534e:	4659      	mov	r1, fp
 8005350:	2300      	movs	r3, #0
 8005352:	220a      	movs	r2, #10
 8005354:	4628      	mov	r0, r5
 8005356:	f7fe fd75 	bl	8003e44 <__multadd>
 800535a:	4683      	mov	fp, r0
 800535c:	e7eb      	b.n	8005336 <_dtoa_r+0xba6>
 800535e:	bf00      	nop
 8005360:	080062db 	.word	0x080062db
 8005364:	08006435 	.word	0x08006435
 8005368:	08006428 	.word	0x08006428

0800536c <fiprintf>:
 800536c:	b40e      	push	{r1, r2, r3}
 800536e:	b503      	push	{r0, r1, lr}
 8005370:	4601      	mov	r1, r0
 8005372:	ab03      	add	r3, sp, #12
 8005374:	4805      	ldr	r0, [pc, #20]	; (800538c <fiprintf+0x20>)
 8005376:	f853 2b04 	ldr.w	r2, [r3], #4
 800537a:	6800      	ldr	r0, [r0, #0]
 800537c:	9301      	str	r3, [sp, #4]
 800537e:	f000 f899 	bl	80054b4 <_vfiprintf_r>
 8005382:	b002      	add	sp, #8
 8005384:	f85d eb04 	ldr.w	lr, [sp], #4
 8005388:	b003      	add	sp, #12
 800538a:	4770      	bx	lr
 800538c:	2000000c 	.word	0x2000000c

08005390 <malloc>:
 8005390:	4b02      	ldr	r3, [pc, #8]	; (800539c <malloc+0xc>)
 8005392:	4601      	mov	r1, r0
 8005394:	6818      	ldr	r0, [r3, #0]
 8005396:	f7ff b8c5 	b.w	8004524 <_malloc_r>
 800539a:	bf00      	nop
 800539c:	2000000c 	.word	0x2000000c

080053a0 <memcpy>:
 80053a0:	440a      	add	r2, r1
 80053a2:	4291      	cmp	r1, r2
 80053a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80053a8:	d100      	bne.n	80053ac <memcpy+0xc>
 80053aa:	4770      	bx	lr
 80053ac:	b510      	push	{r4, lr}
 80053ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053b2:	4291      	cmp	r1, r2
 80053b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053b8:	d1f9      	bne.n	80053ae <memcpy+0xe>
 80053ba:	bd10      	pop	{r4, pc}

080053bc <__malloc_lock>:
 80053bc:	4801      	ldr	r0, [pc, #4]	; (80053c4 <__malloc_lock+0x8>)
 80053be:	f000 bdbb 	b.w	8005f38 <__retarget_lock_acquire_recursive>
 80053c2:	bf00      	nop
 80053c4:	20000124 	.word	0x20000124

080053c8 <__malloc_unlock>:
 80053c8:	4801      	ldr	r0, [pc, #4]	; (80053d0 <__malloc_unlock+0x8>)
 80053ca:	f000 bdb6 	b.w	8005f3a <__retarget_lock_release_recursive>
 80053ce:	bf00      	nop
 80053d0:	20000124 	.word	0x20000124

080053d4 <_free_r>:
 80053d4:	b538      	push	{r3, r4, r5, lr}
 80053d6:	4605      	mov	r5, r0
 80053d8:	2900      	cmp	r1, #0
 80053da:	d040      	beq.n	800545e <_free_r+0x8a>
 80053dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053e0:	1f0c      	subs	r4, r1, #4
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	bfb8      	it	lt
 80053e6:	18e4      	addlt	r4, r4, r3
 80053e8:	f7ff ffe8 	bl	80053bc <__malloc_lock>
 80053ec:	4a1c      	ldr	r2, [pc, #112]	; (8005460 <_free_r+0x8c>)
 80053ee:	6813      	ldr	r3, [r2, #0]
 80053f0:	b933      	cbnz	r3, 8005400 <_free_r+0x2c>
 80053f2:	6063      	str	r3, [r4, #4]
 80053f4:	6014      	str	r4, [r2, #0]
 80053f6:	4628      	mov	r0, r5
 80053f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053fc:	f7ff bfe4 	b.w	80053c8 <__malloc_unlock>
 8005400:	42a3      	cmp	r3, r4
 8005402:	d908      	bls.n	8005416 <_free_r+0x42>
 8005404:	6820      	ldr	r0, [r4, #0]
 8005406:	1821      	adds	r1, r4, r0
 8005408:	428b      	cmp	r3, r1
 800540a:	bf01      	itttt	eq
 800540c:	6819      	ldreq	r1, [r3, #0]
 800540e:	685b      	ldreq	r3, [r3, #4]
 8005410:	1809      	addeq	r1, r1, r0
 8005412:	6021      	streq	r1, [r4, #0]
 8005414:	e7ed      	b.n	80053f2 <_free_r+0x1e>
 8005416:	461a      	mov	r2, r3
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	b10b      	cbz	r3, 8005420 <_free_r+0x4c>
 800541c:	42a3      	cmp	r3, r4
 800541e:	d9fa      	bls.n	8005416 <_free_r+0x42>
 8005420:	6811      	ldr	r1, [r2, #0]
 8005422:	1850      	adds	r0, r2, r1
 8005424:	42a0      	cmp	r0, r4
 8005426:	d10b      	bne.n	8005440 <_free_r+0x6c>
 8005428:	6820      	ldr	r0, [r4, #0]
 800542a:	4401      	add	r1, r0
 800542c:	1850      	adds	r0, r2, r1
 800542e:	4283      	cmp	r3, r0
 8005430:	6011      	str	r1, [r2, #0]
 8005432:	d1e0      	bne.n	80053f6 <_free_r+0x22>
 8005434:	6818      	ldr	r0, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	4401      	add	r1, r0
 800543a:	6011      	str	r1, [r2, #0]
 800543c:	6053      	str	r3, [r2, #4]
 800543e:	e7da      	b.n	80053f6 <_free_r+0x22>
 8005440:	d902      	bls.n	8005448 <_free_r+0x74>
 8005442:	230c      	movs	r3, #12
 8005444:	602b      	str	r3, [r5, #0]
 8005446:	e7d6      	b.n	80053f6 <_free_r+0x22>
 8005448:	6820      	ldr	r0, [r4, #0]
 800544a:	1821      	adds	r1, r4, r0
 800544c:	428b      	cmp	r3, r1
 800544e:	bf01      	itttt	eq
 8005450:	6819      	ldreq	r1, [r3, #0]
 8005452:	685b      	ldreq	r3, [r3, #4]
 8005454:	1809      	addeq	r1, r1, r0
 8005456:	6021      	streq	r1, [r4, #0]
 8005458:	6063      	str	r3, [r4, #4]
 800545a:	6054      	str	r4, [r2, #4]
 800545c:	e7cb      	b.n	80053f6 <_free_r+0x22>
 800545e:	bd38      	pop	{r3, r4, r5, pc}
 8005460:	20000118 	.word	0x20000118

08005464 <__sfputc_r>:
 8005464:	6893      	ldr	r3, [r2, #8]
 8005466:	b410      	push	{r4}
 8005468:	3b01      	subs	r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	6093      	str	r3, [r2, #8]
 800546e:	da07      	bge.n	8005480 <__sfputc_r+0x1c>
 8005470:	6994      	ldr	r4, [r2, #24]
 8005472:	42a3      	cmp	r3, r4
 8005474:	db01      	blt.n	800547a <__sfputc_r+0x16>
 8005476:	290a      	cmp	r1, #10
 8005478:	d102      	bne.n	8005480 <__sfputc_r+0x1c>
 800547a:	bc10      	pop	{r4}
 800547c:	f000 bae0 	b.w	8005a40 <__swbuf_r>
 8005480:	6813      	ldr	r3, [r2, #0]
 8005482:	1c58      	adds	r0, r3, #1
 8005484:	6010      	str	r0, [r2, #0]
 8005486:	7019      	strb	r1, [r3, #0]
 8005488:	4608      	mov	r0, r1
 800548a:	bc10      	pop	{r4}
 800548c:	4770      	bx	lr

0800548e <__sfputs_r>:
 800548e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005490:	4606      	mov	r6, r0
 8005492:	460f      	mov	r7, r1
 8005494:	4614      	mov	r4, r2
 8005496:	18d5      	adds	r5, r2, r3
 8005498:	42ac      	cmp	r4, r5
 800549a:	d101      	bne.n	80054a0 <__sfputs_r+0x12>
 800549c:	2000      	movs	r0, #0
 800549e:	e007      	b.n	80054b0 <__sfputs_r+0x22>
 80054a0:	463a      	mov	r2, r7
 80054a2:	4630      	mov	r0, r6
 80054a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054a8:	f7ff ffdc 	bl	8005464 <__sfputc_r>
 80054ac:	1c43      	adds	r3, r0, #1
 80054ae:	d1f3      	bne.n	8005498 <__sfputs_r+0xa>
 80054b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054b4 <_vfiprintf_r>:
 80054b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b8:	460d      	mov	r5, r1
 80054ba:	4614      	mov	r4, r2
 80054bc:	4698      	mov	r8, r3
 80054be:	4606      	mov	r6, r0
 80054c0:	b09d      	sub	sp, #116	; 0x74
 80054c2:	b118      	cbz	r0, 80054cc <_vfiprintf_r+0x18>
 80054c4:	6983      	ldr	r3, [r0, #24]
 80054c6:	b90b      	cbnz	r3, 80054cc <_vfiprintf_r+0x18>
 80054c8:	f000 fc98 	bl	8005dfc <__sinit>
 80054cc:	4b89      	ldr	r3, [pc, #548]	; (80056f4 <_vfiprintf_r+0x240>)
 80054ce:	429d      	cmp	r5, r3
 80054d0:	d11b      	bne.n	800550a <_vfiprintf_r+0x56>
 80054d2:	6875      	ldr	r5, [r6, #4]
 80054d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054d6:	07d9      	lsls	r1, r3, #31
 80054d8:	d405      	bmi.n	80054e6 <_vfiprintf_r+0x32>
 80054da:	89ab      	ldrh	r3, [r5, #12]
 80054dc:	059a      	lsls	r2, r3, #22
 80054de:	d402      	bmi.n	80054e6 <_vfiprintf_r+0x32>
 80054e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054e2:	f000 fd29 	bl	8005f38 <__retarget_lock_acquire_recursive>
 80054e6:	89ab      	ldrh	r3, [r5, #12]
 80054e8:	071b      	lsls	r3, r3, #28
 80054ea:	d501      	bpl.n	80054f0 <_vfiprintf_r+0x3c>
 80054ec:	692b      	ldr	r3, [r5, #16]
 80054ee:	b9eb      	cbnz	r3, 800552c <_vfiprintf_r+0x78>
 80054f0:	4629      	mov	r1, r5
 80054f2:	4630      	mov	r0, r6
 80054f4:	f000 faf6 	bl	8005ae4 <__swsetup_r>
 80054f8:	b1c0      	cbz	r0, 800552c <_vfiprintf_r+0x78>
 80054fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054fc:	07dc      	lsls	r4, r3, #31
 80054fe:	d50e      	bpl.n	800551e <_vfiprintf_r+0x6a>
 8005500:	f04f 30ff 	mov.w	r0, #4294967295
 8005504:	b01d      	add	sp, #116	; 0x74
 8005506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800550a:	4b7b      	ldr	r3, [pc, #492]	; (80056f8 <_vfiprintf_r+0x244>)
 800550c:	429d      	cmp	r5, r3
 800550e:	d101      	bne.n	8005514 <_vfiprintf_r+0x60>
 8005510:	68b5      	ldr	r5, [r6, #8]
 8005512:	e7df      	b.n	80054d4 <_vfiprintf_r+0x20>
 8005514:	4b79      	ldr	r3, [pc, #484]	; (80056fc <_vfiprintf_r+0x248>)
 8005516:	429d      	cmp	r5, r3
 8005518:	bf08      	it	eq
 800551a:	68f5      	ldreq	r5, [r6, #12]
 800551c:	e7da      	b.n	80054d4 <_vfiprintf_r+0x20>
 800551e:	89ab      	ldrh	r3, [r5, #12]
 8005520:	0598      	lsls	r0, r3, #22
 8005522:	d4ed      	bmi.n	8005500 <_vfiprintf_r+0x4c>
 8005524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005526:	f000 fd08 	bl	8005f3a <__retarget_lock_release_recursive>
 800552a:	e7e9      	b.n	8005500 <_vfiprintf_r+0x4c>
 800552c:	2300      	movs	r3, #0
 800552e:	9309      	str	r3, [sp, #36]	; 0x24
 8005530:	2320      	movs	r3, #32
 8005532:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005536:	2330      	movs	r3, #48	; 0x30
 8005538:	f04f 0901 	mov.w	r9, #1
 800553c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005540:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005700 <_vfiprintf_r+0x24c>
 8005544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005548:	4623      	mov	r3, r4
 800554a:	469a      	mov	sl, r3
 800554c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005550:	b10a      	cbz	r2, 8005556 <_vfiprintf_r+0xa2>
 8005552:	2a25      	cmp	r2, #37	; 0x25
 8005554:	d1f9      	bne.n	800554a <_vfiprintf_r+0x96>
 8005556:	ebba 0b04 	subs.w	fp, sl, r4
 800555a:	d00b      	beq.n	8005574 <_vfiprintf_r+0xc0>
 800555c:	465b      	mov	r3, fp
 800555e:	4622      	mov	r2, r4
 8005560:	4629      	mov	r1, r5
 8005562:	4630      	mov	r0, r6
 8005564:	f7ff ff93 	bl	800548e <__sfputs_r>
 8005568:	3001      	adds	r0, #1
 800556a:	f000 80aa 	beq.w	80056c2 <_vfiprintf_r+0x20e>
 800556e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005570:	445a      	add	r2, fp
 8005572:	9209      	str	r2, [sp, #36]	; 0x24
 8005574:	f89a 3000 	ldrb.w	r3, [sl]
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 80a2 	beq.w	80056c2 <_vfiprintf_r+0x20e>
 800557e:	2300      	movs	r3, #0
 8005580:	f04f 32ff 	mov.w	r2, #4294967295
 8005584:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005588:	f10a 0a01 	add.w	sl, sl, #1
 800558c:	9304      	str	r3, [sp, #16]
 800558e:	9307      	str	r3, [sp, #28]
 8005590:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005594:	931a      	str	r3, [sp, #104]	; 0x68
 8005596:	4654      	mov	r4, sl
 8005598:	2205      	movs	r2, #5
 800559a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800559e:	4858      	ldr	r0, [pc, #352]	; (8005700 <_vfiprintf_r+0x24c>)
 80055a0:	f000 fd32 	bl	8006008 <memchr>
 80055a4:	9a04      	ldr	r2, [sp, #16]
 80055a6:	b9d8      	cbnz	r0, 80055e0 <_vfiprintf_r+0x12c>
 80055a8:	06d1      	lsls	r1, r2, #27
 80055aa:	bf44      	itt	mi
 80055ac:	2320      	movmi	r3, #32
 80055ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055b2:	0713      	lsls	r3, r2, #28
 80055b4:	bf44      	itt	mi
 80055b6:	232b      	movmi	r3, #43	; 0x2b
 80055b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055bc:	f89a 3000 	ldrb.w	r3, [sl]
 80055c0:	2b2a      	cmp	r3, #42	; 0x2a
 80055c2:	d015      	beq.n	80055f0 <_vfiprintf_r+0x13c>
 80055c4:	4654      	mov	r4, sl
 80055c6:	2000      	movs	r0, #0
 80055c8:	f04f 0c0a 	mov.w	ip, #10
 80055cc:	9a07      	ldr	r2, [sp, #28]
 80055ce:	4621      	mov	r1, r4
 80055d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055d4:	3b30      	subs	r3, #48	; 0x30
 80055d6:	2b09      	cmp	r3, #9
 80055d8:	d94e      	bls.n	8005678 <_vfiprintf_r+0x1c4>
 80055da:	b1b0      	cbz	r0, 800560a <_vfiprintf_r+0x156>
 80055dc:	9207      	str	r2, [sp, #28]
 80055de:	e014      	b.n	800560a <_vfiprintf_r+0x156>
 80055e0:	eba0 0308 	sub.w	r3, r0, r8
 80055e4:	fa09 f303 	lsl.w	r3, r9, r3
 80055e8:	4313      	orrs	r3, r2
 80055ea:	46a2      	mov	sl, r4
 80055ec:	9304      	str	r3, [sp, #16]
 80055ee:	e7d2      	b.n	8005596 <_vfiprintf_r+0xe2>
 80055f0:	9b03      	ldr	r3, [sp, #12]
 80055f2:	1d19      	adds	r1, r3, #4
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	9103      	str	r1, [sp, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bfbb      	ittet	lt
 80055fc:	425b      	neglt	r3, r3
 80055fe:	f042 0202 	orrlt.w	r2, r2, #2
 8005602:	9307      	strge	r3, [sp, #28]
 8005604:	9307      	strlt	r3, [sp, #28]
 8005606:	bfb8      	it	lt
 8005608:	9204      	strlt	r2, [sp, #16]
 800560a:	7823      	ldrb	r3, [r4, #0]
 800560c:	2b2e      	cmp	r3, #46	; 0x2e
 800560e:	d10c      	bne.n	800562a <_vfiprintf_r+0x176>
 8005610:	7863      	ldrb	r3, [r4, #1]
 8005612:	2b2a      	cmp	r3, #42	; 0x2a
 8005614:	d135      	bne.n	8005682 <_vfiprintf_r+0x1ce>
 8005616:	9b03      	ldr	r3, [sp, #12]
 8005618:	3402      	adds	r4, #2
 800561a:	1d1a      	adds	r2, r3, #4
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	9203      	str	r2, [sp, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	bfb8      	it	lt
 8005624:	f04f 33ff 	movlt.w	r3, #4294967295
 8005628:	9305      	str	r3, [sp, #20]
 800562a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005704 <_vfiprintf_r+0x250>
 800562e:	2203      	movs	r2, #3
 8005630:	4650      	mov	r0, sl
 8005632:	7821      	ldrb	r1, [r4, #0]
 8005634:	f000 fce8 	bl	8006008 <memchr>
 8005638:	b140      	cbz	r0, 800564c <_vfiprintf_r+0x198>
 800563a:	2340      	movs	r3, #64	; 0x40
 800563c:	eba0 000a 	sub.w	r0, r0, sl
 8005640:	fa03 f000 	lsl.w	r0, r3, r0
 8005644:	9b04      	ldr	r3, [sp, #16]
 8005646:	3401      	adds	r4, #1
 8005648:	4303      	orrs	r3, r0
 800564a:	9304      	str	r3, [sp, #16]
 800564c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005650:	2206      	movs	r2, #6
 8005652:	482d      	ldr	r0, [pc, #180]	; (8005708 <_vfiprintf_r+0x254>)
 8005654:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005658:	f000 fcd6 	bl	8006008 <memchr>
 800565c:	2800      	cmp	r0, #0
 800565e:	d03f      	beq.n	80056e0 <_vfiprintf_r+0x22c>
 8005660:	4b2a      	ldr	r3, [pc, #168]	; (800570c <_vfiprintf_r+0x258>)
 8005662:	bb1b      	cbnz	r3, 80056ac <_vfiprintf_r+0x1f8>
 8005664:	9b03      	ldr	r3, [sp, #12]
 8005666:	3307      	adds	r3, #7
 8005668:	f023 0307 	bic.w	r3, r3, #7
 800566c:	3308      	adds	r3, #8
 800566e:	9303      	str	r3, [sp, #12]
 8005670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005672:	443b      	add	r3, r7
 8005674:	9309      	str	r3, [sp, #36]	; 0x24
 8005676:	e767      	b.n	8005548 <_vfiprintf_r+0x94>
 8005678:	460c      	mov	r4, r1
 800567a:	2001      	movs	r0, #1
 800567c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005680:	e7a5      	b.n	80055ce <_vfiprintf_r+0x11a>
 8005682:	2300      	movs	r3, #0
 8005684:	f04f 0c0a 	mov.w	ip, #10
 8005688:	4619      	mov	r1, r3
 800568a:	3401      	adds	r4, #1
 800568c:	9305      	str	r3, [sp, #20]
 800568e:	4620      	mov	r0, r4
 8005690:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005694:	3a30      	subs	r2, #48	; 0x30
 8005696:	2a09      	cmp	r2, #9
 8005698:	d903      	bls.n	80056a2 <_vfiprintf_r+0x1ee>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0c5      	beq.n	800562a <_vfiprintf_r+0x176>
 800569e:	9105      	str	r1, [sp, #20]
 80056a0:	e7c3      	b.n	800562a <_vfiprintf_r+0x176>
 80056a2:	4604      	mov	r4, r0
 80056a4:	2301      	movs	r3, #1
 80056a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80056aa:	e7f0      	b.n	800568e <_vfiprintf_r+0x1da>
 80056ac:	ab03      	add	r3, sp, #12
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	462a      	mov	r2, r5
 80056b2:	4630      	mov	r0, r6
 80056b4:	4b16      	ldr	r3, [pc, #88]	; (8005710 <_vfiprintf_r+0x25c>)
 80056b6:	a904      	add	r1, sp, #16
 80056b8:	f3af 8000 	nop.w
 80056bc:	4607      	mov	r7, r0
 80056be:	1c78      	adds	r0, r7, #1
 80056c0:	d1d6      	bne.n	8005670 <_vfiprintf_r+0x1bc>
 80056c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056c4:	07d9      	lsls	r1, r3, #31
 80056c6:	d405      	bmi.n	80056d4 <_vfiprintf_r+0x220>
 80056c8:	89ab      	ldrh	r3, [r5, #12]
 80056ca:	059a      	lsls	r2, r3, #22
 80056cc:	d402      	bmi.n	80056d4 <_vfiprintf_r+0x220>
 80056ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056d0:	f000 fc33 	bl	8005f3a <__retarget_lock_release_recursive>
 80056d4:	89ab      	ldrh	r3, [r5, #12]
 80056d6:	065b      	lsls	r3, r3, #25
 80056d8:	f53f af12 	bmi.w	8005500 <_vfiprintf_r+0x4c>
 80056dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056de:	e711      	b.n	8005504 <_vfiprintf_r+0x50>
 80056e0:	ab03      	add	r3, sp, #12
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	462a      	mov	r2, r5
 80056e6:	4630      	mov	r0, r6
 80056e8:	4b09      	ldr	r3, [pc, #36]	; (8005710 <_vfiprintf_r+0x25c>)
 80056ea:	a904      	add	r1, sp, #16
 80056ec:	f000 f882 	bl	80057f4 <_printf_i>
 80056f0:	e7e4      	b.n	80056bc <_vfiprintf_r+0x208>
 80056f2:	bf00      	nop
 80056f4:	080064e8 	.word	0x080064e8
 80056f8:	08006508 	.word	0x08006508
 80056fc:	080064c8 	.word	0x080064c8
 8005700:	08006492 	.word	0x08006492
 8005704:	08006498 	.word	0x08006498
 8005708:	0800649c 	.word	0x0800649c
 800570c:	00000000 	.word	0x00000000
 8005710:	0800548f 	.word	0x0800548f

08005714 <_printf_common>:
 8005714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005718:	4616      	mov	r6, r2
 800571a:	4699      	mov	r9, r3
 800571c:	688a      	ldr	r2, [r1, #8]
 800571e:	690b      	ldr	r3, [r1, #16]
 8005720:	4607      	mov	r7, r0
 8005722:	4293      	cmp	r3, r2
 8005724:	bfb8      	it	lt
 8005726:	4613      	movlt	r3, r2
 8005728:	6033      	str	r3, [r6, #0]
 800572a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800572e:	460c      	mov	r4, r1
 8005730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005734:	b10a      	cbz	r2, 800573a <_printf_common+0x26>
 8005736:	3301      	adds	r3, #1
 8005738:	6033      	str	r3, [r6, #0]
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	0699      	lsls	r1, r3, #26
 800573e:	bf42      	ittt	mi
 8005740:	6833      	ldrmi	r3, [r6, #0]
 8005742:	3302      	addmi	r3, #2
 8005744:	6033      	strmi	r3, [r6, #0]
 8005746:	6825      	ldr	r5, [r4, #0]
 8005748:	f015 0506 	ands.w	r5, r5, #6
 800574c:	d106      	bne.n	800575c <_printf_common+0x48>
 800574e:	f104 0a19 	add.w	sl, r4, #25
 8005752:	68e3      	ldr	r3, [r4, #12]
 8005754:	6832      	ldr	r2, [r6, #0]
 8005756:	1a9b      	subs	r3, r3, r2
 8005758:	42ab      	cmp	r3, r5
 800575a:	dc28      	bgt.n	80057ae <_printf_common+0x9a>
 800575c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005760:	1e13      	subs	r3, r2, #0
 8005762:	6822      	ldr	r2, [r4, #0]
 8005764:	bf18      	it	ne
 8005766:	2301      	movne	r3, #1
 8005768:	0692      	lsls	r2, r2, #26
 800576a:	d42d      	bmi.n	80057c8 <_printf_common+0xb4>
 800576c:	4649      	mov	r1, r9
 800576e:	4638      	mov	r0, r7
 8005770:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005774:	47c0      	blx	r8
 8005776:	3001      	adds	r0, #1
 8005778:	d020      	beq.n	80057bc <_printf_common+0xa8>
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	68e5      	ldr	r5, [r4, #12]
 800577e:	f003 0306 	and.w	r3, r3, #6
 8005782:	2b04      	cmp	r3, #4
 8005784:	bf18      	it	ne
 8005786:	2500      	movne	r5, #0
 8005788:	6832      	ldr	r2, [r6, #0]
 800578a:	f04f 0600 	mov.w	r6, #0
 800578e:	68a3      	ldr	r3, [r4, #8]
 8005790:	bf08      	it	eq
 8005792:	1aad      	subeq	r5, r5, r2
 8005794:	6922      	ldr	r2, [r4, #16]
 8005796:	bf08      	it	eq
 8005798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800579c:	4293      	cmp	r3, r2
 800579e:	bfc4      	itt	gt
 80057a0:	1a9b      	subgt	r3, r3, r2
 80057a2:	18ed      	addgt	r5, r5, r3
 80057a4:	341a      	adds	r4, #26
 80057a6:	42b5      	cmp	r5, r6
 80057a8:	d11a      	bne.n	80057e0 <_printf_common+0xcc>
 80057aa:	2000      	movs	r0, #0
 80057ac:	e008      	b.n	80057c0 <_printf_common+0xac>
 80057ae:	2301      	movs	r3, #1
 80057b0:	4652      	mov	r2, sl
 80057b2:	4649      	mov	r1, r9
 80057b4:	4638      	mov	r0, r7
 80057b6:	47c0      	blx	r8
 80057b8:	3001      	adds	r0, #1
 80057ba:	d103      	bne.n	80057c4 <_printf_common+0xb0>
 80057bc:	f04f 30ff 	mov.w	r0, #4294967295
 80057c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c4:	3501      	adds	r5, #1
 80057c6:	e7c4      	b.n	8005752 <_printf_common+0x3e>
 80057c8:	2030      	movs	r0, #48	; 0x30
 80057ca:	18e1      	adds	r1, r4, r3
 80057cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057d6:	4422      	add	r2, r4
 80057d8:	3302      	adds	r3, #2
 80057da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057de:	e7c5      	b.n	800576c <_printf_common+0x58>
 80057e0:	2301      	movs	r3, #1
 80057e2:	4622      	mov	r2, r4
 80057e4:	4649      	mov	r1, r9
 80057e6:	4638      	mov	r0, r7
 80057e8:	47c0      	blx	r8
 80057ea:	3001      	adds	r0, #1
 80057ec:	d0e6      	beq.n	80057bc <_printf_common+0xa8>
 80057ee:	3601      	adds	r6, #1
 80057f0:	e7d9      	b.n	80057a6 <_printf_common+0x92>
	...

080057f4 <_printf_i>:
 80057f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057f8:	7e0f      	ldrb	r7, [r1, #24]
 80057fa:	4691      	mov	r9, r2
 80057fc:	2f78      	cmp	r7, #120	; 0x78
 80057fe:	4680      	mov	r8, r0
 8005800:	460c      	mov	r4, r1
 8005802:	469a      	mov	sl, r3
 8005804:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005806:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800580a:	d807      	bhi.n	800581c <_printf_i+0x28>
 800580c:	2f62      	cmp	r7, #98	; 0x62
 800580e:	d80a      	bhi.n	8005826 <_printf_i+0x32>
 8005810:	2f00      	cmp	r7, #0
 8005812:	f000 80d9 	beq.w	80059c8 <_printf_i+0x1d4>
 8005816:	2f58      	cmp	r7, #88	; 0x58
 8005818:	f000 80a4 	beq.w	8005964 <_printf_i+0x170>
 800581c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005824:	e03a      	b.n	800589c <_printf_i+0xa8>
 8005826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800582a:	2b15      	cmp	r3, #21
 800582c:	d8f6      	bhi.n	800581c <_printf_i+0x28>
 800582e:	a101      	add	r1, pc, #4	; (adr r1, 8005834 <_printf_i+0x40>)
 8005830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005834:	0800588d 	.word	0x0800588d
 8005838:	080058a1 	.word	0x080058a1
 800583c:	0800581d 	.word	0x0800581d
 8005840:	0800581d 	.word	0x0800581d
 8005844:	0800581d 	.word	0x0800581d
 8005848:	0800581d 	.word	0x0800581d
 800584c:	080058a1 	.word	0x080058a1
 8005850:	0800581d 	.word	0x0800581d
 8005854:	0800581d 	.word	0x0800581d
 8005858:	0800581d 	.word	0x0800581d
 800585c:	0800581d 	.word	0x0800581d
 8005860:	080059af 	.word	0x080059af
 8005864:	080058d1 	.word	0x080058d1
 8005868:	08005991 	.word	0x08005991
 800586c:	0800581d 	.word	0x0800581d
 8005870:	0800581d 	.word	0x0800581d
 8005874:	080059d1 	.word	0x080059d1
 8005878:	0800581d 	.word	0x0800581d
 800587c:	080058d1 	.word	0x080058d1
 8005880:	0800581d 	.word	0x0800581d
 8005884:	0800581d 	.word	0x0800581d
 8005888:	08005999 	.word	0x08005999
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	1d1a      	adds	r2, r3, #4
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	602a      	str	r2, [r5, #0]
 8005894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800589c:	2301      	movs	r3, #1
 800589e:	e0a4      	b.n	80059ea <_printf_i+0x1f6>
 80058a0:	6820      	ldr	r0, [r4, #0]
 80058a2:	6829      	ldr	r1, [r5, #0]
 80058a4:	0606      	lsls	r6, r0, #24
 80058a6:	f101 0304 	add.w	r3, r1, #4
 80058aa:	d50a      	bpl.n	80058c2 <_printf_i+0xce>
 80058ac:	680e      	ldr	r6, [r1, #0]
 80058ae:	602b      	str	r3, [r5, #0]
 80058b0:	2e00      	cmp	r6, #0
 80058b2:	da03      	bge.n	80058bc <_printf_i+0xc8>
 80058b4:	232d      	movs	r3, #45	; 0x2d
 80058b6:	4276      	negs	r6, r6
 80058b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058bc:	230a      	movs	r3, #10
 80058be:	485e      	ldr	r0, [pc, #376]	; (8005a38 <_printf_i+0x244>)
 80058c0:	e019      	b.n	80058f6 <_printf_i+0x102>
 80058c2:	680e      	ldr	r6, [r1, #0]
 80058c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058c8:	602b      	str	r3, [r5, #0]
 80058ca:	bf18      	it	ne
 80058cc:	b236      	sxthne	r6, r6
 80058ce:	e7ef      	b.n	80058b0 <_printf_i+0xbc>
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	6820      	ldr	r0, [r4, #0]
 80058d4:	1d19      	adds	r1, r3, #4
 80058d6:	6029      	str	r1, [r5, #0]
 80058d8:	0601      	lsls	r1, r0, #24
 80058da:	d501      	bpl.n	80058e0 <_printf_i+0xec>
 80058dc:	681e      	ldr	r6, [r3, #0]
 80058de:	e002      	b.n	80058e6 <_printf_i+0xf2>
 80058e0:	0646      	lsls	r6, r0, #25
 80058e2:	d5fb      	bpl.n	80058dc <_printf_i+0xe8>
 80058e4:	881e      	ldrh	r6, [r3, #0]
 80058e6:	2f6f      	cmp	r7, #111	; 0x6f
 80058e8:	bf0c      	ite	eq
 80058ea:	2308      	moveq	r3, #8
 80058ec:	230a      	movne	r3, #10
 80058ee:	4852      	ldr	r0, [pc, #328]	; (8005a38 <_printf_i+0x244>)
 80058f0:	2100      	movs	r1, #0
 80058f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058f6:	6865      	ldr	r5, [r4, #4]
 80058f8:	2d00      	cmp	r5, #0
 80058fa:	bfa8      	it	ge
 80058fc:	6821      	ldrge	r1, [r4, #0]
 80058fe:	60a5      	str	r5, [r4, #8]
 8005900:	bfa4      	itt	ge
 8005902:	f021 0104 	bicge.w	r1, r1, #4
 8005906:	6021      	strge	r1, [r4, #0]
 8005908:	b90e      	cbnz	r6, 800590e <_printf_i+0x11a>
 800590a:	2d00      	cmp	r5, #0
 800590c:	d04d      	beq.n	80059aa <_printf_i+0x1b6>
 800590e:	4615      	mov	r5, r2
 8005910:	fbb6 f1f3 	udiv	r1, r6, r3
 8005914:	fb03 6711 	mls	r7, r3, r1, r6
 8005918:	5dc7      	ldrb	r7, [r0, r7]
 800591a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800591e:	4637      	mov	r7, r6
 8005920:	42bb      	cmp	r3, r7
 8005922:	460e      	mov	r6, r1
 8005924:	d9f4      	bls.n	8005910 <_printf_i+0x11c>
 8005926:	2b08      	cmp	r3, #8
 8005928:	d10b      	bne.n	8005942 <_printf_i+0x14e>
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	07de      	lsls	r6, r3, #31
 800592e:	d508      	bpl.n	8005942 <_printf_i+0x14e>
 8005930:	6923      	ldr	r3, [r4, #16]
 8005932:	6861      	ldr	r1, [r4, #4]
 8005934:	4299      	cmp	r1, r3
 8005936:	bfde      	ittt	le
 8005938:	2330      	movle	r3, #48	; 0x30
 800593a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800593e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005942:	1b52      	subs	r2, r2, r5
 8005944:	6122      	str	r2, [r4, #16]
 8005946:	464b      	mov	r3, r9
 8005948:	4621      	mov	r1, r4
 800594a:	4640      	mov	r0, r8
 800594c:	f8cd a000 	str.w	sl, [sp]
 8005950:	aa03      	add	r2, sp, #12
 8005952:	f7ff fedf 	bl	8005714 <_printf_common>
 8005956:	3001      	adds	r0, #1
 8005958:	d14c      	bne.n	80059f4 <_printf_i+0x200>
 800595a:	f04f 30ff 	mov.w	r0, #4294967295
 800595e:	b004      	add	sp, #16
 8005960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005964:	4834      	ldr	r0, [pc, #208]	; (8005a38 <_printf_i+0x244>)
 8005966:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800596a:	6829      	ldr	r1, [r5, #0]
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005972:	6029      	str	r1, [r5, #0]
 8005974:	061d      	lsls	r5, r3, #24
 8005976:	d514      	bpl.n	80059a2 <_printf_i+0x1ae>
 8005978:	07df      	lsls	r7, r3, #31
 800597a:	bf44      	itt	mi
 800597c:	f043 0320 	orrmi.w	r3, r3, #32
 8005980:	6023      	strmi	r3, [r4, #0]
 8005982:	b91e      	cbnz	r6, 800598c <_printf_i+0x198>
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	f023 0320 	bic.w	r3, r3, #32
 800598a:	6023      	str	r3, [r4, #0]
 800598c:	2310      	movs	r3, #16
 800598e:	e7af      	b.n	80058f0 <_printf_i+0xfc>
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	f043 0320 	orr.w	r3, r3, #32
 8005996:	6023      	str	r3, [r4, #0]
 8005998:	2378      	movs	r3, #120	; 0x78
 800599a:	4828      	ldr	r0, [pc, #160]	; (8005a3c <_printf_i+0x248>)
 800599c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059a0:	e7e3      	b.n	800596a <_printf_i+0x176>
 80059a2:	0659      	lsls	r1, r3, #25
 80059a4:	bf48      	it	mi
 80059a6:	b2b6      	uxthmi	r6, r6
 80059a8:	e7e6      	b.n	8005978 <_printf_i+0x184>
 80059aa:	4615      	mov	r5, r2
 80059ac:	e7bb      	b.n	8005926 <_printf_i+0x132>
 80059ae:	682b      	ldr	r3, [r5, #0]
 80059b0:	6826      	ldr	r6, [r4, #0]
 80059b2:	1d18      	adds	r0, r3, #4
 80059b4:	6961      	ldr	r1, [r4, #20]
 80059b6:	6028      	str	r0, [r5, #0]
 80059b8:	0635      	lsls	r5, r6, #24
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	d501      	bpl.n	80059c2 <_printf_i+0x1ce>
 80059be:	6019      	str	r1, [r3, #0]
 80059c0:	e002      	b.n	80059c8 <_printf_i+0x1d4>
 80059c2:	0670      	lsls	r0, r6, #25
 80059c4:	d5fb      	bpl.n	80059be <_printf_i+0x1ca>
 80059c6:	8019      	strh	r1, [r3, #0]
 80059c8:	2300      	movs	r3, #0
 80059ca:	4615      	mov	r5, r2
 80059cc:	6123      	str	r3, [r4, #16]
 80059ce:	e7ba      	b.n	8005946 <_printf_i+0x152>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	2100      	movs	r1, #0
 80059d4:	1d1a      	adds	r2, r3, #4
 80059d6:	602a      	str	r2, [r5, #0]
 80059d8:	681d      	ldr	r5, [r3, #0]
 80059da:	6862      	ldr	r2, [r4, #4]
 80059dc:	4628      	mov	r0, r5
 80059de:	f000 fb13 	bl	8006008 <memchr>
 80059e2:	b108      	cbz	r0, 80059e8 <_printf_i+0x1f4>
 80059e4:	1b40      	subs	r0, r0, r5
 80059e6:	6060      	str	r0, [r4, #4]
 80059e8:	6863      	ldr	r3, [r4, #4]
 80059ea:	6123      	str	r3, [r4, #16]
 80059ec:	2300      	movs	r3, #0
 80059ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059f2:	e7a8      	b.n	8005946 <_printf_i+0x152>
 80059f4:	462a      	mov	r2, r5
 80059f6:	4649      	mov	r1, r9
 80059f8:	4640      	mov	r0, r8
 80059fa:	6923      	ldr	r3, [r4, #16]
 80059fc:	47d0      	blx	sl
 80059fe:	3001      	adds	r0, #1
 8005a00:	d0ab      	beq.n	800595a <_printf_i+0x166>
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	079b      	lsls	r3, r3, #30
 8005a06:	d413      	bmi.n	8005a30 <_printf_i+0x23c>
 8005a08:	68e0      	ldr	r0, [r4, #12]
 8005a0a:	9b03      	ldr	r3, [sp, #12]
 8005a0c:	4298      	cmp	r0, r3
 8005a0e:	bfb8      	it	lt
 8005a10:	4618      	movlt	r0, r3
 8005a12:	e7a4      	b.n	800595e <_printf_i+0x16a>
 8005a14:	2301      	movs	r3, #1
 8005a16:	4632      	mov	r2, r6
 8005a18:	4649      	mov	r1, r9
 8005a1a:	4640      	mov	r0, r8
 8005a1c:	47d0      	blx	sl
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d09b      	beq.n	800595a <_printf_i+0x166>
 8005a22:	3501      	adds	r5, #1
 8005a24:	68e3      	ldr	r3, [r4, #12]
 8005a26:	9903      	ldr	r1, [sp, #12]
 8005a28:	1a5b      	subs	r3, r3, r1
 8005a2a:	42ab      	cmp	r3, r5
 8005a2c:	dcf2      	bgt.n	8005a14 <_printf_i+0x220>
 8005a2e:	e7eb      	b.n	8005a08 <_printf_i+0x214>
 8005a30:	2500      	movs	r5, #0
 8005a32:	f104 0619 	add.w	r6, r4, #25
 8005a36:	e7f5      	b.n	8005a24 <_printf_i+0x230>
 8005a38:	080064a3 	.word	0x080064a3
 8005a3c:	080064b4 	.word	0x080064b4

08005a40 <__swbuf_r>:
 8005a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a42:	460e      	mov	r6, r1
 8005a44:	4614      	mov	r4, r2
 8005a46:	4605      	mov	r5, r0
 8005a48:	b118      	cbz	r0, 8005a52 <__swbuf_r+0x12>
 8005a4a:	6983      	ldr	r3, [r0, #24]
 8005a4c:	b90b      	cbnz	r3, 8005a52 <__swbuf_r+0x12>
 8005a4e:	f000 f9d5 	bl	8005dfc <__sinit>
 8005a52:	4b21      	ldr	r3, [pc, #132]	; (8005ad8 <__swbuf_r+0x98>)
 8005a54:	429c      	cmp	r4, r3
 8005a56:	d12b      	bne.n	8005ab0 <__swbuf_r+0x70>
 8005a58:	686c      	ldr	r4, [r5, #4]
 8005a5a:	69a3      	ldr	r3, [r4, #24]
 8005a5c:	60a3      	str	r3, [r4, #8]
 8005a5e:	89a3      	ldrh	r3, [r4, #12]
 8005a60:	071a      	lsls	r2, r3, #28
 8005a62:	d52f      	bpl.n	8005ac4 <__swbuf_r+0x84>
 8005a64:	6923      	ldr	r3, [r4, #16]
 8005a66:	b36b      	cbz	r3, 8005ac4 <__swbuf_r+0x84>
 8005a68:	6923      	ldr	r3, [r4, #16]
 8005a6a:	6820      	ldr	r0, [r4, #0]
 8005a6c:	b2f6      	uxtb	r6, r6
 8005a6e:	1ac0      	subs	r0, r0, r3
 8005a70:	6963      	ldr	r3, [r4, #20]
 8005a72:	4637      	mov	r7, r6
 8005a74:	4283      	cmp	r3, r0
 8005a76:	dc04      	bgt.n	8005a82 <__swbuf_r+0x42>
 8005a78:	4621      	mov	r1, r4
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f000 f92a 	bl	8005cd4 <_fflush_r>
 8005a80:	bb30      	cbnz	r0, 8005ad0 <__swbuf_r+0x90>
 8005a82:	68a3      	ldr	r3, [r4, #8]
 8005a84:	3001      	adds	r0, #1
 8005a86:	3b01      	subs	r3, #1
 8005a88:	60a3      	str	r3, [r4, #8]
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	6022      	str	r2, [r4, #0]
 8005a90:	701e      	strb	r6, [r3, #0]
 8005a92:	6963      	ldr	r3, [r4, #20]
 8005a94:	4283      	cmp	r3, r0
 8005a96:	d004      	beq.n	8005aa2 <__swbuf_r+0x62>
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	07db      	lsls	r3, r3, #31
 8005a9c:	d506      	bpl.n	8005aac <__swbuf_r+0x6c>
 8005a9e:	2e0a      	cmp	r6, #10
 8005aa0:	d104      	bne.n	8005aac <__swbuf_r+0x6c>
 8005aa2:	4621      	mov	r1, r4
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	f000 f915 	bl	8005cd4 <_fflush_r>
 8005aaa:	b988      	cbnz	r0, 8005ad0 <__swbuf_r+0x90>
 8005aac:	4638      	mov	r0, r7
 8005aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ab0:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <__swbuf_r+0x9c>)
 8005ab2:	429c      	cmp	r4, r3
 8005ab4:	d101      	bne.n	8005aba <__swbuf_r+0x7a>
 8005ab6:	68ac      	ldr	r4, [r5, #8]
 8005ab8:	e7cf      	b.n	8005a5a <__swbuf_r+0x1a>
 8005aba:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <__swbuf_r+0xa0>)
 8005abc:	429c      	cmp	r4, r3
 8005abe:	bf08      	it	eq
 8005ac0:	68ec      	ldreq	r4, [r5, #12]
 8005ac2:	e7ca      	b.n	8005a5a <__swbuf_r+0x1a>
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f000 f80c 	bl	8005ae4 <__swsetup_r>
 8005acc:	2800      	cmp	r0, #0
 8005ace:	d0cb      	beq.n	8005a68 <__swbuf_r+0x28>
 8005ad0:	f04f 37ff 	mov.w	r7, #4294967295
 8005ad4:	e7ea      	b.n	8005aac <__swbuf_r+0x6c>
 8005ad6:	bf00      	nop
 8005ad8:	080064e8 	.word	0x080064e8
 8005adc:	08006508 	.word	0x08006508
 8005ae0:	080064c8 	.word	0x080064c8

08005ae4 <__swsetup_r>:
 8005ae4:	4b32      	ldr	r3, [pc, #200]	; (8005bb0 <__swsetup_r+0xcc>)
 8005ae6:	b570      	push	{r4, r5, r6, lr}
 8005ae8:	681d      	ldr	r5, [r3, #0]
 8005aea:	4606      	mov	r6, r0
 8005aec:	460c      	mov	r4, r1
 8005aee:	b125      	cbz	r5, 8005afa <__swsetup_r+0x16>
 8005af0:	69ab      	ldr	r3, [r5, #24]
 8005af2:	b913      	cbnz	r3, 8005afa <__swsetup_r+0x16>
 8005af4:	4628      	mov	r0, r5
 8005af6:	f000 f981 	bl	8005dfc <__sinit>
 8005afa:	4b2e      	ldr	r3, [pc, #184]	; (8005bb4 <__swsetup_r+0xd0>)
 8005afc:	429c      	cmp	r4, r3
 8005afe:	d10f      	bne.n	8005b20 <__swsetup_r+0x3c>
 8005b00:	686c      	ldr	r4, [r5, #4]
 8005b02:	89a3      	ldrh	r3, [r4, #12]
 8005b04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b08:	0719      	lsls	r1, r3, #28
 8005b0a:	d42c      	bmi.n	8005b66 <__swsetup_r+0x82>
 8005b0c:	06dd      	lsls	r5, r3, #27
 8005b0e:	d411      	bmi.n	8005b34 <__swsetup_r+0x50>
 8005b10:	2309      	movs	r3, #9
 8005b12:	6033      	str	r3, [r6, #0]
 8005b14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b18:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1c:	81a3      	strh	r3, [r4, #12]
 8005b1e:	e03e      	b.n	8005b9e <__swsetup_r+0xba>
 8005b20:	4b25      	ldr	r3, [pc, #148]	; (8005bb8 <__swsetup_r+0xd4>)
 8005b22:	429c      	cmp	r4, r3
 8005b24:	d101      	bne.n	8005b2a <__swsetup_r+0x46>
 8005b26:	68ac      	ldr	r4, [r5, #8]
 8005b28:	e7eb      	b.n	8005b02 <__swsetup_r+0x1e>
 8005b2a:	4b24      	ldr	r3, [pc, #144]	; (8005bbc <__swsetup_r+0xd8>)
 8005b2c:	429c      	cmp	r4, r3
 8005b2e:	bf08      	it	eq
 8005b30:	68ec      	ldreq	r4, [r5, #12]
 8005b32:	e7e6      	b.n	8005b02 <__swsetup_r+0x1e>
 8005b34:	0758      	lsls	r0, r3, #29
 8005b36:	d512      	bpl.n	8005b5e <__swsetup_r+0x7a>
 8005b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b3a:	b141      	cbz	r1, 8005b4e <__swsetup_r+0x6a>
 8005b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b40:	4299      	cmp	r1, r3
 8005b42:	d002      	beq.n	8005b4a <__swsetup_r+0x66>
 8005b44:	4630      	mov	r0, r6
 8005b46:	f7ff fc45 	bl	80053d4 <_free_r>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	6363      	str	r3, [r4, #52]	; 0x34
 8005b4e:	89a3      	ldrh	r3, [r4, #12]
 8005b50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b54:	81a3      	strh	r3, [r4, #12]
 8005b56:	2300      	movs	r3, #0
 8005b58:	6063      	str	r3, [r4, #4]
 8005b5a:	6923      	ldr	r3, [r4, #16]
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	f043 0308 	orr.w	r3, r3, #8
 8005b64:	81a3      	strh	r3, [r4, #12]
 8005b66:	6923      	ldr	r3, [r4, #16]
 8005b68:	b94b      	cbnz	r3, 8005b7e <__swsetup_r+0x9a>
 8005b6a:	89a3      	ldrh	r3, [r4, #12]
 8005b6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b74:	d003      	beq.n	8005b7e <__swsetup_r+0x9a>
 8005b76:	4621      	mov	r1, r4
 8005b78:	4630      	mov	r0, r6
 8005b7a:	f000 fa05 	bl	8005f88 <__smakebuf_r>
 8005b7e:	89a0      	ldrh	r0, [r4, #12]
 8005b80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b84:	f010 0301 	ands.w	r3, r0, #1
 8005b88:	d00a      	beq.n	8005ba0 <__swsetup_r+0xbc>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60a3      	str	r3, [r4, #8]
 8005b8e:	6963      	ldr	r3, [r4, #20]
 8005b90:	425b      	negs	r3, r3
 8005b92:	61a3      	str	r3, [r4, #24]
 8005b94:	6923      	ldr	r3, [r4, #16]
 8005b96:	b943      	cbnz	r3, 8005baa <__swsetup_r+0xc6>
 8005b98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b9c:	d1ba      	bne.n	8005b14 <__swsetup_r+0x30>
 8005b9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ba0:	0781      	lsls	r1, r0, #30
 8005ba2:	bf58      	it	pl
 8005ba4:	6963      	ldrpl	r3, [r4, #20]
 8005ba6:	60a3      	str	r3, [r4, #8]
 8005ba8:	e7f4      	b.n	8005b94 <__swsetup_r+0xb0>
 8005baa:	2000      	movs	r0, #0
 8005bac:	e7f7      	b.n	8005b9e <__swsetup_r+0xba>
 8005bae:	bf00      	nop
 8005bb0:	2000000c 	.word	0x2000000c
 8005bb4:	080064e8 	.word	0x080064e8
 8005bb8:	08006508 	.word	0x08006508
 8005bbc:	080064c8 	.word	0x080064c8

08005bc0 <abort>:
 8005bc0:	2006      	movs	r0, #6
 8005bc2:	b508      	push	{r3, lr}
 8005bc4:	f000 fa56 	bl	8006074 <raise>
 8005bc8:	2001      	movs	r0, #1
 8005bca:	f7fb fd7f 	bl	80016cc <_exit>
	...

08005bd0 <__sflush_r>:
 8005bd0:	898a      	ldrh	r2, [r1, #12]
 8005bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	0710      	lsls	r0, r2, #28
 8005bd8:	460c      	mov	r4, r1
 8005bda:	d457      	bmi.n	8005c8c <__sflush_r+0xbc>
 8005bdc:	684b      	ldr	r3, [r1, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	dc04      	bgt.n	8005bec <__sflush_r+0x1c>
 8005be2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	dc01      	bgt.n	8005bec <__sflush_r+0x1c>
 8005be8:	2000      	movs	r0, #0
 8005bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bee:	2e00      	cmp	r6, #0
 8005bf0:	d0fa      	beq.n	8005be8 <__sflush_r+0x18>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bf8:	682f      	ldr	r7, [r5, #0]
 8005bfa:	602b      	str	r3, [r5, #0]
 8005bfc:	d032      	beq.n	8005c64 <__sflush_r+0x94>
 8005bfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c00:	89a3      	ldrh	r3, [r4, #12]
 8005c02:	075a      	lsls	r2, r3, #29
 8005c04:	d505      	bpl.n	8005c12 <__sflush_r+0x42>
 8005c06:	6863      	ldr	r3, [r4, #4]
 8005c08:	1ac0      	subs	r0, r0, r3
 8005c0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c0c:	b10b      	cbz	r3, 8005c12 <__sflush_r+0x42>
 8005c0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c10:	1ac0      	subs	r0, r0, r3
 8005c12:	2300      	movs	r3, #0
 8005c14:	4602      	mov	r2, r0
 8005c16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c18:	4628      	mov	r0, r5
 8005c1a:	6a21      	ldr	r1, [r4, #32]
 8005c1c:	47b0      	blx	r6
 8005c1e:	1c43      	adds	r3, r0, #1
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	d106      	bne.n	8005c32 <__sflush_r+0x62>
 8005c24:	6829      	ldr	r1, [r5, #0]
 8005c26:	291d      	cmp	r1, #29
 8005c28:	d82c      	bhi.n	8005c84 <__sflush_r+0xb4>
 8005c2a:	4a29      	ldr	r2, [pc, #164]	; (8005cd0 <__sflush_r+0x100>)
 8005c2c:	40ca      	lsrs	r2, r1
 8005c2e:	07d6      	lsls	r6, r2, #31
 8005c30:	d528      	bpl.n	8005c84 <__sflush_r+0xb4>
 8005c32:	2200      	movs	r2, #0
 8005c34:	6062      	str	r2, [r4, #4]
 8005c36:	6922      	ldr	r2, [r4, #16]
 8005c38:	04d9      	lsls	r1, r3, #19
 8005c3a:	6022      	str	r2, [r4, #0]
 8005c3c:	d504      	bpl.n	8005c48 <__sflush_r+0x78>
 8005c3e:	1c42      	adds	r2, r0, #1
 8005c40:	d101      	bne.n	8005c46 <__sflush_r+0x76>
 8005c42:	682b      	ldr	r3, [r5, #0]
 8005c44:	b903      	cbnz	r3, 8005c48 <__sflush_r+0x78>
 8005c46:	6560      	str	r0, [r4, #84]	; 0x54
 8005c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c4a:	602f      	str	r7, [r5, #0]
 8005c4c:	2900      	cmp	r1, #0
 8005c4e:	d0cb      	beq.n	8005be8 <__sflush_r+0x18>
 8005c50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c54:	4299      	cmp	r1, r3
 8005c56:	d002      	beq.n	8005c5e <__sflush_r+0x8e>
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f7ff fbbb 	bl	80053d4 <_free_r>
 8005c5e:	2000      	movs	r0, #0
 8005c60:	6360      	str	r0, [r4, #52]	; 0x34
 8005c62:	e7c2      	b.n	8005bea <__sflush_r+0x1a>
 8005c64:	6a21      	ldr	r1, [r4, #32]
 8005c66:	2301      	movs	r3, #1
 8005c68:	4628      	mov	r0, r5
 8005c6a:	47b0      	blx	r6
 8005c6c:	1c41      	adds	r1, r0, #1
 8005c6e:	d1c7      	bne.n	8005c00 <__sflush_r+0x30>
 8005c70:	682b      	ldr	r3, [r5, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0c4      	beq.n	8005c00 <__sflush_r+0x30>
 8005c76:	2b1d      	cmp	r3, #29
 8005c78:	d001      	beq.n	8005c7e <__sflush_r+0xae>
 8005c7a:	2b16      	cmp	r3, #22
 8005c7c:	d101      	bne.n	8005c82 <__sflush_r+0xb2>
 8005c7e:	602f      	str	r7, [r5, #0]
 8005c80:	e7b2      	b.n	8005be8 <__sflush_r+0x18>
 8005c82:	89a3      	ldrh	r3, [r4, #12]
 8005c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c88:	81a3      	strh	r3, [r4, #12]
 8005c8a:	e7ae      	b.n	8005bea <__sflush_r+0x1a>
 8005c8c:	690f      	ldr	r7, [r1, #16]
 8005c8e:	2f00      	cmp	r7, #0
 8005c90:	d0aa      	beq.n	8005be8 <__sflush_r+0x18>
 8005c92:	0793      	lsls	r3, r2, #30
 8005c94:	bf18      	it	ne
 8005c96:	2300      	movne	r3, #0
 8005c98:	680e      	ldr	r6, [r1, #0]
 8005c9a:	bf08      	it	eq
 8005c9c:	694b      	ldreq	r3, [r1, #20]
 8005c9e:	1bf6      	subs	r6, r6, r7
 8005ca0:	600f      	str	r7, [r1, #0]
 8005ca2:	608b      	str	r3, [r1, #8]
 8005ca4:	2e00      	cmp	r6, #0
 8005ca6:	dd9f      	ble.n	8005be8 <__sflush_r+0x18>
 8005ca8:	4633      	mov	r3, r6
 8005caa:	463a      	mov	r2, r7
 8005cac:	4628      	mov	r0, r5
 8005cae:	6a21      	ldr	r1, [r4, #32]
 8005cb0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005cb4:	47e0      	blx	ip
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	dc06      	bgt.n	8005cc8 <__sflush_r+0xf8>
 8005cba:	89a3      	ldrh	r3, [r4, #12]
 8005cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cc4:	81a3      	strh	r3, [r4, #12]
 8005cc6:	e790      	b.n	8005bea <__sflush_r+0x1a>
 8005cc8:	4407      	add	r7, r0
 8005cca:	1a36      	subs	r6, r6, r0
 8005ccc:	e7ea      	b.n	8005ca4 <__sflush_r+0xd4>
 8005cce:	bf00      	nop
 8005cd0:	20400001 	.word	0x20400001

08005cd4 <_fflush_r>:
 8005cd4:	b538      	push	{r3, r4, r5, lr}
 8005cd6:	690b      	ldr	r3, [r1, #16]
 8005cd8:	4605      	mov	r5, r0
 8005cda:	460c      	mov	r4, r1
 8005cdc:	b913      	cbnz	r3, 8005ce4 <_fflush_r+0x10>
 8005cde:	2500      	movs	r5, #0
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	bd38      	pop	{r3, r4, r5, pc}
 8005ce4:	b118      	cbz	r0, 8005cee <_fflush_r+0x1a>
 8005ce6:	6983      	ldr	r3, [r0, #24]
 8005ce8:	b90b      	cbnz	r3, 8005cee <_fflush_r+0x1a>
 8005cea:	f000 f887 	bl	8005dfc <__sinit>
 8005cee:	4b14      	ldr	r3, [pc, #80]	; (8005d40 <_fflush_r+0x6c>)
 8005cf0:	429c      	cmp	r4, r3
 8005cf2:	d11b      	bne.n	8005d2c <_fflush_r+0x58>
 8005cf4:	686c      	ldr	r4, [r5, #4]
 8005cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0ef      	beq.n	8005cde <_fflush_r+0xa>
 8005cfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d00:	07d0      	lsls	r0, r2, #31
 8005d02:	d404      	bmi.n	8005d0e <_fflush_r+0x3a>
 8005d04:	0599      	lsls	r1, r3, #22
 8005d06:	d402      	bmi.n	8005d0e <_fflush_r+0x3a>
 8005d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d0a:	f000 f915 	bl	8005f38 <__retarget_lock_acquire_recursive>
 8005d0e:	4628      	mov	r0, r5
 8005d10:	4621      	mov	r1, r4
 8005d12:	f7ff ff5d 	bl	8005bd0 <__sflush_r>
 8005d16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d18:	4605      	mov	r5, r0
 8005d1a:	07da      	lsls	r2, r3, #31
 8005d1c:	d4e0      	bmi.n	8005ce0 <_fflush_r+0xc>
 8005d1e:	89a3      	ldrh	r3, [r4, #12]
 8005d20:	059b      	lsls	r3, r3, #22
 8005d22:	d4dd      	bmi.n	8005ce0 <_fflush_r+0xc>
 8005d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d26:	f000 f908 	bl	8005f3a <__retarget_lock_release_recursive>
 8005d2a:	e7d9      	b.n	8005ce0 <_fflush_r+0xc>
 8005d2c:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <_fflush_r+0x70>)
 8005d2e:	429c      	cmp	r4, r3
 8005d30:	d101      	bne.n	8005d36 <_fflush_r+0x62>
 8005d32:	68ac      	ldr	r4, [r5, #8]
 8005d34:	e7df      	b.n	8005cf6 <_fflush_r+0x22>
 8005d36:	4b04      	ldr	r3, [pc, #16]	; (8005d48 <_fflush_r+0x74>)
 8005d38:	429c      	cmp	r4, r3
 8005d3a:	bf08      	it	eq
 8005d3c:	68ec      	ldreq	r4, [r5, #12]
 8005d3e:	e7da      	b.n	8005cf6 <_fflush_r+0x22>
 8005d40:	080064e8 	.word	0x080064e8
 8005d44:	08006508 	.word	0x08006508
 8005d48:	080064c8 	.word	0x080064c8

08005d4c <std>:
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	b510      	push	{r4, lr}
 8005d50:	4604      	mov	r4, r0
 8005d52:	e9c0 3300 	strd	r3, r3, [r0]
 8005d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d5a:	6083      	str	r3, [r0, #8]
 8005d5c:	8181      	strh	r1, [r0, #12]
 8005d5e:	6643      	str	r3, [r0, #100]	; 0x64
 8005d60:	81c2      	strh	r2, [r0, #14]
 8005d62:	6183      	str	r3, [r0, #24]
 8005d64:	4619      	mov	r1, r3
 8005d66:	2208      	movs	r2, #8
 8005d68:	305c      	adds	r0, #92	; 0x5c
 8005d6a:	f7fd fec7 	bl	8003afc <memset>
 8005d6e:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <std+0x38>)
 8005d70:	6224      	str	r4, [r4, #32]
 8005d72:	6263      	str	r3, [r4, #36]	; 0x24
 8005d74:	4b04      	ldr	r3, [pc, #16]	; (8005d88 <std+0x3c>)
 8005d76:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d78:	4b04      	ldr	r3, [pc, #16]	; (8005d8c <std+0x40>)
 8005d7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d7c:	4b04      	ldr	r3, [pc, #16]	; (8005d90 <std+0x44>)
 8005d7e:	6323      	str	r3, [r4, #48]	; 0x30
 8005d80:	bd10      	pop	{r4, pc}
 8005d82:	bf00      	nop
 8005d84:	080060ad 	.word	0x080060ad
 8005d88:	080060cf 	.word	0x080060cf
 8005d8c:	08006107 	.word	0x08006107
 8005d90:	0800612b 	.word	0x0800612b

08005d94 <_cleanup_r>:
 8005d94:	4901      	ldr	r1, [pc, #4]	; (8005d9c <_cleanup_r+0x8>)
 8005d96:	f000 b8af 	b.w	8005ef8 <_fwalk_reent>
 8005d9a:	bf00      	nop
 8005d9c:	08005cd5 	.word	0x08005cd5

08005da0 <__sfmoreglue>:
 8005da0:	2268      	movs	r2, #104	; 0x68
 8005da2:	b570      	push	{r4, r5, r6, lr}
 8005da4:	1e4d      	subs	r5, r1, #1
 8005da6:	4355      	muls	r5, r2
 8005da8:	460e      	mov	r6, r1
 8005daa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005dae:	f7fe fbb9 	bl	8004524 <_malloc_r>
 8005db2:	4604      	mov	r4, r0
 8005db4:	b140      	cbz	r0, 8005dc8 <__sfmoreglue+0x28>
 8005db6:	2100      	movs	r1, #0
 8005db8:	e9c0 1600 	strd	r1, r6, [r0]
 8005dbc:	300c      	adds	r0, #12
 8005dbe:	60a0      	str	r0, [r4, #8]
 8005dc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005dc4:	f7fd fe9a 	bl	8003afc <memset>
 8005dc8:	4620      	mov	r0, r4
 8005dca:	bd70      	pop	{r4, r5, r6, pc}

08005dcc <__sfp_lock_acquire>:
 8005dcc:	4801      	ldr	r0, [pc, #4]	; (8005dd4 <__sfp_lock_acquire+0x8>)
 8005dce:	f000 b8b3 	b.w	8005f38 <__retarget_lock_acquire_recursive>
 8005dd2:	bf00      	nop
 8005dd4:	20000125 	.word	0x20000125

08005dd8 <__sfp_lock_release>:
 8005dd8:	4801      	ldr	r0, [pc, #4]	; (8005de0 <__sfp_lock_release+0x8>)
 8005dda:	f000 b8ae 	b.w	8005f3a <__retarget_lock_release_recursive>
 8005dde:	bf00      	nop
 8005de0:	20000125 	.word	0x20000125

08005de4 <__sinit_lock_acquire>:
 8005de4:	4801      	ldr	r0, [pc, #4]	; (8005dec <__sinit_lock_acquire+0x8>)
 8005de6:	f000 b8a7 	b.w	8005f38 <__retarget_lock_acquire_recursive>
 8005dea:	bf00      	nop
 8005dec:	20000126 	.word	0x20000126

08005df0 <__sinit_lock_release>:
 8005df0:	4801      	ldr	r0, [pc, #4]	; (8005df8 <__sinit_lock_release+0x8>)
 8005df2:	f000 b8a2 	b.w	8005f3a <__retarget_lock_release_recursive>
 8005df6:	bf00      	nop
 8005df8:	20000126 	.word	0x20000126

08005dfc <__sinit>:
 8005dfc:	b510      	push	{r4, lr}
 8005dfe:	4604      	mov	r4, r0
 8005e00:	f7ff fff0 	bl	8005de4 <__sinit_lock_acquire>
 8005e04:	69a3      	ldr	r3, [r4, #24]
 8005e06:	b11b      	cbz	r3, 8005e10 <__sinit+0x14>
 8005e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e0c:	f7ff bff0 	b.w	8005df0 <__sinit_lock_release>
 8005e10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e14:	6523      	str	r3, [r4, #80]	; 0x50
 8005e16:	4b13      	ldr	r3, [pc, #76]	; (8005e64 <__sinit+0x68>)
 8005e18:	4a13      	ldr	r2, [pc, #76]	; (8005e68 <__sinit+0x6c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e1e:	42a3      	cmp	r3, r4
 8005e20:	bf08      	it	eq
 8005e22:	2301      	moveq	r3, #1
 8005e24:	4620      	mov	r0, r4
 8005e26:	bf08      	it	eq
 8005e28:	61a3      	streq	r3, [r4, #24]
 8005e2a:	f000 f81f 	bl	8005e6c <__sfp>
 8005e2e:	6060      	str	r0, [r4, #4]
 8005e30:	4620      	mov	r0, r4
 8005e32:	f000 f81b 	bl	8005e6c <__sfp>
 8005e36:	60a0      	str	r0, [r4, #8]
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f000 f817 	bl	8005e6c <__sfp>
 8005e3e:	2200      	movs	r2, #0
 8005e40:	2104      	movs	r1, #4
 8005e42:	60e0      	str	r0, [r4, #12]
 8005e44:	6860      	ldr	r0, [r4, #4]
 8005e46:	f7ff ff81 	bl	8005d4c <std>
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	2109      	movs	r1, #9
 8005e4e:	68a0      	ldr	r0, [r4, #8]
 8005e50:	f7ff ff7c 	bl	8005d4c <std>
 8005e54:	2202      	movs	r2, #2
 8005e56:	2112      	movs	r1, #18
 8005e58:	68e0      	ldr	r0, [r4, #12]
 8005e5a:	f7ff ff77 	bl	8005d4c <std>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	61a3      	str	r3, [r4, #24]
 8005e62:	e7d1      	b.n	8005e08 <__sinit+0xc>
 8005e64:	08006264 	.word	0x08006264
 8005e68:	08005d95 	.word	0x08005d95

08005e6c <__sfp>:
 8005e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6e:	4607      	mov	r7, r0
 8005e70:	f7ff ffac 	bl	8005dcc <__sfp_lock_acquire>
 8005e74:	4b1e      	ldr	r3, [pc, #120]	; (8005ef0 <__sfp+0x84>)
 8005e76:	681e      	ldr	r6, [r3, #0]
 8005e78:	69b3      	ldr	r3, [r6, #24]
 8005e7a:	b913      	cbnz	r3, 8005e82 <__sfp+0x16>
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	f7ff ffbd 	bl	8005dfc <__sinit>
 8005e82:	3648      	adds	r6, #72	; 0x48
 8005e84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	d503      	bpl.n	8005e94 <__sfp+0x28>
 8005e8c:	6833      	ldr	r3, [r6, #0]
 8005e8e:	b30b      	cbz	r3, 8005ed4 <__sfp+0x68>
 8005e90:	6836      	ldr	r6, [r6, #0]
 8005e92:	e7f7      	b.n	8005e84 <__sfp+0x18>
 8005e94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e98:	b9d5      	cbnz	r5, 8005ed0 <__sfp+0x64>
 8005e9a:	4b16      	ldr	r3, [pc, #88]	; (8005ef4 <__sfp+0x88>)
 8005e9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ea0:	60e3      	str	r3, [r4, #12]
 8005ea2:	6665      	str	r5, [r4, #100]	; 0x64
 8005ea4:	f000 f847 	bl	8005f36 <__retarget_lock_init_recursive>
 8005ea8:	f7ff ff96 	bl	8005dd8 <__sfp_lock_release>
 8005eac:	2208      	movs	r2, #8
 8005eae:	4629      	mov	r1, r5
 8005eb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005eb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005eb8:	6025      	str	r5, [r4, #0]
 8005eba:	61a5      	str	r5, [r4, #24]
 8005ebc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ec0:	f7fd fe1c 	bl	8003afc <memset>
 8005ec4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ec8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ecc:	4620      	mov	r0, r4
 8005ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ed0:	3468      	adds	r4, #104	; 0x68
 8005ed2:	e7d9      	b.n	8005e88 <__sfp+0x1c>
 8005ed4:	2104      	movs	r1, #4
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	f7ff ff62 	bl	8005da0 <__sfmoreglue>
 8005edc:	4604      	mov	r4, r0
 8005ede:	6030      	str	r0, [r6, #0]
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	d1d5      	bne.n	8005e90 <__sfp+0x24>
 8005ee4:	f7ff ff78 	bl	8005dd8 <__sfp_lock_release>
 8005ee8:	230c      	movs	r3, #12
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	e7ee      	b.n	8005ecc <__sfp+0x60>
 8005eee:	bf00      	nop
 8005ef0:	08006264 	.word	0x08006264
 8005ef4:	ffff0001 	.word	0xffff0001

08005ef8 <_fwalk_reent>:
 8005ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005efc:	4606      	mov	r6, r0
 8005efe:	4688      	mov	r8, r1
 8005f00:	2700      	movs	r7, #0
 8005f02:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f0a:	f1b9 0901 	subs.w	r9, r9, #1
 8005f0e:	d505      	bpl.n	8005f1c <_fwalk_reent+0x24>
 8005f10:	6824      	ldr	r4, [r4, #0]
 8005f12:	2c00      	cmp	r4, #0
 8005f14:	d1f7      	bne.n	8005f06 <_fwalk_reent+0xe>
 8005f16:	4638      	mov	r0, r7
 8005f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f1c:	89ab      	ldrh	r3, [r5, #12]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d907      	bls.n	8005f32 <_fwalk_reent+0x3a>
 8005f22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f26:	3301      	adds	r3, #1
 8005f28:	d003      	beq.n	8005f32 <_fwalk_reent+0x3a>
 8005f2a:	4629      	mov	r1, r5
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	47c0      	blx	r8
 8005f30:	4307      	orrs	r7, r0
 8005f32:	3568      	adds	r5, #104	; 0x68
 8005f34:	e7e9      	b.n	8005f0a <_fwalk_reent+0x12>

08005f36 <__retarget_lock_init_recursive>:
 8005f36:	4770      	bx	lr

08005f38 <__retarget_lock_acquire_recursive>:
 8005f38:	4770      	bx	lr

08005f3a <__retarget_lock_release_recursive>:
 8005f3a:	4770      	bx	lr

08005f3c <__swhatbuf_r>:
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	460e      	mov	r6, r1
 8005f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f44:	4614      	mov	r4, r2
 8005f46:	2900      	cmp	r1, #0
 8005f48:	461d      	mov	r5, r3
 8005f4a:	b096      	sub	sp, #88	; 0x58
 8005f4c:	da08      	bge.n	8005f60 <__swhatbuf_r+0x24>
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005f54:	602a      	str	r2, [r5, #0]
 8005f56:	061a      	lsls	r2, r3, #24
 8005f58:	d410      	bmi.n	8005f7c <__swhatbuf_r+0x40>
 8005f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f5e:	e00e      	b.n	8005f7e <__swhatbuf_r+0x42>
 8005f60:	466a      	mov	r2, sp
 8005f62:	f000 f909 	bl	8006178 <_fstat_r>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	dbf1      	blt.n	8005f4e <__swhatbuf_r+0x12>
 8005f6a:	9a01      	ldr	r2, [sp, #4]
 8005f6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f74:	425a      	negs	r2, r3
 8005f76:	415a      	adcs	r2, r3
 8005f78:	602a      	str	r2, [r5, #0]
 8005f7a:	e7ee      	b.n	8005f5a <__swhatbuf_r+0x1e>
 8005f7c:	2340      	movs	r3, #64	; 0x40
 8005f7e:	2000      	movs	r0, #0
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	b016      	add	sp, #88	; 0x58
 8005f84:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f88 <__smakebuf_r>:
 8005f88:	898b      	ldrh	r3, [r1, #12]
 8005f8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f8c:	079d      	lsls	r5, r3, #30
 8005f8e:	4606      	mov	r6, r0
 8005f90:	460c      	mov	r4, r1
 8005f92:	d507      	bpl.n	8005fa4 <__smakebuf_r+0x1c>
 8005f94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	6123      	str	r3, [r4, #16]
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	6163      	str	r3, [r4, #20]
 8005fa0:	b002      	add	sp, #8
 8005fa2:	bd70      	pop	{r4, r5, r6, pc}
 8005fa4:	466a      	mov	r2, sp
 8005fa6:	ab01      	add	r3, sp, #4
 8005fa8:	f7ff ffc8 	bl	8005f3c <__swhatbuf_r>
 8005fac:	9900      	ldr	r1, [sp, #0]
 8005fae:	4605      	mov	r5, r0
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	f7fe fab7 	bl	8004524 <_malloc_r>
 8005fb6:	b948      	cbnz	r0, 8005fcc <__smakebuf_r+0x44>
 8005fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fbc:	059a      	lsls	r2, r3, #22
 8005fbe:	d4ef      	bmi.n	8005fa0 <__smakebuf_r+0x18>
 8005fc0:	f023 0303 	bic.w	r3, r3, #3
 8005fc4:	f043 0302 	orr.w	r3, r3, #2
 8005fc8:	81a3      	strh	r3, [r4, #12]
 8005fca:	e7e3      	b.n	8005f94 <__smakebuf_r+0xc>
 8005fcc:	4b0d      	ldr	r3, [pc, #52]	; (8006004 <__smakebuf_r+0x7c>)
 8005fce:	62b3      	str	r3, [r6, #40]	; 0x28
 8005fd0:	89a3      	ldrh	r3, [r4, #12]
 8005fd2:	6020      	str	r0, [r4, #0]
 8005fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd8:	81a3      	strh	r3, [r4, #12]
 8005fda:	9b00      	ldr	r3, [sp, #0]
 8005fdc:	6120      	str	r0, [r4, #16]
 8005fde:	6163      	str	r3, [r4, #20]
 8005fe0:	9b01      	ldr	r3, [sp, #4]
 8005fe2:	b15b      	cbz	r3, 8005ffc <__smakebuf_r+0x74>
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fea:	f000 f8d7 	bl	800619c <_isatty_r>
 8005fee:	b128      	cbz	r0, 8005ffc <__smakebuf_r+0x74>
 8005ff0:	89a3      	ldrh	r3, [r4, #12]
 8005ff2:	f023 0303 	bic.w	r3, r3, #3
 8005ff6:	f043 0301 	orr.w	r3, r3, #1
 8005ffa:	81a3      	strh	r3, [r4, #12]
 8005ffc:	89a0      	ldrh	r0, [r4, #12]
 8005ffe:	4305      	orrs	r5, r0
 8006000:	81a5      	strh	r5, [r4, #12]
 8006002:	e7cd      	b.n	8005fa0 <__smakebuf_r+0x18>
 8006004:	08005d95 	.word	0x08005d95

08006008 <memchr>:
 8006008:	4603      	mov	r3, r0
 800600a:	b510      	push	{r4, lr}
 800600c:	b2c9      	uxtb	r1, r1
 800600e:	4402      	add	r2, r0
 8006010:	4293      	cmp	r3, r2
 8006012:	4618      	mov	r0, r3
 8006014:	d101      	bne.n	800601a <memchr+0x12>
 8006016:	2000      	movs	r0, #0
 8006018:	e003      	b.n	8006022 <memchr+0x1a>
 800601a:	7804      	ldrb	r4, [r0, #0]
 800601c:	3301      	adds	r3, #1
 800601e:	428c      	cmp	r4, r1
 8006020:	d1f6      	bne.n	8006010 <memchr+0x8>
 8006022:	bd10      	pop	{r4, pc}

08006024 <_raise_r>:
 8006024:	291f      	cmp	r1, #31
 8006026:	b538      	push	{r3, r4, r5, lr}
 8006028:	4604      	mov	r4, r0
 800602a:	460d      	mov	r5, r1
 800602c:	d904      	bls.n	8006038 <_raise_r+0x14>
 800602e:	2316      	movs	r3, #22
 8006030:	6003      	str	r3, [r0, #0]
 8006032:	f04f 30ff 	mov.w	r0, #4294967295
 8006036:	bd38      	pop	{r3, r4, r5, pc}
 8006038:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800603a:	b112      	cbz	r2, 8006042 <_raise_r+0x1e>
 800603c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006040:	b94b      	cbnz	r3, 8006056 <_raise_r+0x32>
 8006042:	4620      	mov	r0, r4
 8006044:	f000 f830 	bl	80060a8 <_getpid_r>
 8006048:	462a      	mov	r2, r5
 800604a:	4601      	mov	r1, r0
 800604c:	4620      	mov	r0, r4
 800604e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006052:	f000 b817 	b.w	8006084 <_kill_r>
 8006056:	2b01      	cmp	r3, #1
 8006058:	d00a      	beq.n	8006070 <_raise_r+0x4c>
 800605a:	1c59      	adds	r1, r3, #1
 800605c:	d103      	bne.n	8006066 <_raise_r+0x42>
 800605e:	2316      	movs	r3, #22
 8006060:	6003      	str	r3, [r0, #0]
 8006062:	2001      	movs	r0, #1
 8006064:	e7e7      	b.n	8006036 <_raise_r+0x12>
 8006066:	2400      	movs	r4, #0
 8006068:	4628      	mov	r0, r5
 800606a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800606e:	4798      	blx	r3
 8006070:	2000      	movs	r0, #0
 8006072:	e7e0      	b.n	8006036 <_raise_r+0x12>

08006074 <raise>:
 8006074:	4b02      	ldr	r3, [pc, #8]	; (8006080 <raise+0xc>)
 8006076:	4601      	mov	r1, r0
 8006078:	6818      	ldr	r0, [r3, #0]
 800607a:	f7ff bfd3 	b.w	8006024 <_raise_r>
 800607e:	bf00      	nop
 8006080:	2000000c 	.word	0x2000000c

08006084 <_kill_r>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	2300      	movs	r3, #0
 8006088:	4d06      	ldr	r5, [pc, #24]	; (80060a4 <_kill_r+0x20>)
 800608a:	4604      	mov	r4, r0
 800608c:	4608      	mov	r0, r1
 800608e:	4611      	mov	r1, r2
 8006090:	602b      	str	r3, [r5, #0]
 8006092:	f7fb fb0b 	bl	80016ac <_kill>
 8006096:	1c43      	adds	r3, r0, #1
 8006098:	d102      	bne.n	80060a0 <_kill_r+0x1c>
 800609a:	682b      	ldr	r3, [r5, #0]
 800609c:	b103      	cbz	r3, 80060a0 <_kill_r+0x1c>
 800609e:	6023      	str	r3, [r4, #0]
 80060a0:	bd38      	pop	{r3, r4, r5, pc}
 80060a2:	bf00      	nop
 80060a4:	20000120 	.word	0x20000120

080060a8 <_getpid_r>:
 80060a8:	f7fb baf9 	b.w	800169e <_getpid>

080060ac <__sread>:
 80060ac:	b510      	push	{r4, lr}
 80060ae:	460c      	mov	r4, r1
 80060b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060b4:	f000 f894 	bl	80061e0 <_read_r>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	bfab      	itete	ge
 80060bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060be:	89a3      	ldrhlt	r3, [r4, #12]
 80060c0:	181b      	addge	r3, r3, r0
 80060c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060c6:	bfac      	ite	ge
 80060c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80060ca:	81a3      	strhlt	r3, [r4, #12]
 80060cc:	bd10      	pop	{r4, pc}

080060ce <__swrite>:
 80060ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d2:	461f      	mov	r7, r3
 80060d4:	898b      	ldrh	r3, [r1, #12]
 80060d6:	4605      	mov	r5, r0
 80060d8:	05db      	lsls	r3, r3, #23
 80060da:	460c      	mov	r4, r1
 80060dc:	4616      	mov	r6, r2
 80060de:	d505      	bpl.n	80060ec <__swrite+0x1e>
 80060e0:	2302      	movs	r3, #2
 80060e2:	2200      	movs	r2, #0
 80060e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060e8:	f000 f868 	bl	80061bc <_lseek_r>
 80060ec:	89a3      	ldrh	r3, [r4, #12]
 80060ee:	4632      	mov	r2, r6
 80060f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060f4:	81a3      	strh	r3, [r4, #12]
 80060f6:	4628      	mov	r0, r5
 80060f8:	463b      	mov	r3, r7
 80060fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006102:	f000 b817 	b.w	8006134 <_write_r>

08006106 <__sseek>:
 8006106:	b510      	push	{r4, lr}
 8006108:	460c      	mov	r4, r1
 800610a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800610e:	f000 f855 	bl	80061bc <_lseek_r>
 8006112:	1c43      	adds	r3, r0, #1
 8006114:	89a3      	ldrh	r3, [r4, #12]
 8006116:	bf15      	itete	ne
 8006118:	6560      	strne	r0, [r4, #84]	; 0x54
 800611a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800611e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006122:	81a3      	strheq	r3, [r4, #12]
 8006124:	bf18      	it	ne
 8006126:	81a3      	strhne	r3, [r4, #12]
 8006128:	bd10      	pop	{r4, pc}

0800612a <__sclose>:
 800612a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800612e:	f000 b813 	b.w	8006158 <_close_r>
	...

08006134 <_write_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	4604      	mov	r4, r0
 8006138:	4608      	mov	r0, r1
 800613a:	4611      	mov	r1, r2
 800613c:	2200      	movs	r2, #0
 800613e:	4d05      	ldr	r5, [pc, #20]	; (8006154 <_write_r+0x20>)
 8006140:	602a      	str	r2, [r5, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	f7fb fae9 	bl	800171a <_write>
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	d102      	bne.n	8006152 <_write_r+0x1e>
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	b103      	cbz	r3, 8006152 <_write_r+0x1e>
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	bd38      	pop	{r3, r4, r5, pc}
 8006154:	20000120 	.word	0x20000120

08006158 <_close_r>:
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	2300      	movs	r3, #0
 800615c:	4d05      	ldr	r5, [pc, #20]	; (8006174 <_close_r+0x1c>)
 800615e:	4604      	mov	r4, r0
 8006160:	4608      	mov	r0, r1
 8006162:	602b      	str	r3, [r5, #0]
 8006164:	f7fb faf5 	bl	8001752 <_close>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d102      	bne.n	8006172 <_close_r+0x1a>
 800616c:	682b      	ldr	r3, [r5, #0]
 800616e:	b103      	cbz	r3, 8006172 <_close_r+0x1a>
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	bd38      	pop	{r3, r4, r5, pc}
 8006174:	20000120 	.word	0x20000120

08006178 <_fstat_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	2300      	movs	r3, #0
 800617c:	4d06      	ldr	r5, [pc, #24]	; (8006198 <_fstat_r+0x20>)
 800617e:	4604      	mov	r4, r0
 8006180:	4608      	mov	r0, r1
 8006182:	4611      	mov	r1, r2
 8006184:	602b      	str	r3, [r5, #0]
 8006186:	f7fb faef 	bl	8001768 <_fstat>
 800618a:	1c43      	adds	r3, r0, #1
 800618c:	d102      	bne.n	8006194 <_fstat_r+0x1c>
 800618e:	682b      	ldr	r3, [r5, #0]
 8006190:	b103      	cbz	r3, 8006194 <_fstat_r+0x1c>
 8006192:	6023      	str	r3, [r4, #0]
 8006194:	bd38      	pop	{r3, r4, r5, pc}
 8006196:	bf00      	nop
 8006198:	20000120 	.word	0x20000120

0800619c <_isatty_r>:
 800619c:	b538      	push	{r3, r4, r5, lr}
 800619e:	2300      	movs	r3, #0
 80061a0:	4d05      	ldr	r5, [pc, #20]	; (80061b8 <_isatty_r+0x1c>)
 80061a2:	4604      	mov	r4, r0
 80061a4:	4608      	mov	r0, r1
 80061a6:	602b      	str	r3, [r5, #0]
 80061a8:	f7fb faed 	bl	8001786 <_isatty>
 80061ac:	1c43      	adds	r3, r0, #1
 80061ae:	d102      	bne.n	80061b6 <_isatty_r+0x1a>
 80061b0:	682b      	ldr	r3, [r5, #0]
 80061b2:	b103      	cbz	r3, 80061b6 <_isatty_r+0x1a>
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	bd38      	pop	{r3, r4, r5, pc}
 80061b8:	20000120 	.word	0x20000120

080061bc <_lseek_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4604      	mov	r4, r0
 80061c0:	4608      	mov	r0, r1
 80061c2:	4611      	mov	r1, r2
 80061c4:	2200      	movs	r2, #0
 80061c6:	4d05      	ldr	r5, [pc, #20]	; (80061dc <_lseek_r+0x20>)
 80061c8:	602a      	str	r2, [r5, #0]
 80061ca:	461a      	mov	r2, r3
 80061cc:	f7fb fae5 	bl	800179a <_lseek>
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	d102      	bne.n	80061da <_lseek_r+0x1e>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	b103      	cbz	r3, 80061da <_lseek_r+0x1e>
 80061d8:	6023      	str	r3, [r4, #0]
 80061da:	bd38      	pop	{r3, r4, r5, pc}
 80061dc:	20000120 	.word	0x20000120

080061e0 <_read_r>:
 80061e0:	b538      	push	{r3, r4, r5, lr}
 80061e2:	4604      	mov	r4, r0
 80061e4:	4608      	mov	r0, r1
 80061e6:	4611      	mov	r1, r2
 80061e8:	2200      	movs	r2, #0
 80061ea:	4d05      	ldr	r5, [pc, #20]	; (8006200 <_read_r+0x20>)
 80061ec:	602a      	str	r2, [r5, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	f7fb fa76 	bl	80016e0 <_read>
 80061f4:	1c43      	adds	r3, r0, #1
 80061f6:	d102      	bne.n	80061fe <_read_r+0x1e>
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	b103      	cbz	r3, 80061fe <_read_r+0x1e>
 80061fc:	6023      	str	r3, [r4, #0]
 80061fe:	bd38      	pop	{r3, r4, r5, pc}
 8006200:	20000120 	.word	0x20000120

08006204 <_init>:
 8006204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006206:	bf00      	nop
 8006208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620a:	bc08      	pop	{r3}
 800620c:	469e      	mov	lr, r3
 800620e:	4770      	bx	lr

08006210 <_fini>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr
